// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using SpacetimeDB;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
	public sealed class RemoteTables
	{
		public class MessageHandle : RemoteTableHandle<EventContext, Message>
		{
			internal MessageHandle()
			{
			}

		}

		public readonly MessageHandle Message = new();

		public class UserHandle : RemoteTableHandle<EventContext, User>
		{

			public override void InternalInvokeValueInserted(IDatabaseRow row)
			{
				var value = (User)row;
				Identity.Cache[value.Identity] = value;
			}

			public override void InternalInvokeValueDeleted(IDatabaseRow row)
			{
				Identity.Cache.Remove(((User)row).Identity);
			}

			public class IdentityUniqueIndex
			{
				internal readonly Dictionary<SpacetimeDB.Identity, User> Cache = new(16);
				public User? Find(SpacetimeDB.Identity value)
				{
					Cache.TryGetValue(value, out var r);
					return r;
				}

			}

			public IdentityUniqueIndex Identity = new();

			internal UserHandle()
			{
			}
			public override object GetPrimaryKey(IDatabaseRow row) => ((User)row).Identity;

		}

		public readonly UserHandle User = new();

	}

	public sealed class RemoteReducers : RemoteBase<DbConnection>
	{
		internal RemoteReducers(DbConnection conn, SetReducerFlags SetReducerFlags) : base(conn) { this.SetCallReducerFlags = SetReducerFlags; }
		internal readonly SetReducerFlags SetCallReducerFlags;
		public delegate void SendMessageHandler(EventContext ctx, string text);
		public event SendMessageHandler? OnSendMessage;

		public void SendMessage(string text)
		{
			conn.InternalCallReducer(new Reducer.SendMessage(text), this.SetCallReducerFlags.SendMessageFlags);
		}

		public bool InvokeSendMessage(EventContext ctx, Reducer.SendMessage args)
		{
			if (OnSendMessage == null) return false;
			OnSendMessage(
				ctx,
				args.Text
			);
			return true;
		}
		public delegate void SetNameHandler(EventContext ctx, string name);
		public event SetNameHandler? OnSetName;

		public void SetName(string name)
		{
			conn.InternalCallReducer(new Reducer.SetName(name), this.SetCallReducerFlags.SetNameFlags);
		}

		public bool InvokeSetName(EventContext ctx, Reducer.SetName args)
		{
			if (OnSetName == null) return false;
			OnSetName(
				ctx,
				args.Name
			);
			return true;
		}
	}

	public sealed class SetReducerFlags
	{
		internal SetReducerFlags() { }
		internal CallReducerFlags SendMessageFlags;
		public void SendMessage(CallReducerFlags flags) { this.SendMessageFlags = flags; }
		internal CallReducerFlags SetNameFlags;
		public void SetName(CallReducerFlags flags) { this.SetNameFlags = flags; }
	}

	public partial record EventContext : DbContext<RemoteTables>, IEventContext
	{
		public readonly RemoteReducers Reducers;
		public readonly SetReducerFlags SetReducerFlags;
		public readonly Event<Reducer> Event;

		internal EventContext(DbConnection conn, Event<Reducer> reducerEvent) : base(conn.Db)
		{
			Reducers = conn.Reducers;
			SetReducerFlags = conn.SetReducerFlags;
			Event = reducerEvent;
		}
	}

	public abstract partial class Reducer
	{
		private Reducer() { }

		[SpacetimeDB.Type]
		[DataContract]
		public partial class SendMessage : Reducer, IReducerArgs
		{
			[DataMember(Name = "text")]
			public string Text;

			public SendMessage(string Text)
			{
				this.Text = Text;
			}

			public SendMessage()
			{
				this.Text = "";
			}

			string IReducerArgs.ReducerName => "send_message";
		}

		[SpacetimeDB.Type]
		[DataContract]
		public partial class SetName : Reducer, IReducerArgs
		{
			[DataMember(Name = "name")]
			public string Name;

			public SetName(string Name)
			{
				this.Name = Name;
			}

			public SetName()
			{
				this.Name = "";
			}

			string IReducerArgs.ReducerName => "set_name";
		}

		public class StdbNone : Reducer {}
		public class StdbIdentityConnected : Reducer {}
		public class StdbIdentityDisconnected : Reducer {}
	}

	public class DbConnection : DbConnectionBase<DbConnection, Reducer>
	{
		public readonly RemoteTables Db = new();
		public readonly RemoteReducers Reducers;
		public readonly SetReducerFlags SetReducerFlags;

		public DbConnection()
		{
			SetReducerFlags = new();
			Reducers = new(this, this.SetReducerFlags);

			clientDB.AddTable<Message>("message", Db.Message);
			clientDB.AddTable<User>("user", Db.User);
		}

		protected override Reducer ToReducer(TransactionUpdate update)
		{
			var encodedArgs = update.ReducerCall.Args;
			return update.ReducerCall.ReducerName switch {
				"send_message" => BSATNHelpers.Decode<Reducer.SendMessage>(encodedArgs),
				"set_name" => BSATNHelpers.Decode<Reducer.SetName>(encodedArgs),
				"<none>" => new Reducer.StdbNone(),
				"__identity_connected__" => new Reducer.StdbIdentityConnected(),
				"__identity_disconnected__" => new Reducer.StdbIdentityDisconnected(),
				"" => new Reducer.StdbNone(),
				var reducer => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
			};
		}

		protected override IEventContext ToEventContext(Event<Reducer> reducerEvent) =>
		new EventContext(this, reducerEvent);

		protected override bool Dispatch(IEventContext context, Reducer reducer)
		{
			var eventContext = (EventContext)context;
			return reducer switch {
				Reducer.SendMessage args => Reducers.InvokeSendMessage(eventContext, args),
				Reducer.SetName args => Reducers.InvokeSetName(eventContext, args),
				Reducer.StdbNone or
				Reducer.StdbIdentityConnected or
				Reducer.StdbIdentityDisconnected => true,
				_ => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
			};
		}

		public SubscriptionBuilder<EventContext> SubscriptionBuilder() => new(this);
	}
}
