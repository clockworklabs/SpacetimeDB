// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.4.0 (commit c9276358a10fa5dcbee7683260a68b8f9aef3361).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from '../index';
import { CallReducer } from './call_reducer_type';
import { Subscribe } from './subscribe_type';
import { OneOffQuery } from './one_off_query_type';
import { SubscribeSingle } from './subscribe_single_type';
import { SubscribeMulti } from './subscribe_multi_type';
import { Unsubscribe } from './unsubscribe_type';
import { UnsubscribeMulti } from './unsubscribe_multi_type';

import * as ClientMessageVariants from './client_message_variants';

// The tagged union or sum type for the algebraic type `ClientMessage`.
export type ClientMessage =
  | ClientMessageVariants.CallReducer
  | ClientMessageVariants.Subscribe
  | ClientMessageVariants.OneOffQuery
  | ClientMessageVariants.SubscribeSingle
  | ClientMessageVariants.SubscribeMulti
  | ClientMessageVariants.Unsubscribe
  | ClientMessageVariants.UnsubscribeMulti;

// A value with helper functions to construct the type.
export const ClientMessage = {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  CallReducer: (value: CallReducer): ClientMessage => ({
    tag: 'CallReducer',
    value,
  }),
  Subscribe: (value: Subscribe): ClientMessage => ({ tag: 'Subscribe', value }),
  OneOffQuery: (value: OneOffQuery): ClientMessage => ({
    tag: 'OneOffQuery',
    value,
  }),
  SubscribeSingle: (value: SubscribeSingle): ClientMessage => ({
    tag: 'SubscribeSingle',
    value,
  }),
  SubscribeMulti: (value: SubscribeMulti): ClientMessage => ({
    tag: 'SubscribeMulti',
    value,
  }),
  Unsubscribe: (value: Unsubscribe): ClientMessage => ({
    tag: 'Unsubscribe',
    value,
  }),
  UnsubscribeMulti: (value: UnsubscribeMulti): ClientMessage => ({
    tag: 'UnsubscribeMulti',
    value,
  }),

  getTypeScriptAlgebraicType(): __AlgebraicTypeType {
    return __AlgebraicTypeValue.Sum({
      variants: [
        {
          name: 'CallReducer',
          algebraicType: CallReducer.getTypeScriptAlgebraicType(),
        },
        {
          name: 'Subscribe',
          algebraicType: Subscribe.getTypeScriptAlgebraicType(),
        },
        {
          name: 'OneOffQuery',
          algebraicType: OneOffQuery.getTypeScriptAlgebraicType(),
        },
        {
          name: 'SubscribeSingle',
          algebraicType: SubscribeSingle.getTypeScriptAlgebraicType(),
        },
        {
          name: 'SubscribeMulti',
          algebraicType: SubscribeMulti.getTypeScriptAlgebraicType(),
        },
        {
          name: 'Unsubscribe',
          algebraicType: Unsubscribe.getTypeScriptAlgebraicType(),
        },
        {
          name: 'UnsubscribeMulti',
          algebraicType: UnsubscribeMulti.getTypeScriptAlgebraicType(),
        },
      ],
    });
  },

  serialize(writer: __BinaryWriter, value: ClientMessage): void {
    __AlgebraicTypeValue.serializeValue(
      writer,
      ClientMessage.getTypeScriptAlgebraicType(),
      value
    );
  },

  deserialize(reader: __BinaryReader): ClientMessage {
    return __AlgebraicTypeValue.deserializeValue(
      reader,
      ClientMessage.getTypeScriptAlgebraicType()
    );
  },
};

export default ClientMessage;
