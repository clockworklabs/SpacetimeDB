// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit be6130a209e59b047af47123db3be3182ede6d36).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from '../index';
import { DatabaseUpdate as __DatabaseUpdate } from './database_update_type';

// These are the generated variant types for each variant of the tagged union.
// One type is generated per variant and will be used in the `value` field of
// the tagged union.
// NOTE: These are generated in a separate namespace because TypeScript
// interprets `Foo` in the statement `const x: Foo.Variant = ...` as the type `Foo` instead of
// the namespace `Foo` which includes types within it. Therefore we generate the `FooVariants`
// type. e.g. `const x: FooVariants.Variant`
export namespace UpdateStatusVariants {
  export type Committed = { tag: 'Committed'; value: __DatabaseUpdate };
  export type Failed = { tag: 'Failed'; value: string };
  export type OutOfEnergy = { tag: 'OutOfEnergy' };
}

// A namespace for generated variants and helper functions.
export namespace UpdateStatus {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Committed = (value: __DatabaseUpdate): UpdateStatus => ({
    tag: 'Committed',
    value,
  });
  export const Failed = (value: string): UpdateStatus => ({
    tag: 'Failed',
    value,
  });
  export const OutOfEnergy: { tag: 'OutOfEnergy' } = { tag: 'OutOfEnergy' };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Sum({
      variants: [
        {
          name: 'Committed',
          algebraicType: __DatabaseUpdate.getTypeScriptAlgebraicType(),
        },
        { name: 'Failed', algebraicType: AlgebraicType.String },
        {
          name: 'OutOfEnergy',
          algebraicType: AlgebraicType.Product({ elements: [] }),
        },
      ],
    });
  }

  export function serialize(writer: BinaryWriter, value: UpdateStatus): void {
    AlgebraicType.serializeValue(
      writer,
      UpdateStatus.getTypeScriptAlgebraicType(),
      value
    );
  }

  export function deserialize(reader: BinaryReader): UpdateStatus {
    return AlgebraicType.deserializeValue(
      reader,
      UpdateStatus.getTypeScriptAlgebraicType()
    );
  }
}

// The tagged union or sum type for the algebraic type `UpdateStatus`.
export type UpdateStatus =
  | UpdateStatusVariants.Committed
  | UpdateStatusVariants.Failed
  | UpdateStatusVariants.OutOfEnergy;

export default UpdateStatus;
