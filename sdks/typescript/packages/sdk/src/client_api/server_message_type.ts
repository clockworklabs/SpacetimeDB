// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.4.0 (commit c9276358a10fa5dcbee7683260a68b8f9aef3361).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from '../index';
import { InitialSubscription } from './initial_subscription_type';
import { TransactionUpdate } from './transaction_update_type';
import { TransactionUpdateLight } from './transaction_update_light_type';
import { IdentityToken } from './identity_token_type';
import { OneOffQueryResponse } from './one_off_query_response_type';
import { SubscribeApplied } from './subscribe_applied_type';
import { UnsubscribeApplied } from './unsubscribe_applied_type';
import { SubscriptionError } from './subscription_error_type';
import { SubscribeMultiApplied } from './subscribe_multi_applied_type';
import { UnsubscribeMultiApplied } from './unsubscribe_multi_applied_type';

import * as ServerMessageVariants from './server_message_variants';

// The tagged union or sum type for the algebraic type `ServerMessage`.
export type ServerMessage =
  | ServerMessageVariants.InitialSubscription
  | ServerMessageVariants.TransactionUpdate
  | ServerMessageVariants.TransactionUpdateLight
  | ServerMessageVariants.IdentityToken
  | ServerMessageVariants.OneOffQueryResponse
  | ServerMessageVariants.SubscribeApplied
  | ServerMessageVariants.UnsubscribeApplied
  | ServerMessageVariants.SubscriptionError
  | ServerMessageVariants.SubscribeMultiApplied
  | ServerMessageVariants.UnsubscribeMultiApplied;

// A value with helper functions to construct the type.
export const ServerMessage = {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  InitialSubscription: (value: InitialSubscription): ServerMessage => ({
    tag: 'InitialSubscription',
    value,
  }),
  TransactionUpdate: (value: TransactionUpdate): ServerMessage => ({
    tag: 'TransactionUpdate',
    value,
  }),
  TransactionUpdateLight: (value: TransactionUpdateLight): ServerMessage => ({
    tag: 'TransactionUpdateLight',
    value,
  }),
  IdentityToken: (value: IdentityToken): ServerMessage => ({
    tag: 'IdentityToken',
    value,
  }),
  OneOffQueryResponse: (value: OneOffQueryResponse): ServerMessage => ({
    tag: 'OneOffQueryResponse',
    value,
  }),
  SubscribeApplied: (value: SubscribeApplied): ServerMessage => ({
    tag: 'SubscribeApplied',
    value,
  }),
  UnsubscribeApplied: (value: UnsubscribeApplied): ServerMessage => ({
    tag: 'UnsubscribeApplied',
    value,
  }),
  SubscriptionError: (value: SubscriptionError): ServerMessage => ({
    tag: 'SubscriptionError',
    value,
  }),
  SubscribeMultiApplied: (value: SubscribeMultiApplied): ServerMessage => ({
    tag: 'SubscribeMultiApplied',
    value,
  }),
  UnsubscribeMultiApplied: (value: UnsubscribeMultiApplied): ServerMessage => ({
    tag: 'UnsubscribeMultiApplied',
    value,
  }),

  getTypeScriptAlgebraicType(): __AlgebraicTypeType {
    return __AlgebraicTypeValue.Sum({
      variants: [
        {
          name: 'InitialSubscription',
          algebraicType: InitialSubscription.getTypeScriptAlgebraicType(),
        },
        {
          name: 'TransactionUpdate',
          algebraicType: TransactionUpdate.getTypeScriptAlgebraicType(),
        },
        {
          name: 'TransactionUpdateLight',
          algebraicType: TransactionUpdateLight.getTypeScriptAlgebraicType(),
        },
        {
          name: 'IdentityToken',
          algebraicType: IdentityToken.getTypeScriptAlgebraicType(),
        },
        {
          name: 'OneOffQueryResponse',
          algebraicType: OneOffQueryResponse.getTypeScriptAlgebraicType(),
        },
        {
          name: 'SubscribeApplied',
          algebraicType: SubscribeApplied.getTypeScriptAlgebraicType(),
        },
        {
          name: 'UnsubscribeApplied',
          algebraicType: UnsubscribeApplied.getTypeScriptAlgebraicType(),
        },
        {
          name: 'SubscriptionError',
          algebraicType: SubscriptionError.getTypeScriptAlgebraicType(),
        },
        {
          name: 'SubscribeMultiApplied',
          algebraicType: SubscribeMultiApplied.getTypeScriptAlgebraicType(),
        },
        {
          name: 'UnsubscribeMultiApplied',
          algebraicType: UnsubscribeMultiApplied.getTypeScriptAlgebraicType(),
        },
      ],
    });
  },

  serialize(writer: __BinaryWriter, value: ServerMessage): void {
    __AlgebraicTypeValue.serializeValue(
      writer,
      ServerMessage.getTypeScriptAlgebraicType(),
      value
    );
  },

  deserialize(reader: __BinaryReader): ServerMessage {
    return __AlgebraicTypeValue.deserializeValue(
      reader,
      ServerMessage.getTypeScriptAlgebraicType()
    );
  },
};

export default ServerMessage;
