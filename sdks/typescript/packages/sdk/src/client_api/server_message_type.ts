// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit be6130a209e59b047af47123db3be3182ede6d36).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "../index";
import { InitialSubscription as __InitialSubscription } from "./initial_subscription_type";
import { TransactionUpdate as __TransactionUpdate } from "./transaction_update_type";
import { TransactionUpdateLight as __TransactionUpdateLight } from "./transaction_update_light_type";
import { IdentityToken as __IdentityToken } from "./identity_token_type";
import { OneOffQueryResponse as __OneOffQueryResponse } from "./one_off_query_response_type";
import { SubscribeApplied as __SubscribeApplied } from "./subscribe_applied_type";
import { UnsubscribeApplied as __UnsubscribeApplied } from "./unsubscribe_applied_type";
import { SubscriptionError as __SubscriptionError } from "./subscription_error_type";
import { SubscribeMultiApplied as __SubscribeMultiApplied } from "./subscribe_multi_applied_type";
import { UnsubscribeMultiApplied as __UnsubscribeMultiApplied } from "./unsubscribe_multi_applied_type";

// These are the generated variant types for each variant of the tagged union.
// One type is generated per variant and will be used in the `value` field of
// the tagged union.
// NOTE: These are generated in a separate namespace because TypeScript
// interprets `Foo` in the statement `const x: Foo.Variant = ...` as the type `Foo` instead of
// the namespace `Foo` which includes types within it. Therefore we generate the `FooVariants`
// type. e.g. `const x: FooVariants.Variant`
export namespace ServerMessageVariants {
  export type InitialSubscription = { tag: "InitialSubscription", value: __InitialSubscription };
  export type TransactionUpdate = { tag: "TransactionUpdate", value: __TransactionUpdate };
  export type TransactionUpdateLight = { tag: "TransactionUpdateLight", value: __TransactionUpdateLight };
  export type IdentityToken = { tag: "IdentityToken", value: __IdentityToken };
  export type OneOffQueryResponse = { tag: "OneOffQueryResponse", value: __OneOffQueryResponse };
  export type SubscribeApplied = { tag: "SubscribeApplied", value: __SubscribeApplied };
  export type UnsubscribeApplied = { tag: "UnsubscribeApplied", value: __UnsubscribeApplied };
  export type SubscriptionError = { tag: "SubscriptionError", value: __SubscriptionError };
  export type SubscribeMultiApplied = { tag: "SubscribeMultiApplied", value: __SubscribeMultiApplied };
  export type UnsubscribeMultiApplied = { tag: "UnsubscribeMultiApplied", value: __UnsubscribeMultiApplied };
}

// A namespace for generated variants and helper functions.
export namespace ServerMessage {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const InitialSubscription = (value: __InitialSubscription): ServerMessage => ({ tag: "InitialSubscription", value });
  export const TransactionUpdate = (value: __TransactionUpdate): ServerMessage => ({ tag: "TransactionUpdate", value });
  export const TransactionUpdateLight = (value: __TransactionUpdateLight): ServerMessage => ({ tag: "TransactionUpdateLight", value });
  export const IdentityToken = (value: __IdentityToken): ServerMessage => ({ tag: "IdentityToken", value });
  export const OneOffQueryResponse = (value: __OneOffQueryResponse): ServerMessage => ({ tag: "OneOffQueryResponse", value });
  export const SubscribeApplied = (value: __SubscribeApplied): ServerMessage => ({ tag: "SubscribeApplied", value });
  export const UnsubscribeApplied = (value: __UnsubscribeApplied): ServerMessage => ({ tag: "UnsubscribeApplied", value });
  export const SubscriptionError = (value: __SubscriptionError): ServerMessage => ({ tag: "SubscriptionError", value });
  export const SubscribeMultiApplied = (value: __SubscribeMultiApplied): ServerMessage => ({ tag: "SubscribeMultiApplied", value });
  export const UnsubscribeMultiApplied = (value: __UnsubscribeMultiApplied): ServerMessage => ({ tag: "UnsubscribeMultiApplied", value });

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Sum({
      variants: [
        { name: "InitialSubscription", algebraicType: __InitialSubscription.getTypeScriptAlgebraicType() },
        { name: "TransactionUpdate", algebraicType: __TransactionUpdate.getTypeScriptAlgebraicType() },
        { name: "TransactionUpdateLight", algebraicType: __TransactionUpdateLight.getTypeScriptAlgebraicType() },
        { name: "IdentityToken", algebraicType: __IdentityToken.getTypeScriptAlgebraicType() },
        { name: "OneOffQueryResponse", algebraicType: __OneOffQueryResponse.getTypeScriptAlgebraicType() },
        { name: "SubscribeApplied", algebraicType: __SubscribeApplied.getTypeScriptAlgebraicType() },
        { name: "UnsubscribeApplied", algebraicType: __UnsubscribeApplied.getTypeScriptAlgebraicType() },
        { name: "SubscriptionError", algebraicType: __SubscriptionError.getTypeScriptAlgebraicType() },
        { name: "SubscribeMultiApplied", algebraicType: __SubscribeMultiApplied.getTypeScriptAlgebraicType() },
        { name: "UnsubscribeMultiApplied", algebraicType: __UnsubscribeMultiApplied.getTypeScriptAlgebraicType() },
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: ServerMessage): void {
      AlgebraicType.serializeValue(writer, ServerMessage.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): ServerMessage {
      return AlgebraicType.deserializeValue(reader, ServerMessage.getTypeScriptAlgebraicType());
  }

}

// The tagged union or sum type for the algebraic type `ServerMessage`.
export type ServerMessage = ServerMessage.InitialSubscription |
  ServerMessage.TransactionUpdate |
  ServerMessage.TransactionUpdateLight |
  ServerMessage.IdentityToken |
  ServerMessage.OneOffQueryResponse |
  ServerMessage.SubscribeApplied |
  ServerMessage.UnsubscribeApplied |
  ServerMessage.SubscriptionError |
  ServerMessage.SubscribeMultiApplied |
  ServerMessage.UnsubscribeMultiApplied;

export default ServerMessage;

