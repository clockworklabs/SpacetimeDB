// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit e18b2dc4dd1debb07349a53a515ca2ef07fbcb2b).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from '@clockworklabs/spacetimedb-sdk';
import { Message } from './message_type';
import {
  type EventContext,
  type Reducer,
  RemoteReducers,
  RemoteTables,
} from '.';

/**
 * Table handle for the table `message`.
 *
 * Obtain a handle from the [`message`] property on [`RemoteTables`],
 * like `ctx.db.message`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.message.on_insert(...)`.
 */
export class MessageTableHandle {
  tableCache: TableCache<Message>;

  constructor(tableCache: TableCache<Message>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<Message> {
    return this.tableCache.iter();
  }

  onInsert = (cb: (ctx: EventContext, row: Message) => void) => {
    return this.tableCache.onInsert(cb);
  };

  removeOnInsert = (cb: (ctx: EventContext, row: Message) => void) => {
    return this.tableCache.removeOnInsert(cb);
  };

  onDelete = (cb: (ctx: EventContext, row: Message) => void) => {
    return this.tableCache.onDelete(cb);
  };

  removeOnDelete = (cb: (ctx: EventContext, row: Message) => void) => {
    return this.tableCache.removeOnDelete(cb);
  };
}
