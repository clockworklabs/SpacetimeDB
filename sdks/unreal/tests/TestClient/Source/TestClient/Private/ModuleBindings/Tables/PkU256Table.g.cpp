// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/PkU256Table.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UPkU256Table::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FPkU256Type>>();

    TSharedPtr<FTableCache<FPkU256Type>> PkU256Table = Data->GetOrAdd(TableName);
    PkU256Table->AddUniqueConstraint<FSpacetimeDBUInt256>("n", [](const FPkU256Type& Row) -> const FSpacetimeDBUInt256& {
        return Row.N; });

    N = NewObject<UPkU256NUniqueIndex>(this);
    N->SetCache(PkU256Table);

    /***/
}

FTableAppliedDiff<FPkU256Type> UPkU256Table::Update(TArray<FWithBsatn<FPkU256Type>> InsertsRef, TArray<FWithBsatn<FPkU256Type>> DeletesRef)
{
    FTableAppliedDiff<FPkU256Type> Diff = BaseUpdate<FPkU256Type>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<FSpacetimeDBUInt256>(
        [](const FPkU256Type& Row) 
        {
            return Row.N; 
        }
    );

    return Diff;
}

int32 UPkU256Table::Count() const
{
    return GetRowCountFromTable<FPkU256Type>(Data, TableName);
}

TArray<FPkU256Type> UPkU256Table::Iter() const
{
    return GetAllRowsFromTable<FPkU256Type>(Data, TableName);
}
