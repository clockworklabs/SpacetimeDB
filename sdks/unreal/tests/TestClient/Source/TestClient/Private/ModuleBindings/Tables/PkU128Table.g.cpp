// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/PkU128Table.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UPkU128Table::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FPkU128Type>>();

    TSharedPtr<FTableCache<FPkU128Type>> PkU128Table = Data->GetOrAdd(TableName);
    PkU128Table->AddUniqueConstraint<FSpacetimeDBUInt128>("n", [](const FPkU128Type& Row) -> const FSpacetimeDBUInt128& {
        return Row.N; });

    N = NewObject<UPkU128NUniqueIndex>(this);
    N->SetCache(PkU128Table);

    /***/
}

FTableAppliedDiff<FPkU128Type> UPkU128Table::Update(TArray<FWithBsatn<FPkU128Type>> InsertsRef, TArray<FWithBsatn<FPkU128Type>> DeletesRef)
{
    FTableAppliedDiff<FPkU128Type> Diff = BaseUpdate<FPkU128Type>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<FSpacetimeDBUInt128>(
        [](const FPkU128Type& Row) 
        {
            return Row.N; 
        }
    );

    return Diff;
}

int32 UPkU128Table::Count() const
{
    return GetRowCountFromTable<FPkU128Type>(Data, TableName);
}

TArray<FPkU128Type> UPkU128Table::Iter() const
{
    return GetAllRowsFromTable<FPkU128Type>(Data, TableName);
}
