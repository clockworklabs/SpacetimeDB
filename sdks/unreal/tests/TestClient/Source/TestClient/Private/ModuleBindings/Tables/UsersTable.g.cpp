// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/UsersTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UUsersTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FUsersType>>();

    TSharedPtr<FTableCache<FUsersType>> UsersTable = Data->GetOrAdd(TableName);
    UsersTable->AddUniqueConstraint<FSpacetimeDBIdentity>("identity", [](const FUsersType& Row) -> const FSpacetimeDBIdentity& {
        return Row.Identity; });

    Identity = NewObject<UUsersIdentityUniqueIndex>(this);
    Identity->SetCache(UsersTable);

    /***/
}

FTableAppliedDiff<FUsersType> UUsersTable::Update(TArray<FWithBsatn<FUsersType>> InsertsRef, TArray<FWithBsatn<FUsersType>> DeletesRef)
{
    FTableAppliedDiff<FUsersType> Diff = BaseUpdate<FUsersType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<FSpacetimeDBIdentity>(
        [](const FUsersType& Row) 
        {
            return Row.Identity; 
        }
    );

    return Diff;
}

int32 UUsersTable::Count() const
{
    return GetRowCountFromTable<FUsersType>(Data, TableName);
}

TArray<FUsersType> UUsersTable::Iter() const
{
    return GetAllRowsFromTable<FUsersType>(Data, TableName);
}
