// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/PkSimpleEnumTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UPkSimpleEnumTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FPkSimpleEnumType>>();

    TSharedPtr<FTableCache<FPkSimpleEnumType>> PkSimpleEnumTable = Data->GetOrAdd(TableName);
    PkSimpleEnumTable->AddUniqueConstraint<ESimpleEnumType>("a", [](const FPkSimpleEnumType& Row) -> const ESimpleEnumType& {
        return Row.A; });

    A = NewObject<UPkSimpleEnumAUniqueIndex>(this);
    A->SetCache(PkSimpleEnumTable);

    /***/
}

FTableAppliedDiff<FPkSimpleEnumType> UPkSimpleEnumTable::Update(TArray<FWithBsatn<FPkSimpleEnumType>> InsertsRef, TArray<FWithBsatn<FPkSimpleEnumType>> DeletesRef)
{
    FTableAppliedDiff<FPkSimpleEnumType> Diff = BaseUpdate<FPkSimpleEnumType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<ESimpleEnumType>(
        [](const FPkSimpleEnumType& Row) 
        {
            return Row.A; 
        }
    );

    return Diff;
}

int32 UPkSimpleEnumTable::Count() const
{
    return GetRowCountFromTable<FPkSimpleEnumType>(Data, TableName);
}

TArray<FPkSimpleEnumType> UPkSimpleEnumTable::Iter() const
{
    return GetAllRowsFromTable<FPkSimpleEnumType>(Data, TableName);
}
