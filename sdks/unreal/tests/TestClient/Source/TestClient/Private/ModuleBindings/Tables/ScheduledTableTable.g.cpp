// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/ScheduledTableTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UScheduledTableTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FScheduledTableType>>();

    TSharedPtr<FTableCache<FScheduledTableType>> ScheduledTableTable = Data->GetOrAdd(TableName);
    ScheduledTableTable->AddUniqueConstraint<uint64>("scheduled_id", [](const FScheduledTableType& Row) -> const uint64& {
        return Row.ScheduledId; });

    ScheduledId = NewObject<UScheduledTableScheduledIdUniqueIndex>(this);
    ScheduledId->SetCache(ScheduledTableTable);

    /***/
}

FTableAppliedDiff<FScheduledTableType> UScheduledTableTable::Update(TArray<FWithBsatn<FScheduledTableType>> InsertsRef, TArray<FWithBsatn<FScheduledTableType>> DeletesRef)
{
    FTableAppliedDiff<FScheduledTableType> Diff = BaseUpdate<FScheduledTableType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<uint64>(
        [](const FScheduledTableType& Row) 
        {
            return Row.ScheduledId; 
        }
    );

    return Diff;
}

int32 UScheduledTableTable::Count() const
{
    return GetRowCountFromTable<FScheduledTableType>(Data, TableName);
}

TArray<FScheduledTableType> UScheduledTableTable::Iter() const
{
    return GetAllRowsFromTable<FScheduledTableType>(Data, TableName);
}
