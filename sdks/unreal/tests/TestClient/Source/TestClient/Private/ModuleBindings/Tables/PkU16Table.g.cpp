// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/PkU16Table.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UPkU16Table::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FPkU16Type>>();

    TSharedPtr<FTableCache<FPkU16Type>> PkU16Table = Data->GetOrAdd(TableName);
    PkU16Table->AddUniqueConstraint<uint16>("n", [](const FPkU16Type& Row) -> const uint16& {
        return Row.N; });

    N = NewObject<UPkU16NUniqueIndex>(this);
    N->SetCache(PkU16Table);

    /***/
}

FTableAppliedDiff<FPkU16Type> UPkU16Table::Update(TArray<FWithBsatn<FPkU16Type>> InsertsRef, TArray<FWithBsatn<FPkU16Type>> DeletesRef)
{
    FTableAppliedDiff<FPkU16Type> Diff = BaseUpdate<FPkU16Type>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<uint16>(
        [](const FPkU16Type& Row) 
        {
            return Row.N; 
        }
    );

    return Diff;
}

int32 UPkU16Table::Count() const
{
    return GetRowCountFromTable<FPkU16Type>(Data, TableName);
}

TArray<FPkU16Type> UPkU16Table::Iter() const
{
    return GetAllRowsFromTable<FPkU16Type>(Data, TableName);
}
