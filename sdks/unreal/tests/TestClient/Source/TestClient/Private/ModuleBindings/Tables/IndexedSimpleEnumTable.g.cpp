// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/IndexedSimpleEnumTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UIndexedSimpleEnumTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FIndexedSimpleEnumType>>();

    TSharedPtr<FTableCache<FIndexedSimpleEnumType>> IndexedSimpleEnumTable = Data->GetOrAdd(TableName);

    // Register a new multi-key B-Tree index named "n" on the IndexedSimpleEnumTable.
    IndexedSimpleEnumTable->AddMultiKeyBTreeIndex<TTuple<ESimpleEnumType>>(
        TEXT("n"),
        [](const FIndexedSimpleEnumType& Row)
        {
            // This tuple is stored in the B-Tree index for fast composite key lookups.
            return MakeTuple(Row.N);
        }
    );

    N = NewObject<UIndexedSimpleEnumNIndex>(this);
    N->SetCache(IndexedSimpleEnumTable);

    /***/
}

FTableAppliedDiff<FIndexedSimpleEnumType> UIndexedSimpleEnumTable::Update(TArray<FWithBsatn<FIndexedSimpleEnumType>> InsertsRef, TArray<FWithBsatn<FIndexedSimpleEnumType>> DeletesRef)
{
    FTableAppliedDiff<FIndexedSimpleEnumType> Diff = BaseUpdate<FIndexedSimpleEnumType>(InsertsRef, DeletesRef, Data, TableName);

    return Diff;
}

int32 UIndexedSimpleEnumTable::Count() const
{
    return GetRowCountFromTable<FIndexedSimpleEnumType>(Data, TableName);
}

TArray<FIndexedSimpleEnumType> UIndexedSimpleEnumTable::Iter() const
{
    return GetAllRowsFromTable<FIndexedSimpleEnumType>(Data, TableName);
}
