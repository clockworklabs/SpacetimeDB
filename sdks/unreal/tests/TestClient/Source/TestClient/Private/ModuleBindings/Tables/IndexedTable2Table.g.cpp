// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/IndexedTable2Table.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UIndexedTable2Table::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FIndexedTable2Type>>();

    TSharedPtr<FTableCache<FIndexedTable2Type>> IndexedTable2Table = Data->GetOrAdd(TableName);

    // Register a new multi-key B-Tree index named "player_id_snazz_index" on the IndexedTable2Table.
    IndexedTable2Table->AddMultiKeyBTreeIndex<TTuple<uint32, float>>(
        TEXT("player_id_snazz_index"),
        [](const FIndexedTable2Type& Row)
        {
            // This tuple is stored in the B-Tree index for fast composite key lookups.
            return MakeTuple(Row.PlayerId, Row.PlayerSnazz);
        }
    );

    PlayerIdSnazzIndex = NewObject<UIndexedTable2PlayerIdSnazzIndexIndex>(this);
    PlayerIdSnazzIndex->SetCache(IndexedTable2Table);

    /***/
}

FTableAppliedDiff<FIndexedTable2Type> UIndexedTable2Table::Update(TArray<FWithBsatn<FIndexedTable2Type>> InsertsRef, TArray<FWithBsatn<FIndexedTable2Type>> DeletesRef)
{
    FTableAppliedDiff<FIndexedTable2Type> Diff = BaseUpdate<FIndexedTable2Type>(InsertsRef, DeletesRef, Data, TableName);

    return Diff;
}

int32 UIndexedTable2Table::Count() const
{
    return GetRowCountFromTable<FIndexedTable2Type>(Data, TableName);
}

TArray<FIndexedTable2Type> UIndexedTable2Table::Iter() const
{
    return GetAllRowsFromTable<FIndexedTable2Type>(Data, TableName);
}
