// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/PkIdentityTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UPkIdentityTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FPkIdentityType>>();

    TSharedPtr<FTableCache<FPkIdentityType>> PkIdentityTable = Data->GetOrAdd(TableName);
    PkIdentityTable->AddUniqueConstraint<FSpacetimeDBIdentity>("i", [](const FPkIdentityType& Row) -> const FSpacetimeDBIdentity& {
        return Row.I; });

    I = NewObject<UPkIdentityIUniqueIndex>(this);
    I->SetCache(PkIdentityTable);

    /***/
}

FTableAppliedDiff<FPkIdentityType> UPkIdentityTable::Update(TArray<FWithBsatn<FPkIdentityType>> InsertsRef, TArray<FWithBsatn<FPkIdentityType>> DeletesRef)
{
    FTableAppliedDiff<FPkIdentityType> Diff = BaseUpdate<FPkIdentityType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<FSpacetimeDBIdentity>(
        [](const FPkIdentityType& Row) 
        {
            return Row.I; 
        }
    );

    return Diff;
}

int32 UPkIdentityTable::Count() const
{
    return GetRowCountFromTable<FPkIdentityType>(Data, TableName);
}

TArray<FPkIdentityType> UPkIdentityTable::Iter() const
{
    return GetAllRowsFromTable<FPkIdentityType>(Data, TableName);
}
