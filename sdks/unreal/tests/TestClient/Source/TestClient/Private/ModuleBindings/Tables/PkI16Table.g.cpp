// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/PkI16Table.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UPkI16Table::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FPkI16Type>>();

    TSharedPtr<FTableCache<FPkI16Type>> PkI16Table = Data->GetOrAdd(TableName);
    PkI16Table->AddUniqueConstraint<int16>("n", [](const FPkI16Type& Row) -> const int16& {
        return Row.N; });

    N = NewObject<UPkI16NUniqueIndex>(this);
    N->SetCache(PkI16Table);

    /***/
}

FTableAppliedDiff<FPkI16Type> UPkI16Table::Update(TArray<FWithBsatn<FPkI16Type>> InsertsRef, TArray<FWithBsatn<FPkI16Type>> DeletesRef)
{
    FTableAppliedDiff<FPkI16Type> Diff = BaseUpdate<FPkI16Type>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<int16>(
        [](const FPkI16Type& Row) 
        {
            return Row.N; 
        }
    );

    return Diff;
}

int32 UPkI16Table::Count() const
{
    return GetRowCountFromTable<FPkI16Type>(Data, TableName);
}

TArray<FPkI16Type> UPkI16Table::Iter() const
{
    return GetAllRowsFromTable<FPkI16Type>(Data, TableName);
}
