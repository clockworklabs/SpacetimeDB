// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/PkBoolTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UPkBoolTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FPkBoolType>>();

    TSharedPtr<FTableCache<FPkBoolType>> PkBoolTable = Data->GetOrAdd(TableName);
    PkBoolTable->AddUniqueConstraint<bool>("b", [](const FPkBoolType& Row) -> const bool& {
        return Row.B; });

    B = NewObject<UPkBoolBUniqueIndex>(this);
    B->SetCache(PkBoolTable);

    /***/
}

FTableAppliedDiff<FPkBoolType> UPkBoolTable::Update(TArray<FWithBsatn<FPkBoolType>> InsertsRef, TArray<FWithBsatn<FPkBoolType>> DeletesRef)
{
    FTableAppliedDiff<FPkBoolType> Diff = BaseUpdate<FPkBoolType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<bool>(
        [](const FPkBoolType& Row) 
        {
            return Row.B; 
        }
    );

    return Diff;
}

int32 UPkBoolTable::Count() const
{
    return GetRowCountFromTable<FPkBoolType>(Data, TableName);
}

TArray<FPkBoolType> UPkBoolTable::Iter() const
{
    return GetAllRowsFromTable<FPkBoolType>(Data, TableName);
}
