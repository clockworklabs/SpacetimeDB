// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/PkI32Table.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UPkI32Table::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FPkI32Type>>();

    TSharedPtr<FTableCache<FPkI32Type>> PkI32Table = Data->GetOrAdd(TableName);
    PkI32Table->AddUniqueConstraint<int32>("n", [](const FPkI32Type& Row) -> const int32& {
        return Row.N; });

    N = NewObject<UPkI32NUniqueIndex>(this);
    N->SetCache(PkI32Table);

    /***/
}

FTableAppliedDiff<FPkI32Type> UPkI32Table::Update(TArray<FWithBsatn<FPkI32Type>> InsertsRef, TArray<FWithBsatn<FPkI32Type>> DeletesRef)
{
    FTableAppliedDiff<FPkI32Type> Diff = BaseUpdate<FPkI32Type>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<int32>(
        [](const FPkI32Type& Row) 
        {
            return Row.N; 
        }
    );

    return Diff;
}

int32 UPkI32Table::Count() const
{
    return GetRowCountFromTable<FPkI32Type>(Data, TableName);
}

TArray<FPkI32Type> UPkI32Table::Iter() const
{
    return GetAllRowsFromTable<FPkI32Type>(Data, TableName);
}
