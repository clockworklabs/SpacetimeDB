// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Types/Builtins.h"
#include "ModuleBindings/Types/PkIdentityType.g.h"
#include "Tables/RemoteTable.h"
#include "DBCache/WithBsatn.h"
#include "DBCache/TableHandle.h"
#include "DBCache/TableCache.h"
#include "PkIdentityTable.g.generated.h"

UCLASS(Blueprintable)
class TESTCLIENT_API UPkIdentityIUniqueIndex : public UObject
{
    GENERATED_BODY()

private:
    // Declare an instance of your templated helper.
    // It's private because the UObject wrapper will expose its functionality.
    FUniqueIndexHelper<FPkIdentityType, FSpacetimeDBIdentity, FTableCache<FPkIdentityType>> IIndexHelper;

public:
    UPkIdentityIUniqueIndex()
        // Initialize the helper with the specific unique index name
        : IIndexHelper("i") {
    }

    /**
     * Finds a PkIdentity by their unique i.
     * @param Key The i to search for.
     * @return The found FPkIdentityType, or a default-constructed FPkIdentityType if not found.
     */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|PkIdentityIndex")
    FPkIdentityType Find(FSpacetimeDBIdentity Key)
    {
        // Simply delegate the call to the internal helper
        return IIndexHelper.FindUniqueIndex(Key);
    }

    // A public setter to provide the cache to the helper after construction
    // This is a common pattern when the cache might be created or provided by another system.
    void SetCache(TSharedPtr<const FTableCache<FPkIdentityType>> InPkIdentityCache)
    {
        IIndexHelper.Cache = InPkIdentityCache;
    }
};
/***/

UCLASS(BlueprintType)
class TESTCLIENT_API UPkIdentityTable : public URemoteTable
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly)
    UPkIdentityIUniqueIndex* I;

    void PostInitialize();

    /** Update function for pk_identity table*/
    FTableAppliedDiff<FPkIdentityType> Update(TArray<FWithBsatn<FPkIdentityType>> InsertsRef, TArray<FWithBsatn<FPkIdentityType>> DeletesRef);

    /** Number of subscribed rows currently in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    int32 Count() const;

    /** Return all subscribed rows in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    TArray<FPkIdentityType> Iter() const;

    // Table Events
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnPkIdentityInsert,
        const FEventContext&, Context,
        const FPkIdentityType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams( 
        FOnPkIdentityUpdate,
        const FEventContext&, Context,
        const FPkIdentityType&, OldRow,
        const FPkIdentityType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnPkIdentityDelete,
        const FEventContext&, Context,
        const FPkIdentityType&, DeletedRow);

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkIdentityInsert OnInsert;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkIdentityUpdate OnUpdate;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkIdentityDelete OnDelete;

private:
    const FString TableName = TEXT("pk_identity");

    TSharedPtr<UClientCache<FPkIdentityType>> Data;
};
