// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Types/Builtins.h"
#include "ModuleBindings/Types/UniqueStringType.g.h"
#include "Tables/RemoteTable.h"
#include "DBCache/WithBsatn.h"
#include "DBCache/TableHandle.h"
#include "DBCache/TableCache.h"
#include "UniqueStringTable.g.generated.h"

UCLASS(Blueprintable)
class TESTCLIENT_API UUniqueStringSUniqueIndex : public UObject
{
    GENERATED_BODY()

private:
    // Declare an instance of your templated helper.
    // It's private because the UObject wrapper will expose its functionality.
    FUniqueIndexHelper<FUniqueStringType, FString, FTableCache<FUniqueStringType>> SIndexHelper;

public:
    UUniqueStringSUniqueIndex()
        // Initialize the helper with the specific unique index name
        : SIndexHelper("s") {
    }

    /**
     * Finds a UniqueString by their unique s.
     * @param Key The s to search for.
     * @return The found FUniqueStringType, or a default-constructed FUniqueStringType if not found.
     */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|UniqueStringIndex")
    FUniqueStringType Find(FString Key)
    {
        // Simply delegate the call to the internal helper
        return SIndexHelper.FindUniqueIndex(Key);
    }

    // A public setter to provide the cache to the helper after construction
    // This is a common pattern when the cache might be created or provided by another system.
    void SetCache(TSharedPtr<const FTableCache<FUniqueStringType>> InUniqueStringCache)
    {
        SIndexHelper.Cache = InUniqueStringCache;
    }
};
/***/

UCLASS(BlueprintType)
class TESTCLIENT_API UUniqueStringTable : public URemoteTable
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly)
    UUniqueStringSUniqueIndex* S;

    void PostInitialize();

    /** Update function for unique_string table*/
    FTableAppliedDiff<FUniqueStringType> Update(TArray<FWithBsatn<FUniqueStringType>> InsertsRef, TArray<FWithBsatn<FUniqueStringType>> DeletesRef);

    /** Number of subscribed rows currently in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    int32 Count() const;

    /** Return all subscribed rows in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    TArray<FUniqueStringType> Iter() const;

    // Table Events
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnUniqueStringInsert,
        const FEventContext&, Context,
        const FUniqueStringType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams( 
        FOnUniqueStringUpdate,
        const FEventContext&, Context,
        const FUniqueStringType&, OldRow,
        const FUniqueStringType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnUniqueStringDelete,
        const FEventContext&, Context,
        const FUniqueStringType&, DeletedRow);

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnUniqueStringInsert OnInsert;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnUniqueStringUpdate OnUpdate;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnUniqueStringDelete OnDelete;

private:
    const FString TableName = TEXT("unique_string");

    TSharedPtr<UClientCache<FUniqueStringType>> Data;
};
