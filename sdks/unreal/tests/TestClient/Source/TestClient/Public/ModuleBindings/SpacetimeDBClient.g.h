// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.4.0 (commit ddbebbcd844fa5d4626e797dce954ba3b1528a51).

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Connection/Callback.h"
#include "Connection/DbConnectionBase.h"
#include "Connection/DbConnectionBuilder.h"
#include "Connection/SetReducerFlags.h"
#include "Connection/Subscription.h"
#include "Kismet/BlueprintFunctionLibrary.h"
#include "ModuleBindings/Optionals/TestClientOptionalEveryPrimitiveStruct.g.h"
#include "ModuleBindings/Optionals/TestClientOptionalIdentity.g.h"
#include "ModuleBindings/Optionals/TestClientOptionalInt32.g.h"
#include "ModuleBindings/Optionals/TestClientOptionalSimpleEnum.g.h"
#include "ModuleBindings/Optionals/TestClientOptionalString.g.h"
#include "ModuleBindings/Optionals/TestClientOptionalVecInt32.g.h"
#include "ModuleBindings/ReducerBase.g.h"
#include "ModuleBindings/Reducers/DeleteFromBtreeU32.g.h"
#include "ModuleBindings/Reducers/DeleteLargeTable.g.h"
#include "ModuleBindings/Reducers/DeletePkBool.g.h"
#include "ModuleBindings/Reducers/DeletePkConnectionId.g.h"
#include "ModuleBindings/Reducers/DeletePkI128.g.h"
#include "ModuleBindings/Reducers/DeletePkI16.g.h"
#include "ModuleBindings/Reducers/DeletePkI256.g.h"
#include "ModuleBindings/Reducers/DeletePkI32.g.h"
#include "ModuleBindings/Reducers/DeletePkI64.g.h"
#include "ModuleBindings/Reducers/DeletePkI8.g.h"
#include "ModuleBindings/Reducers/DeletePkIdentity.g.h"
#include "ModuleBindings/Reducers/DeletePkString.g.h"
#include "ModuleBindings/Reducers/DeletePkU128.g.h"
#include "ModuleBindings/Reducers/DeletePkU16.g.h"
#include "ModuleBindings/Reducers/DeletePkU256.g.h"
#include "ModuleBindings/Reducers/DeletePkU32.g.h"
#include "ModuleBindings/Reducers/DeletePkU32InsertPkU32Two.g.h"
#include "ModuleBindings/Reducers/DeletePkU32Two.g.h"
#include "ModuleBindings/Reducers/DeletePkU64.g.h"
#include "ModuleBindings/Reducers/DeletePkU8.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueBool.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueConnectionId.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueI128.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueI16.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueI256.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueI32.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueI64.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueI8.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueIdentity.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueString.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueU128.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueU16.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueU256.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueU32.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueU64.g.h"
#include "ModuleBindings/Reducers/DeleteUniqueU8.g.h"
#include "ModuleBindings/Reducers/InsertCallTimestamp.g.h"
#include "ModuleBindings/Reducers/InsertCallerOneConnectionId.g.h"
#include "ModuleBindings/Reducers/InsertCallerOneIdentity.g.h"
#include "ModuleBindings/Reducers/InsertCallerPkConnectionId.g.h"
#include "ModuleBindings/Reducers/InsertCallerPkIdentity.g.h"
#include "ModuleBindings/Reducers/InsertCallerUniqueConnectionId.g.h"
#include "ModuleBindings/Reducers/InsertCallerUniqueIdentity.g.h"
#include "ModuleBindings/Reducers/InsertCallerVecConnectionId.g.h"
#include "ModuleBindings/Reducers/InsertCallerVecIdentity.g.h"
#include "ModuleBindings/Reducers/InsertIntoBtreeU32.g.h"
#include "ModuleBindings/Reducers/InsertIntoIndexedSimpleEnum.g.h"
#include "ModuleBindings/Reducers/InsertIntoPkBtreeU32.g.h"
#include "ModuleBindings/Reducers/InsertLargeTable.g.h"
#include "ModuleBindings/Reducers/InsertOneBool.g.h"
#include "ModuleBindings/Reducers/InsertOneByteStruct.g.h"
#include "ModuleBindings/Reducers/InsertOneConnectionId.g.h"
#include "ModuleBindings/Reducers/InsertOneEnumWithPayload.g.h"
#include "ModuleBindings/Reducers/InsertOneEveryPrimitiveStruct.g.h"
#include "ModuleBindings/Reducers/InsertOneEveryVecStruct.g.h"
#include "ModuleBindings/Reducers/InsertOneF32.g.h"
#include "ModuleBindings/Reducers/InsertOneF64.g.h"
#include "ModuleBindings/Reducers/InsertOneI128.g.h"
#include "ModuleBindings/Reducers/InsertOneI16.g.h"
#include "ModuleBindings/Reducers/InsertOneI256.g.h"
#include "ModuleBindings/Reducers/InsertOneI32.g.h"
#include "ModuleBindings/Reducers/InsertOneI64.g.h"
#include "ModuleBindings/Reducers/InsertOneI8.g.h"
#include "ModuleBindings/Reducers/InsertOneIdentity.g.h"
#include "ModuleBindings/Reducers/InsertOneSimpleEnum.g.h"
#include "ModuleBindings/Reducers/InsertOneString.g.h"
#include "ModuleBindings/Reducers/InsertOneTimestamp.g.h"
#include "ModuleBindings/Reducers/InsertOneU128.g.h"
#include "ModuleBindings/Reducers/InsertOneU16.g.h"
#include "ModuleBindings/Reducers/InsertOneU256.g.h"
#include "ModuleBindings/Reducers/InsertOneU32.g.h"
#include "ModuleBindings/Reducers/InsertOneU64.g.h"
#include "ModuleBindings/Reducers/InsertOneU8.g.h"
#include "ModuleBindings/Reducers/InsertOneUnitStruct.g.h"
#include "ModuleBindings/Reducers/InsertOptionEveryPrimitiveStruct.g.h"
#include "ModuleBindings/Reducers/InsertOptionI32.g.h"
#include "ModuleBindings/Reducers/InsertOptionIdentity.g.h"
#include "ModuleBindings/Reducers/InsertOptionSimpleEnum.g.h"
#include "ModuleBindings/Reducers/InsertOptionString.g.h"
#include "ModuleBindings/Reducers/InsertOptionVecOptionI32.g.h"
#include "ModuleBindings/Reducers/InsertPkBool.g.h"
#include "ModuleBindings/Reducers/InsertPkConnectionId.g.h"
#include "ModuleBindings/Reducers/InsertPkI128.g.h"
#include "ModuleBindings/Reducers/InsertPkI16.g.h"
#include "ModuleBindings/Reducers/InsertPkI256.g.h"
#include "ModuleBindings/Reducers/InsertPkI32.g.h"
#include "ModuleBindings/Reducers/InsertPkI64.g.h"
#include "ModuleBindings/Reducers/InsertPkI8.g.h"
#include "ModuleBindings/Reducers/InsertPkIdentity.g.h"
#include "ModuleBindings/Reducers/InsertPkSimpleEnum.g.h"
#include "ModuleBindings/Reducers/InsertPkString.g.h"
#include "ModuleBindings/Reducers/InsertPkU128.g.h"
#include "ModuleBindings/Reducers/InsertPkU16.g.h"
#include "ModuleBindings/Reducers/InsertPkU256.g.h"
#include "ModuleBindings/Reducers/InsertPkU32.g.h"
#include "ModuleBindings/Reducers/InsertPkU32Two.g.h"
#include "ModuleBindings/Reducers/InsertPkU64.g.h"
#include "ModuleBindings/Reducers/InsertPkU8.g.h"
#include "ModuleBindings/Reducers/InsertPrimitivesAsStrings.g.h"
#include "ModuleBindings/Reducers/InsertTableHoldsTable.g.h"
#include "ModuleBindings/Reducers/InsertUniqueBool.g.h"
#include "ModuleBindings/Reducers/InsertUniqueConnectionId.g.h"
#include "ModuleBindings/Reducers/InsertUniqueI128.g.h"
#include "ModuleBindings/Reducers/InsertUniqueI16.g.h"
#include "ModuleBindings/Reducers/InsertUniqueI256.g.h"
#include "ModuleBindings/Reducers/InsertUniqueI32.g.h"
#include "ModuleBindings/Reducers/InsertUniqueI64.g.h"
#include "ModuleBindings/Reducers/InsertUniqueI8.g.h"
#include "ModuleBindings/Reducers/InsertUniqueIdentity.g.h"
#include "ModuleBindings/Reducers/InsertUniqueString.g.h"
#include "ModuleBindings/Reducers/InsertUniqueU128.g.h"
#include "ModuleBindings/Reducers/InsertUniqueU16.g.h"
#include "ModuleBindings/Reducers/InsertUniqueU256.g.h"
#include "ModuleBindings/Reducers/InsertUniqueU32.g.h"
#include "ModuleBindings/Reducers/InsertUniqueU32UpdatePkU32.g.h"
#include "ModuleBindings/Reducers/InsertUniqueU64.g.h"
#include "ModuleBindings/Reducers/InsertUniqueU8.g.h"
#include "ModuleBindings/Reducers/InsertUser.g.h"
#include "ModuleBindings/Reducers/InsertVecBool.g.h"
#include "ModuleBindings/Reducers/InsertVecByteStruct.g.h"
#include "ModuleBindings/Reducers/InsertVecConnectionId.g.h"
#include "ModuleBindings/Reducers/InsertVecEnumWithPayload.g.h"
#include "ModuleBindings/Reducers/InsertVecEveryPrimitiveStruct.g.h"
#include "ModuleBindings/Reducers/InsertVecEveryVecStruct.g.h"
#include "ModuleBindings/Reducers/InsertVecF32.g.h"
#include "ModuleBindings/Reducers/InsertVecF64.g.h"
#include "ModuleBindings/Reducers/InsertVecI128.g.h"
#include "ModuleBindings/Reducers/InsertVecI16.g.h"
#include "ModuleBindings/Reducers/InsertVecI256.g.h"
#include "ModuleBindings/Reducers/InsertVecI32.g.h"
#include "ModuleBindings/Reducers/InsertVecI64.g.h"
#include "ModuleBindings/Reducers/InsertVecI8.g.h"
#include "ModuleBindings/Reducers/InsertVecIdentity.g.h"
#include "ModuleBindings/Reducers/InsertVecSimpleEnum.g.h"
#include "ModuleBindings/Reducers/InsertVecString.g.h"
#include "ModuleBindings/Reducers/InsertVecTimestamp.g.h"
#include "ModuleBindings/Reducers/InsertVecU128.g.h"
#include "ModuleBindings/Reducers/InsertVecU16.g.h"
#include "ModuleBindings/Reducers/InsertVecU256.g.h"
#include "ModuleBindings/Reducers/InsertVecU32.g.h"
#include "ModuleBindings/Reducers/InsertVecU64.g.h"
#include "ModuleBindings/Reducers/InsertVecU8.g.h"
#include "ModuleBindings/Reducers/InsertVecUnitStruct.g.h"
#include "ModuleBindings/Reducers/NoOpSucceeds.g.h"
#include "ModuleBindings/Reducers/SendScheduledMessage.g.h"
#include "ModuleBindings/Reducers/UpdateIndexedSimpleEnum.g.h"
#include "ModuleBindings/Reducers/UpdatePkBool.g.h"
#include "ModuleBindings/Reducers/UpdatePkConnectionId.g.h"
#include "ModuleBindings/Reducers/UpdatePkI128.g.h"
#include "ModuleBindings/Reducers/UpdatePkI16.g.h"
#include "ModuleBindings/Reducers/UpdatePkI256.g.h"
#include "ModuleBindings/Reducers/UpdatePkI32.g.h"
#include "ModuleBindings/Reducers/UpdatePkI64.g.h"
#include "ModuleBindings/Reducers/UpdatePkI8.g.h"
#include "ModuleBindings/Reducers/UpdatePkIdentity.g.h"
#include "ModuleBindings/Reducers/UpdatePkSimpleEnum.g.h"
#include "ModuleBindings/Reducers/UpdatePkString.g.h"
#include "ModuleBindings/Reducers/UpdatePkU128.g.h"
#include "ModuleBindings/Reducers/UpdatePkU16.g.h"
#include "ModuleBindings/Reducers/UpdatePkU256.g.h"
#include "ModuleBindings/Reducers/UpdatePkU32.g.h"
#include "ModuleBindings/Reducers/UpdatePkU32Two.g.h"
#include "ModuleBindings/Reducers/UpdatePkU64.g.h"
#include "ModuleBindings/Reducers/UpdatePkU8.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueBool.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueConnectionId.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueI128.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueI16.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueI256.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueI32.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueI64.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueI8.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueIdentity.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueString.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueU128.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueU16.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueU256.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueU32.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueU64.g.h"
#include "ModuleBindings/Reducers/UpdateUniqueU8.g.h"
#include "ModuleBindings/Types/BTreeU32Type.g.h"
#include "ModuleBindings/Types/ByteStructType.g.h"
#include "ModuleBindings/Types/EnumWithPayloadType.g.h"
#include "ModuleBindings/Types/EveryPrimitiveStructType.g.h"
#include "ModuleBindings/Types/EveryVecStructType.g.h"
#include "ModuleBindings/Types/OneU8Type.g.h"
#include "ModuleBindings/Types/PkU32Type.g.h"
#include "ModuleBindings/Types/ScheduledTableType.g.h"
#include "ModuleBindings/Types/SimpleEnumType.g.h"
#include "ModuleBindings/Types/UnitStructType.g.h"
#include "ModuleBindings/Types/VecU8Type.g.h"
#include "Types/Builtins.h"
#include "SpacetimeDBClient.g.generated.h"

// Forward declarations
class UDbConnection;
class URemoteTables;
class URemoteReducers;
class USubscriptionBuilder;
class USubscriptionHandle;

/** Forward declaration for tables */
class UBTreeU32Table;
class UIndexedSimpleEnumTable;
class UIndexedTableTable;
class UIndexedTable2Table;
class ULargeTableTable;
class UOneBoolTable;
class UOneByteStructTable;
class UOneConnectionIdTable;
class UOneEnumWithPayloadTable;
class UOneEveryPrimitiveStructTable;
class UOneEveryVecStructTable;
class UOneF32Table;
class UOneF64Table;
class UOneI128Table;
class UOneI16Table;
class UOneI256Table;
class UOneI32Table;
class UOneI64Table;
class UOneI8Table;
class UOneIdentityTable;
class UOneSimpleEnumTable;
class UOneStringTable;
class UOneTimestampTable;
class UOneU128Table;
class UOneU16Table;
class UOneU256Table;
class UOneU32Table;
class UOneU64Table;
class UOneU8Table;
class UOneUnitStructTable;
class UOptionEveryPrimitiveStructTable;
class UOptionI32Table;
class UOptionIdentityTable;
class UOptionSimpleEnumTable;
class UOptionStringTable;
class UOptionVecOptionI32Table;
class UPkBoolTable;
class UPkConnectionIdTable;
class UPkI128Table;
class UPkI16Table;
class UPkI256Table;
class UPkI32Table;
class UPkI64Table;
class UPkI8Table;
class UPkIdentityTable;
class UPkSimpleEnumTable;
class UPkStringTable;
class UPkU128Table;
class UPkU16Table;
class UPkU256Table;
class UPkU32Table;
class UPkU32TwoTable;
class UPkU64Table;
class UPkU8Table;
class UScheduledTableTable;
class UTableHoldsTableTable;
class UUniqueBoolTable;
class UUniqueConnectionIdTable;
class UUniqueI128Table;
class UUniqueI16Table;
class UUniqueI256Table;
class UUniqueI32Table;
class UUniqueI64Table;
class UUniqueI8Table;
class UUniqueIdentityTable;
class UUniqueStringTable;
class UUniqueU128Table;
class UUniqueU16Table;
class UUniqueU256Table;
class UUniqueU32Table;
class UUniqueU64Table;
class UUniqueU8Table;
class UUsersTable;
class UVecBoolTable;
class UVecByteStructTable;
class UVecConnectionIdTable;
class UVecEnumWithPayloadTable;
class UVecEveryPrimitiveStructTable;
class UVecEveryVecStructTable;
class UVecF32Table;
class UVecF64Table;
class UVecI128Table;
class UVecI16Table;
class UVecI256Table;
class UVecI32Table;
class UVecI64Table;
class UVecI8Table;
class UVecIdentityTable;
class UVecSimpleEnumTable;
class UVecStringTable;
class UVecTimestampTable;
class UVecU128Table;
class UVecU16Table;
class UVecU256Table;
class UVecU32Table;
class UVecU64Table;
class UVecU8Table;
class UVecUnitStructTable;
/***/

// Delegates using the generated connection type. These wrap the base
// delegates defined in the SDK so that projects can work directly with
// UDbConnection without manual casting in user code.
DECLARE_DYNAMIC_DELEGATE_ThreeParams(
	FOnConnectDelegate,
	UDbConnection*, Connection,
	FSpacetimeDBIdentity, Identity,
	const FString&, Token);

DECLARE_DYNAMIC_DELEGATE_TwoParams(
	FOnDisconnectDelegate,
	UDbConnection*, Connection,
	const FString&, Error);


// Context classes for event handling

USTRUCT(BlueprintType)
struct TESTCLIENT_API FContextBase
{
	GENERATED_BODY()

	FContextBase() : Db(nullptr), Reducers(nullptr), SetReducerFlags(nullptr), Conn(nullptr) {};
	FContextBase(UDbConnection* InConn);

	UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
	URemoteTables* Db;

	UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
	URemoteReducers* Reducers;

	UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
	USetReducerFlags* SetReducerFlags;

	bool IsActive() const;
	void Disconnect();
	bool TryGetIdentity(FSpacetimeDBIdentity& OutIdentity) const;
	FSpacetimeDBConnectionId GetConnectionId() const;
	USubscriptionBuilder* SubscriptionBuilder();

protected:
	UPROPERTY()
	UDbConnection* Conn;

};

UCLASS()
class TESTCLIENT_API UContextBaseBpLib : public UBlueprintFunctionLibrary
{
	GENERATED_BODY()

private:
	UFUNCTION(BlueprintPure, Category="SpacetimeDB")
	static URemoteTables* GetDb(const FContextBase& Ctx) { return Ctx.Db; }

	UFUNCTION(BlueprintPure, Category="SpacetimeDB")
	static URemoteReducers* GetReducers(const FContextBase& Ctx) { return Ctx.Reducers; }

	UFUNCTION(BlueprintPure, Category="SpacetimeDB")
	static USetReducerFlags* GetSetReducerFlags(const FContextBase& Ctx) { return Ctx.SetReducerFlags; }

	UFUNCTION(BlueprintPure, Category="SpacetimeDB")
	static bool IsActive(const FContextBase& Ctx) { return Ctx.IsActive(); }
};

UENUM(BlueprintType, Category = "SpacetimeDB")
enum class EReducerTag : uint8
{
    DeleteFromBtreeU32,
    DeleteLargeTable,
    DeletePkBool,
    DeletePkConnectionId,
    DeletePkI128,
    DeletePkI16,
    DeletePkI256,
    DeletePkI32,
    DeletePkI64,
    DeletePkI8,
    DeletePkIdentity,
    DeletePkString,
    DeletePkU128,
    DeletePkU16,
    DeletePkU256,
    DeletePkU32,
    DeletePkU32InsertPkU32Two,
    DeletePkU32Two,
    DeletePkU64,
    DeletePkU8,
    DeleteUniqueBool,
    DeleteUniqueConnectionId,
    DeleteUniqueI128,
    DeleteUniqueI16,
    DeleteUniqueI256,
    DeleteUniqueI32,
    DeleteUniqueI64,
    DeleteUniqueI8,
    DeleteUniqueIdentity,
    DeleteUniqueString,
    DeleteUniqueU128,
    DeleteUniqueU16,
    DeleteUniqueU256,
    DeleteUniqueU32,
    DeleteUniqueU64,
    DeleteUniqueU8,
    InsertCallTimestamp,
    InsertCallerOneConnectionId,
    InsertCallerOneIdentity,
    InsertCallerPkConnectionId,
    InsertCallerPkIdentity,
    InsertCallerUniqueConnectionId,
    InsertCallerUniqueIdentity,
    InsertCallerVecConnectionId,
    InsertCallerVecIdentity,
    InsertIntoBtreeU32,
    InsertIntoIndexedSimpleEnum,
    InsertIntoPkBtreeU32,
    InsertLargeTable,
    InsertOneBool,
    InsertOneByteStruct,
    InsertOneConnectionId,
    InsertOneEnumWithPayload,
    InsertOneEveryPrimitiveStruct,
    InsertOneEveryVecStruct,
    InsertOneF32,
    InsertOneF64,
    InsertOneI128,
    InsertOneI16,
    InsertOneI256,
    InsertOneI32,
    InsertOneI64,
    InsertOneI8,
    InsertOneIdentity,
    InsertOneSimpleEnum,
    InsertOneString,
    InsertOneTimestamp,
    InsertOneU128,
    InsertOneU16,
    InsertOneU256,
    InsertOneU32,
    InsertOneU64,
    InsertOneU8,
    InsertOneUnitStruct,
    InsertOptionEveryPrimitiveStruct,
    InsertOptionI32,
    InsertOptionIdentity,
    InsertOptionSimpleEnum,
    InsertOptionString,
    InsertOptionVecOptionI32,
    InsertPkBool,
    InsertPkConnectionId,
    InsertPkI128,
    InsertPkI16,
    InsertPkI256,
    InsertPkI32,
    InsertPkI64,
    InsertPkI8,
    InsertPkIdentity,
    InsertPkSimpleEnum,
    InsertPkString,
    InsertPkU128,
    InsertPkU16,
    InsertPkU256,
    InsertPkU32,
    InsertPkU32Two,
    InsertPkU64,
    InsertPkU8,
    InsertPrimitivesAsStrings,
    InsertTableHoldsTable,
    InsertUniqueBool,
    InsertUniqueConnectionId,
    InsertUniqueI128,
    InsertUniqueI16,
    InsertUniqueI256,
    InsertUniqueI32,
    InsertUniqueI64,
    InsertUniqueI8,
    InsertUniqueIdentity,
    InsertUniqueString,
    InsertUniqueU128,
    InsertUniqueU16,
    InsertUniqueU256,
    InsertUniqueU32,
    InsertUniqueU32UpdatePkU32,
    InsertUniqueU64,
    InsertUniqueU8,
    InsertUser,
    InsertVecBool,
    InsertVecByteStruct,
    InsertVecConnectionId,
    InsertVecEnumWithPayload,
    InsertVecEveryPrimitiveStruct,
    InsertVecEveryVecStruct,
    InsertVecF32,
    InsertVecF64,
    InsertVecI128,
    InsertVecI16,
    InsertVecI256,
    InsertVecI32,
    InsertVecI64,
    InsertVecI8,
    InsertVecIdentity,
    InsertVecSimpleEnum,
    InsertVecString,
    InsertVecTimestamp,
    InsertVecU128,
    InsertVecU16,
    InsertVecU256,
    InsertVecU32,
    InsertVecU64,
    InsertVecU8,
    InsertVecUnitStruct,
    NoOpSucceeds,
    SendScheduledMessage,
    UpdateIndexedSimpleEnum,
    UpdatePkBool,
    UpdatePkConnectionId,
    UpdatePkI128,
    UpdatePkI16,
    UpdatePkI256,
    UpdatePkI32,
    UpdatePkI64,
    UpdatePkI8,
    UpdatePkIdentity,
    UpdatePkSimpleEnum,
    UpdatePkString,
    UpdatePkU128,
    UpdatePkU16,
    UpdatePkU256,
    UpdatePkU32,
    UpdatePkU32Two,
    UpdatePkU64,
    UpdatePkU8,
    UpdateUniqueBool,
    UpdateUniqueConnectionId,
    UpdateUniqueI128,
    UpdateUniqueI16,
    UpdateUniqueI256,
    UpdateUniqueI32,
    UpdateUniqueI64,
    UpdateUniqueI8,
    UpdateUniqueIdentity,
    UpdateUniqueString,
    UpdateUniqueU128,
    UpdateUniqueU16,
    UpdateUniqueU256,
    UpdateUniqueU32,
    UpdateUniqueU64,
    UpdateUniqueU8
};

USTRUCT(BlueprintType)
struct TESTCLIENT_API FReducer
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
    EReducerTag Tag = static_cast<EReducerTag>(0);

    TVariant<FDeleteFromBtreeU32Args, FDeleteLargeTableArgs, FDeletePkBoolArgs, FDeletePkConnectionIdArgs, FDeletePkI128Args, FDeletePkI16Args, FDeletePkI256Args, FDeletePkI32Args, FDeletePkI64Args, FDeletePkI8Args, FDeletePkIdentityArgs, FDeletePkStringArgs, FDeletePkU128Args, FDeletePkU16Args, FDeletePkU256Args, FDeletePkU32Args, FDeletePkU32InsertPkU32TwoArgs, FDeletePkU32TwoArgs, FDeletePkU64Args, FDeletePkU8Args, FDeleteUniqueBoolArgs, FDeleteUniqueConnectionIdArgs, FDeleteUniqueI128Args, FDeleteUniqueI16Args, FDeleteUniqueI256Args, FDeleteUniqueI32Args, FDeleteUniqueI64Args, FDeleteUniqueI8Args, FDeleteUniqueIdentityArgs, FDeleteUniqueStringArgs, FDeleteUniqueU128Args, FDeleteUniqueU16Args, FDeleteUniqueU256Args, FDeleteUniqueU32Args, FDeleteUniqueU64Args, FDeleteUniqueU8Args, FInsertCallTimestampArgs, FInsertCallerOneConnectionIdArgs, FInsertCallerOneIdentityArgs, FInsertCallerPkConnectionIdArgs, FInsertCallerPkIdentityArgs, FInsertCallerUniqueConnectionIdArgs, FInsertCallerUniqueIdentityArgs, FInsertCallerVecConnectionIdArgs, FInsertCallerVecIdentityArgs, FInsertIntoBtreeU32Args, FInsertIntoIndexedSimpleEnumArgs, FInsertIntoPkBtreeU32Args, FInsertLargeTableArgs, FInsertOneBoolArgs, FInsertOneByteStructArgs, FInsertOneConnectionIdArgs, FInsertOneEnumWithPayloadArgs, FInsertOneEveryPrimitiveStructArgs, FInsertOneEveryVecStructArgs, FInsertOneF32Args, FInsertOneF64Args, FInsertOneI128Args, FInsertOneI16Args, FInsertOneI256Args, FInsertOneI32Args, FInsertOneI64Args, FInsertOneI8Args, FInsertOneIdentityArgs, FInsertOneSimpleEnumArgs, FInsertOneStringArgs, FInsertOneTimestampArgs, FInsertOneU128Args, FInsertOneU16Args, FInsertOneU256Args, FInsertOneU32Args, FInsertOneU64Args, FInsertOneU8Args, FInsertOneUnitStructArgs, FInsertOptionEveryPrimitiveStructArgs, FInsertOptionI32Args, FInsertOptionIdentityArgs, FInsertOptionSimpleEnumArgs, FInsertOptionStringArgs, FInsertOptionVecOptionI32Args, FInsertPkBoolArgs, FInsertPkConnectionIdArgs, FInsertPkI128Args, FInsertPkI16Args, FInsertPkI256Args, FInsertPkI32Args, FInsertPkI64Args, FInsertPkI8Args, FInsertPkIdentityArgs, FInsertPkSimpleEnumArgs, FInsertPkStringArgs, FInsertPkU128Args, FInsertPkU16Args, FInsertPkU256Args, FInsertPkU32Args, FInsertPkU32TwoArgs, FInsertPkU64Args, FInsertPkU8Args, FInsertPrimitivesAsStringsArgs, FInsertTableHoldsTableArgs, FInsertUniqueBoolArgs, FInsertUniqueConnectionIdArgs, FInsertUniqueI128Args, FInsertUniqueI16Args, FInsertUniqueI256Args, FInsertUniqueI32Args, FInsertUniqueI64Args, FInsertUniqueI8Args, FInsertUniqueIdentityArgs, FInsertUniqueStringArgs, FInsertUniqueU128Args, FInsertUniqueU16Args, FInsertUniqueU256Args, FInsertUniqueU32Args, FInsertUniqueU32UpdatePkU32Args, FInsertUniqueU64Args, FInsertUniqueU8Args, FInsertUserArgs, FInsertVecBoolArgs, FInsertVecByteStructArgs, FInsertVecConnectionIdArgs, FInsertVecEnumWithPayloadArgs, FInsertVecEveryPrimitiveStructArgs, FInsertVecEveryVecStructArgs, FInsertVecF32Args, FInsertVecF64Args, FInsertVecI128Args, FInsertVecI16Args, FInsertVecI256Args, FInsertVecI32Args, FInsertVecI64Args, FInsertVecI8Args, FInsertVecIdentityArgs, FInsertVecSimpleEnumArgs, FInsertVecStringArgs, FInsertVecTimestampArgs, FInsertVecU128Args, FInsertVecU16Args, FInsertVecU256Args, FInsertVecU32Args, FInsertVecU64Args, FInsertVecU8Args, FInsertVecUnitStructArgs, FNoOpSucceedsArgs, FSendScheduledMessageArgs, FUpdateIndexedSimpleEnumArgs, FUpdatePkBoolArgs, FUpdatePkConnectionIdArgs, FUpdatePkI128Args, FUpdatePkI16Args, FUpdatePkI256Args, FUpdatePkI32Args, FUpdatePkI64Args, FUpdatePkI8Args, FUpdatePkIdentityArgs, FUpdatePkSimpleEnumArgs, FUpdatePkStringArgs, FUpdatePkU128Args, FUpdatePkU16Args, FUpdatePkU256Args, FUpdatePkU32Args, FUpdatePkU32TwoArgs, FUpdatePkU64Args, FUpdatePkU8Args, FUpdateUniqueBoolArgs, FUpdateUniqueConnectionIdArgs, FUpdateUniqueI128Args, FUpdateUniqueI16Args, FUpdateUniqueI256Args, FUpdateUniqueI32Args, FUpdateUniqueI64Args, FUpdateUniqueI8Args, FUpdateUniqueIdentityArgs, FUpdateUniqueStringArgs, FUpdateUniqueU128Args, FUpdateUniqueU16Args, FUpdateUniqueU256Args, FUpdateUniqueU32Args, FUpdateUniqueU64Args, FUpdateUniqueU8Args> Data;

    // Optional metadata
    UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
    FString ReducerName;
    uint32 ReducerId = 0;
    uint32 RequestId = 0;

    static FReducer DeleteFromBtreeU32(const FDeleteFromBtreeU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteFromBtreeU32;
        Out.Data.Set<FDeleteFromBtreeU32Args>(Value);
        Out.ReducerName = TEXT("delete_from_btree_u32");
        return Out;
    }

    FORCEINLINE bool IsDeleteFromBtreeU32() const { return Tag == EReducerTag::DeleteFromBtreeU32; }
    FORCEINLINE FDeleteFromBtreeU32Args GetAsDeleteFromBtreeU32() const
    {
        ensureMsgf(IsDeleteFromBtreeU32(), TEXT("Reducer does not hold DeleteFromBtreeU32!"));
        return Data.Get<FDeleteFromBtreeU32Args>();
    }

    static FReducer DeleteLargeTable(const FDeleteLargeTableArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteLargeTable;
        Out.Data.Set<FDeleteLargeTableArgs>(Value);
        Out.ReducerName = TEXT("delete_large_table");
        return Out;
    }

    FORCEINLINE bool IsDeleteLargeTable() const { return Tag == EReducerTag::DeleteLargeTable; }
    FORCEINLINE FDeleteLargeTableArgs GetAsDeleteLargeTable() const
    {
        ensureMsgf(IsDeleteLargeTable(), TEXT("Reducer does not hold DeleteLargeTable!"));
        return Data.Get<FDeleteLargeTableArgs>();
    }

    static FReducer DeletePkBool(const FDeletePkBoolArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkBool;
        Out.Data.Set<FDeletePkBoolArgs>(Value);
        Out.ReducerName = TEXT("delete_pk_bool");
        return Out;
    }

    FORCEINLINE bool IsDeletePkBool() const { return Tag == EReducerTag::DeletePkBool; }
    FORCEINLINE FDeletePkBoolArgs GetAsDeletePkBool() const
    {
        ensureMsgf(IsDeletePkBool(), TEXT("Reducer does not hold DeletePkBool!"));
        return Data.Get<FDeletePkBoolArgs>();
    }

    static FReducer DeletePkConnectionId(const FDeletePkConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkConnectionId;
        Out.Data.Set<FDeletePkConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("delete_pk_connection_id");
        return Out;
    }

    FORCEINLINE bool IsDeletePkConnectionId() const { return Tag == EReducerTag::DeletePkConnectionId; }
    FORCEINLINE FDeletePkConnectionIdArgs GetAsDeletePkConnectionId() const
    {
        ensureMsgf(IsDeletePkConnectionId(), TEXT("Reducer does not hold DeletePkConnectionId!"));
        return Data.Get<FDeletePkConnectionIdArgs>();
    }

    static FReducer DeletePkI128(const FDeletePkI128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkI128;
        Out.Data.Set<FDeletePkI128Args>(Value);
        Out.ReducerName = TEXT("delete_pk_i128");
        return Out;
    }

    FORCEINLINE bool IsDeletePkI128() const { return Tag == EReducerTag::DeletePkI128; }
    FORCEINLINE FDeletePkI128Args GetAsDeletePkI128() const
    {
        ensureMsgf(IsDeletePkI128(), TEXT("Reducer does not hold DeletePkI128!"));
        return Data.Get<FDeletePkI128Args>();
    }

    static FReducer DeletePkI16(const FDeletePkI16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkI16;
        Out.Data.Set<FDeletePkI16Args>(Value);
        Out.ReducerName = TEXT("delete_pk_i16");
        return Out;
    }

    FORCEINLINE bool IsDeletePkI16() const { return Tag == EReducerTag::DeletePkI16; }
    FORCEINLINE FDeletePkI16Args GetAsDeletePkI16() const
    {
        ensureMsgf(IsDeletePkI16(), TEXT("Reducer does not hold DeletePkI16!"));
        return Data.Get<FDeletePkI16Args>();
    }

    static FReducer DeletePkI256(const FDeletePkI256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkI256;
        Out.Data.Set<FDeletePkI256Args>(Value);
        Out.ReducerName = TEXT("delete_pk_i256");
        return Out;
    }

    FORCEINLINE bool IsDeletePkI256() const { return Tag == EReducerTag::DeletePkI256; }
    FORCEINLINE FDeletePkI256Args GetAsDeletePkI256() const
    {
        ensureMsgf(IsDeletePkI256(), TEXT("Reducer does not hold DeletePkI256!"));
        return Data.Get<FDeletePkI256Args>();
    }

    static FReducer DeletePkI32(const FDeletePkI32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkI32;
        Out.Data.Set<FDeletePkI32Args>(Value);
        Out.ReducerName = TEXT("delete_pk_i32");
        return Out;
    }

    FORCEINLINE bool IsDeletePkI32() const { return Tag == EReducerTag::DeletePkI32; }
    FORCEINLINE FDeletePkI32Args GetAsDeletePkI32() const
    {
        ensureMsgf(IsDeletePkI32(), TEXT("Reducer does not hold DeletePkI32!"));
        return Data.Get<FDeletePkI32Args>();
    }

    static FReducer DeletePkI64(const FDeletePkI64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkI64;
        Out.Data.Set<FDeletePkI64Args>(Value);
        Out.ReducerName = TEXT("delete_pk_i64");
        return Out;
    }

    FORCEINLINE bool IsDeletePkI64() const { return Tag == EReducerTag::DeletePkI64; }
    FORCEINLINE FDeletePkI64Args GetAsDeletePkI64() const
    {
        ensureMsgf(IsDeletePkI64(), TEXT("Reducer does not hold DeletePkI64!"));
        return Data.Get<FDeletePkI64Args>();
    }

    static FReducer DeletePkI8(const FDeletePkI8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkI8;
        Out.Data.Set<FDeletePkI8Args>(Value);
        Out.ReducerName = TEXT("delete_pk_i8");
        return Out;
    }

    FORCEINLINE bool IsDeletePkI8() const { return Tag == EReducerTag::DeletePkI8; }
    FORCEINLINE FDeletePkI8Args GetAsDeletePkI8() const
    {
        ensureMsgf(IsDeletePkI8(), TEXT("Reducer does not hold DeletePkI8!"));
        return Data.Get<FDeletePkI8Args>();
    }

    static FReducer DeletePkIdentity(const FDeletePkIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkIdentity;
        Out.Data.Set<FDeletePkIdentityArgs>(Value);
        Out.ReducerName = TEXT("delete_pk_identity");
        return Out;
    }

    FORCEINLINE bool IsDeletePkIdentity() const { return Tag == EReducerTag::DeletePkIdentity; }
    FORCEINLINE FDeletePkIdentityArgs GetAsDeletePkIdentity() const
    {
        ensureMsgf(IsDeletePkIdentity(), TEXT("Reducer does not hold DeletePkIdentity!"));
        return Data.Get<FDeletePkIdentityArgs>();
    }

    static FReducer DeletePkString(const FDeletePkStringArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkString;
        Out.Data.Set<FDeletePkStringArgs>(Value);
        Out.ReducerName = TEXT("delete_pk_string");
        return Out;
    }

    FORCEINLINE bool IsDeletePkString() const { return Tag == EReducerTag::DeletePkString; }
    FORCEINLINE FDeletePkStringArgs GetAsDeletePkString() const
    {
        ensureMsgf(IsDeletePkString(), TEXT("Reducer does not hold DeletePkString!"));
        return Data.Get<FDeletePkStringArgs>();
    }

    static FReducer DeletePkU128(const FDeletePkU128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkU128;
        Out.Data.Set<FDeletePkU128Args>(Value);
        Out.ReducerName = TEXT("delete_pk_u128");
        return Out;
    }

    FORCEINLINE bool IsDeletePkU128() const { return Tag == EReducerTag::DeletePkU128; }
    FORCEINLINE FDeletePkU128Args GetAsDeletePkU128() const
    {
        ensureMsgf(IsDeletePkU128(), TEXT("Reducer does not hold DeletePkU128!"));
        return Data.Get<FDeletePkU128Args>();
    }

    static FReducer DeletePkU16(const FDeletePkU16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkU16;
        Out.Data.Set<FDeletePkU16Args>(Value);
        Out.ReducerName = TEXT("delete_pk_u16");
        return Out;
    }

    FORCEINLINE bool IsDeletePkU16() const { return Tag == EReducerTag::DeletePkU16; }
    FORCEINLINE FDeletePkU16Args GetAsDeletePkU16() const
    {
        ensureMsgf(IsDeletePkU16(), TEXT("Reducer does not hold DeletePkU16!"));
        return Data.Get<FDeletePkU16Args>();
    }

    static FReducer DeletePkU256(const FDeletePkU256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkU256;
        Out.Data.Set<FDeletePkU256Args>(Value);
        Out.ReducerName = TEXT("delete_pk_u256");
        return Out;
    }

    FORCEINLINE bool IsDeletePkU256() const { return Tag == EReducerTag::DeletePkU256; }
    FORCEINLINE FDeletePkU256Args GetAsDeletePkU256() const
    {
        ensureMsgf(IsDeletePkU256(), TEXT("Reducer does not hold DeletePkU256!"));
        return Data.Get<FDeletePkU256Args>();
    }

    static FReducer DeletePkU32(const FDeletePkU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkU32;
        Out.Data.Set<FDeletePkU32Args>(Value);
        Out.ReducerName = TEXT("delete_pk_u32");
        return Out;
    }

    FORCEINLINE bool IsDeletePkU32() const { return Tag == EReducerTag::DeletePkU32; }
    FORCEINLINE FDeletePkU32Args GetAsDeletePkU32() const
    {
        ensureMsgf(IsDeletePkU32(), TEXT("Reducer does not hold DeletePkU32!"));
        return Data.Get<FDeletePkU32Args>();
    }

    static FReducer DeletePkU32InsertPkU32Two(const FDeletePkU32InsertPkU32TwoArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkU32InsertPkU32Two;
        Out.Data.Set<FDeletePkU32InsertPkU32TwoArgs>(Value);
        Out.ReducerName = TEXT("delete_pk_u32_insert_pk_u32_two");
        return Out;
    }

    FORCEINLINE bool IsDeletePkU32InsertPkU32Two() const { return Tag == EReducerTag::DeletePkU32InsertPkU32Two; }
    FORCEINLINE FDeletePkU32InsertPkU32TwoArgs GetAsDeletePkU32InsertPkU32Two() const
    {
        ensureMsgf(IsDeletePkU32InsertPkU32Two(), TEXT("Reducer does not hold DeletePkU32InsertPkU32Two!"));
        return Data.Get<FDeletePkU32InsertPkU32TwoArgs>();
    }

    static FReducer DeletePkU32Two(const FDeletePkU32TwoArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkU32Two;
        Out.Data.Set<FDeletePkU32TwoArgs>(Value);
        Out.ReducerName = TEXT("delete_pk_u32_two");
        return Out;
    }

    FORCEINLINE bool IsDeletePkU32Two() const { return Tag == EReducerTag::DeletePkU32Two; }
    FORCEINLINE FDeletePkU32TwoArgs GetAsDeletePkU32Two() const
    {
        ensureMsgf(IsDeletePkU32Two(), TEXT("Reducer does not hold DeletePkU32Two!"));
        return Data.Get<FDeletePkU32TwoArgs>();
    }

    static FReducer DeletePkU64(const FDeletePkU64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkU64;
        Out.Data.Set<FDeletePkU64Args>(Value);
        Out.ReducerName = TEXT("delete_pk_u64");
        return Out;
    }

    FORCEINLINE bool IsDeletePkU64() const { return Tag == EReducerTag::DeletePkU64; }
    FORCEINLINE FDeletePkU64Args GetAsDeletePkU64() const
    {
        ensureMsgf(IsDeletePkU64(), TEXT("Reducer does not hold DeletePkU64!"));
        return Data.Get<FDeletePkU64Args>();
    }

    static FReducer DeletePkU8(const FDeletePkU8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeletePkU8;
        Out.Data.Set<FDeletePkU8Args>(Value);
        Out.ReducerName = TEXT("delete_pk_u8");
        return Out;
    }

    FORCEINLINE bool IsDeletePkU8() const { return Tag == EReducerTag::DeletePkU8; }
    FORCEINLINE FDeletePkU8Args GetAsDeletePkU8() const
    {
        ensureMsgf(IsDeletePkU8(), TEXT("Reducer does not hold DeletePkU8!"));
        return Data.Get<FDeletePkU8Args>();
    }

    static FReducer DeleteUniqueBool(const FDeleteUniqueBoolArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueBool;
        Out.Data.Set<FDeleteUniqueBoolArgs>(Value);
        Out.ReducerName = TEXT("delete_unique_bool");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueBool() const { return Tag == EReducerTag::DeleteUniqueBool; }
    FORCEINLINE FDeleteUniqueBoolArgs GetAsDeleteUniqueBool() const
    {
        ensureMsgf(IsDeleteUniqueBool(), TEXT("Reducer does not hold DeleteUniqueBool!"));
        return Data.Get<FDeleteUniqueBoolArgs>();
    }

    static FReducer DeleteUniqueConnectionId(const FDeleteUniqueConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueConnectionId;
        Out.Data.Set<FDeleteUniqueConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("delete_unique_connection_id");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueConnectionId() const { return Tag == EReducerTag::DeleteUniqueConnectionId; }
    FORCEINLINE FDeleteUniqueConnectionIdArgs GetAsDeleteUniqueConnectionId() const
    {
        ensureMsgf(IsDeleteUniqueConnectionId(), TEXT("Reducer does not hold DeleteUniqueConnectionId!"));
        return Data.Get<FDeleteUniqueConnectionIdArgs>();
    }

    static FReducer DeleteUniqueI128(const FDeleteUniqueI128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueI128;
        Out.Data.Set<FDeleteUniqueI128Args>(Value);
        Out.ReducerName = TEXT("delete_unique_i128");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueI128() const { return Tag == EReducerTag::DeleteUniqueI128; }
    FORCEINLINE FDeleteUniqueI128Args GetAsDeleteUniqueI128() const
    {
        ensureMsgf(IsDeleteUniqueI128(), TEXT("Reducer does not hold DeleteUniqueI128!"));
        return Data.Get<FDeleteUniqueI128Args>();
    }

    static FReducer DeleteUniqueI16(const FDeleteUniqueI16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueI16;
        Out.Data.Set<FDeleteUniqueI16Args>(Value);
        Out.ReducerName = TEXT("delete_unique_i16");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueI16() const { return Tag == EReducerTag::DeleteUniqueI16; }
    FORCEINLINE FDeleteUniqueI16Args GetAsDeleteUniqueI16() const
    {
        ensureMsgf(IsDeleteUniqueI16(), TEXT("Reducer does not hold DeleteUniqueI16!"));
        return Data.Get<FDeleteUniqueI16Args>();
    }

    static FReducer DeleteUniqueI256(const FDeleteUniqueI256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueI256;
        Out.Data.Set<FDeleteUniqueI256Args>(Value);
        Out.ReducerName = TEXT("delete_unique_i256");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueI256() const { return Tag == EReducerTag::DeleteUniqueI256; }
    FORCEINLINE FDeleteUniqueI256Args GetAsDeleteUniqueI256() const
    {
        ensureMsgf(IsDeleteUniqueI256(), TEXT("Reducer does not hold DeleteUniqueI256!"));
        return Data.Get<FDeleteUniqueI256Args>();
    }

    static FReducer DeleteUniqueI32(const FDeleteUniqueI32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueI32;
        Out.Data.Set<FDeleteUniqueI32Args>(Value);
        Out.ReducerName = TEXT("delete_unique_i32");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueI32() const { return Tag == EReducerTag::DeleteUniqueI32; }
    FORCEINLINE FDeleteUniqueI32Args GetAsDeleteUniqueI32() const
    {
        ensureMsgf(IsDeleteUniqueI32(), TEXT("Reducer does not hold DeleteUniqueI32!"));
        return Data.Get<FDeleteUniqueI32Args>();
    }

    static FReducer DeleteUniqueI64(const FDeleteUniqueI64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueI64;
        Out.Data.Set<FDeleteUniqueI64Args>(Value);
        Out.ReducerName = TEXT("delete_unique_i64");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueI64() const { return Tag == EReducerTag::DeleteUniqueI64; }
    FORCEINLINE FDeleteUniqueI64Args GetAsDeleteUniqueI64() const
    {
        ensureMsgf(IsDeleteUniqueI64(), TEXT("Reducer does not hold DeleteUniqueI64!"));
        return Data.Get<FDeleteUniqueI64Args>();
    }

    static FReducer DeleteUniqueI8(const FDeleteUniqueI8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueI8;
        Out.Data.Set<FDeleteUniqueI8Args>(Value);
        Out.ReducerName = TEXT("delete_unique_i8");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueI8() const { return Tag == EReducerTag::DeleteUniqueI8; }
    FORCEINLINE FDeleteUniqueI8Args GetAsDeleteUniqueI8() const
    {
        ensureMsgf(IsDeleteUniqueI8(), TEXT("Reducer does not hold DeleteUniqueI8!"));
        return Data.Get<FDeleteUniqueI8Args>();
    }

    static FReducer DeleteUniqueIdentity(const FDeleteUniqueIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueIdentity;
        Out.Data.Set<FDeleteUniqueIdentityArgs>(Value);
        Out.ReducerName = TEXT("delete_unique_identity");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueIdentity() const { return Tag == EReducerTag::DeleteUniqueIdentity; }
    FORCEINLINE FDeleteUniqueIdentityArgs GetAsDeleteUniqueIdentity() const
    {
        ensureMsgf(IsDeleteUniqueIdentity(), TEXT("Reducer does not hold DeleteUniqueIdentity!"));
        return Data.Get<FDeleteUniqueIdentityArgs>();
    }

    static FReducer DeleteUniqueString(const FDeleteUniqueStringArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueString;
        Out.Data.Set<FDeleteUniqueStringArgs>(Value);
        Out.ReducerName = TEXT("delete_unique_string");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueString() const { return Tag == EReducerTag::DeleteUniqueString; }
    FORCEINLINE FDeleteUniqueStringArgs GetAsDeleteUniqueString() const
    {
        ensureMsgf(IsDeleteUniqueString(), TEXT("Reducer does not hold DeleteUniqueString!"));
        return Data.Get<FDeleteUniqueStringArgs>();
    }

    static FReducer DeleteUniqueU128(const FDeleteUniqueU128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueU128;
        Out.Data.Set<FDeleteUniqueU128Args>(Value);
        Out.ReducerName = TEXT("delete_unique_u128");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueU128() const { return Tag == EReducerTag::DeleteUniqueU128; }
    FORCEINLINE FDeleteUniqueU128Args GetAsDeleteUniqueU128() const
    {
        ensureMsgf(IsDeleteUniqueU128(), TEXT("Reducer does not hold DeleteUniqueU128!"));
        return Data.Get<FDeleteUniqueU128Args>();
    }

    static FReducer DeleteUniqueU16(const FDeleteUniqueU16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueU16;
        Out.Data.Set<FDeleteUniqueU16Args>(Value);
        Out.ReducerName = TEXT("delete_unique_u16");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueU16() const { return Tag == EReducerTag::DeleteUniqueU16; }
    FORCEINLINE FDeleteUniqueU16Args GetAsDeleteUniqueU16() const
    {
        ensureMsgf(IsDeleteUniqueU16(), TEXT("Reducer does not hold DeleteUniqueU16!"));
        return Data.Get<FDeleteUniqueU16Args>();
    }

    static FReducer DeleteUniqueU256(const FDeleteUniqueU256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueU256;
        Out.Data.Set<FDeleteUniqueU256Args>(Value);
        Out.ReducerName = TEXT("delete_unique_u256");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueU256() const { return Tag == EReducerTag::DeleteUniqueU256; }
    FORCEINLINE FDeleteUniqueU256Args GetAsDeleteUniqueU256() const
    {
        ensureMsgf(IsDeleteUniqueU256(), TEXT("Reducer does not hold DeleteUniqueU256!"));
        return Data.Get<FDeleteUniqueU256Args>();
    }

    static FReducer DeleteUniqueU32(const FDeleteUniqueU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueU32;
        Out.Data.Set<FDeleteUniqueU32Args>(Value);
        Out.ReducerName = TEXT("delete_unique_u32");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueU32() const { return Tag == EReducerTag::DeleteUniqueU32; }
    FORCEINLINE FDeleteUniqueU32Args GetAsDeleteUniqueU32() const
    {
        ensureMsgf(IsDeleteUniqueU32(), TEXT("Reducer does not hold DeleteUniqueU32!"));
        return Data.Get<FDeleteUniqueU32Args>();
    }

    static FReducer DeleteUniqueU64(const FDeleteUniqueU64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueU64;
        Out.Data.Set<FDeleteUniqueU64Args>(Value);
        Out.ReducerName = TEXT("delete_unique_u64");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueU64() const { return Tag == EReducerTag::DeleteUniqueU64; }
    FORCEINLINE FDeleteUniqueU64Args GetAsDeleteUniqueU64() const
    {
        ensureMsgf(IsDeleteUniqueU64(), TEXT("Reducer does not hold DeleteUniqueU64!"));
        return Data.Get<FDeleteUniqueU64Args>();
    }

    static FReducer DeleteUniqueU8(const FDeleteUniqueU8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::DeleteUniqueU8;
        Out.Data.Set<FDeleteUniqueU8Args>(Value);
        Out.ReducerName = TEXT("delete_unique_u8");
        return Out;
    }

    FORCEINLINE bool IsDeleteUniqueU8() const { return Tag == EReducerTag::DeleteUniqueU8; }
    FORCEINLINE FDeleteUniqueU8Args GetAsDeleteUniqueU8() const
    {
        ensureMsgf(IsDeleteUniqueU8(), TEXT("Reducer does not hold DeleteUniqueU8!"));
        return Data.Get<FDeleteUniqueU8Args>();
    }

    static FReducer InsertCallTimestamp(const FInsertCallTimestampArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertCallTimestamp;
        Out.Data.Set<FInsertCallTimestampArgs>(Value);
        Out.ReducerName = TEXT("insert_call_timestamp");
        return Out;
    }

    FORCEINLINE bool IsInsertCallTimestamp() const { return Tag == EReducerTag::InsertCallTimestamp; }
    FORCEINLINE FInsertCallTimestampArgs GetAsInsertCallTimestamp() const
    {
        ensureMsgf(IsInsertCallTimestamp(), TEXT("Reducer does not hold InsertCallTimestamp!"));
        return Data.Get<FInsertCallTimestampArgs>();
    }

    static FReducer InsertCallerOneConnectionId(const FInsertCallerOneConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertCallerOneConnectionId;
        Out.Data.Set<FInsertCallerOneConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("insert_caller_one_connection_id");
        return Out;
    }

    FORCEINLINE bool IsInsertCallerOneConnectionId() const { return Tag == EReducerTag::InsertCallerOneConnectionId; }
    FORCEINLINE FInsertCallerOneConnectionIdArgs GetAsInsertCallerOneConnectionId() const
    {
        ensureMsgf(IsInsertCallerOneConnectionId(), TEXT("Reducer does not hold InsertCallerOneConnectionId!"));
        return Data.Get<FInsertCallerOneConnectionIdArgs>();
    }

    static FReducer InsertCallerOneIdentity(const FInsertCallerOneIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertCallerOneIdentity;
        Out.Data.Set<FInsertCallerOneIdentityArgs>(Value);
        Out.ReducerName = TEXT("insert_caller_one_identity");
        return Out;
    }

    FORCEINLINE bool IsInsertCallerOneIdentity() const { return Tag == EReducerTag::InsertCallerOneIdentity; }
    FORCEINLINE FInsertCallerOneIdentityArgs GetAsInsertCallerOneIdentity() const
    {
        ensureMsgf(IsInsertCallerOneIdentity(), TEXT("Reducer does not hold InsertCallerOneIdentity!"));
        return Data.Get<FInsertCallerOneIdentityArgs>();
    }

    static FReducer InsertCallerPkConnectionId(const FInsertCallerPkConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertCallerPkConnectionId;
        Out.Data.Set<FInsertCallerPkConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("insert_caller_pk_connection_id");
        return Out;
    }

    FORCEINLINE bool IsInsertCallerPkConnectionId() const { return Tag == EReducerTag::InsertCallerPkConnectionId; }
    FORCEINLINE FInsertCallerPkConnectionIdArgs GetAsInsertCallerPkConnectionId() const
    {
        ensureMsgf(IsInsertCallerPkConnectionId(), TEXT("Reducer does not hold InsertCallerPkConnectionId!"));
        return Data.Get<FInsertCallerPkConnectionIdArgs>();
    }

    static FReducer InsertCallerPkIdentity(const FInsertCallerPkIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertCallerPkIdentity;
        Out.Data.Set<FInsertCallerPkIdentityArgs>(Value);
        Out.ReducerName = TEXT("insert_caller_pk_identity");
        return Out;
    }

    FORCEINLINE bool IsInsertCallerPkIdentity() const { return Tag == EReducerTag::InsertCallerPkIdentity; }
    FORCEINLINE FInsertCallerPkIdentityArgs GetAsInsertCallerPkIdentity() const
    {
        ensureMsgf(IsInsertCallerPkIdentity(), TEXT("Reducer does not hold InsertCallerPkIdentity!"));
        return Data.Get<FInsertCallerPkIdentityArgs>();
    }

    static FReducer InsertCallerUniqueConnectionId(const FInsertCallerUniqueConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertCallerUniqueConnectionId;
        Out.Data.Set<FInsertCallerUniqueConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("insert_caller_unique_connection_id");
        return Out;
    }

    FORCEINLINE bool IsInsertCallerUniqueConnectionId() const { return Tag == EReducerTag::InsertCallerUniqueConnectionId; }
    FORCEINLINE FInsertCallerUniqueConnectionIdArgs GetAsInsertCallerUniqueConnectionId() const
    {
        ensureMsgf(IsInsertCallerUniqueConnectionId(), TEXT("Reducer does not hold InsertCallerUniqueConnectionId!"));
        return Data.Get<FInsertCallerUniqueConnectionIdArgs>();
    }

    static FReducer InsertCallerUniqueIdentity(const FInsertCallerUniqueIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertCallerUniqueIdentity;
        Out.Data.Set<FInsertCallerUniqueIdentityArgs>(Value);
        Out.ReducerName = TEXT("insert_caller_unique_identity");
        return Out;
    }

    FORCEINLINE bool IsInsertCallerUniqueIdentity() const { return Tag == EReducerTag::InsertCallerUniqueIdentity; }
    FORCEINLINE FInsertCallerUniqueIdentityArgs GetAsInsertCallerUniqueIdentity() const
    {
        ensureMsgf(IsInsertCallerUniqueIdentity(), TEXT("Reducer does not hold InsertCallerUniqueIdentity!"));
        return Data.Get<FInsertCallerUniqueIdentityArgs>();
    }

    static FReducer InsertCallerVecConnectionId(const FInsertCallerVecConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertCallerVecConnectionId;
        Out.Data.Set<FInsertCallerVecConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("insert_caller_vec_connection_id");
        return Out;
    }

    FORCEINLINE bool IsInsertCallerVecConnectionId() const { return Tag == EReducerTag::InsertCallerVecConnectionId; }
    FORCEINLINE FInsertCallerVecConnectionIdArgs GetAsInsertCallerVecConnectionId() const
    {
        ensureMsgf(IsInsertCallerVecConnectionId(), TEXT("Reducer does not hold InsertCallerVecConnectionId!"));
        return Data.Get<FInsertCallerVecConnectionIdArgs>();
    }

    static FReducer InsertCallerVecIdentity(const FInsertCallerVecIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertCallerVecIdentity;
        Out.Data.Set<FInsertCallerVecIdentityArgs>(Value);
        Out.ReducerName = TEXT("insert_caller_vec_identity");
        return Out;
    }

    FORCEINLINE bool IsInsertCallerVecIdentity() const { return Tag == EReducerTag::InsertCallerVecIdentity; }
    FORCEINLINE FInsertCallerVecIdentityArgs GetAsInsertCallerVecIdentity() const
    {
        ensureMsgf(IsInsertCallerVecIdentity(), TEXT("Reducer does not hold InsertCallerVecIdentity!"));
        return Data.Get<FInsertCallerVecIdentityArgs>();
    }

    static FReducer InsertIntoBtreeU32(const FInsertIntoBtreeU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertIntoBtreeU32;
        Out.Data.Set<FInsertIntoBtreeU32Args>(Value);
        Out.ReducerName = TEXT("insert_into_btree_u32");
        return Out;
    }

    FORCEINLINE bool IsInsertIntoBtreeU32() const { return Tag == EReducerTag::InsertIntoBtreeU32; }
    FORCEINLINE FInsertIntoBtreeU32Args GetAsInsertIntoBtreeU32() const
    {
        ensureMsgf(IsInsertIntoBtreeU32(), TEXT("Reducer does not hold InsertIntoBtreeU32!"));
        return Data.Get<FInsertIntoBtreeU32Args>();
    }

    static FReducer InsertIntoIndexedSimpleEnum(const FInsertIntoIndexedSimpleEnumArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertIntoIndexedSimpleEnum;
        Out.Data.Set<FInsertIntoIndexedSimpleEnumArgs>(Value);
        Out.ReducerName = TEXT("insert_into_indexed_simple_enum");
        return Out;
    }

    FORCEINLINE bool IsInsertIntoIndexedSimpleEnum() const { return Tag == EReducerTag::InsertIntoIndexedSimpleEnum; }
    FORCEINLINE FInsertIntoIndexedSimpleEnumArgs GetAsInsertIntoIndexedSimpleEnum() const
    {
        ensureMsgf(IsInsertIntoIndexedSimpleEnum(), TEXT("Reducer does not hold InsertIntoIndexedSimpleEnum!"));
        return Data.Get<FInsertIntoIndexedSimpleEnumArgs>();
    }

    static FReducer InsertIntoPkBtreeU32(const FInsertIntoPkBtreeU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertIntoPkBtreeU32;
        Out.Data.Set<FInsertIntoPkBtreeU32Args>(Value);
        Out.ReducerName = TEXT("insert_into_pk_btree_u32");
        return Out;
    }

    FORCEINLINE bool IsInsertIntoPkBtreeU32() const { return Tag == EReducerTag::InsertIntoPkBtreeU32; }
    FORCEINLINE FInsertIntoPkBtreeU32Args GetAsInsertIntoPkBtreeU32() const
    {
        ensureMsgf(IsInsertIntoPkBtreeU32(), TEXT("Reducer does not hold InsertIntoPkBtreeU32!"));
        return Data.Get<FInsertIntoPkBtreeU32Args>();
    }

    static FReducer InsertLargeTable(const FInsertLargeTableArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertLargeTable;
        Out.Data.Set<FInsertLargeTableArgs>(Value);
        Out.ReducerName = TEXT("insert_large_table");
        return Out;
    }

    FORCEINLINE bool IsInsertLargeTable() const { return Tag == EReducerTag::InsertLargeTable; }
    FORCEINLINE FInsertLargeTableArgs GetAsInsertLargeTable() const
    {
        ensureMsgf(IsInsertLargeTable(), TEXT("Reducer does not hold InsertLargeTable!"));
        return Data.Get<FInsertLargeTableArgs>();
    }

    static FReducer InsertOneBool(const FInsertOneBoolArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneBool;
        Out.Data.Set<FInsertOneBoolArgs>(Value);
        Out.ReducerName = TEXT("insert_one_bool");
        return Out;
    }

    FORCEINLINE bool IsInsertOneBool() const { return Tag == EReducerTag::InsertOneBool; }
    FORCEINLINE FInsertOneBoolArgs GetAsInsertOneBool() const
    {
        ensureMsgf(IsInsertOneBool(), TEXT("Reducer does not hold InsertOneBool!"));
        return Data.Get<FInsertOneBoolArgs>();
    }

    static FReducer InsertOneByteStruct(const FInsertOneByteStructArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneByteStruct;
        Out.Data.Set<FInsertOneByteStructArgs>(Value);
        Out.ReducerName = TEXT("insert_one_byte_struct");
        return Out;
    }

    FORCEINLINE bool IsInsertOneByteStruct() const { return Tag == EReducerTag::InsertOneByteStruct; }
    FORCEINLINE FInsertOneByteStructArgs GetAsInsertOneByteStruct() const
    {
        ensureMsgf(IsInsertOneByteStruct(), TEXT("Reducer does not hold InsertOneByteStruct!"));
        return Data.Get<FInsertOneByteStructArgs>();
    }

    static FReducer InsertOneConnectionId(const FInsertOneConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneConnectionId;
        Out.Data.Set<FInsertOneConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("insert_one_connection_id");
        return Out;
    }

    FORCEINLINE bool IsInsertOneConnectionId() const { return Tag == EReducerTag::InsertOneConnectionId; }
    FORCEINLINE FInsertOneConnectionIdArgs GetAsInsertOneConnectionId() const
    {
        ensureMsgf(IsInsertOneConnectionId(), TEXT("Reducer does not hold InsertOneConnectionId!"));
        return Data.Get<FInsertOneConnectionIdArgs>();
    }

    static FReducer InsertOneEnumWithPayload(const FInsertOneEnumWithPayloadArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneEnumWithPayload;
        Out.Data.Set<FInsertOneEnumWithPayloadArgs>(Value);
        Out.ReducerName = TEXT("insert_one_enum_with_payload");
        return Out;
    }

    FORCEINLINE bool IsInsertOneEnumWithPayload() const { return Tag == EReducerTag::InsertOneEnumWithPayload; }
    FORCEINLINE FInsertOneEnumWithPayloadArgs GetAsInsertOneEnumWithPayload() const
    {
        ensureMsgf(IsInsertOneEnumWithPayload(), TEXT("Reducer does not hold InsertOneEnumWithPayload!"));
        return Data.Get<FInsertOneEnumWithPayloadArgs>();
    }

    static FReducer InsertOneEveryPrimitiveStruct(const FInsertOneEveryPrimitiveStructArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneEveryPrimitiveStruct;
        Out.Data.Set<FInsertOneEveryPrimitiveStructArgs>(Value);
        Out.ReducerName = TEXT("insert_one_every_primitive_struct");
        return Out;
    }

    FORCEINLINE bool IsInsertOneEveryPrimitiveStruct() const { return Tag == EReducerTag::InsertOneEveryPrimitiveStruct; }
    FORCEINLINE FInsertOneEveryPrimitiveStructArgs GetAsInsertOneEveryPrimitiveStruct() const
    {
        ensureMsgf(IsInsertOneEveryPrimitiveStruct(), TEXT("Reducer does not hold InsertOneEveryPrimitiveStruct!"));
        return Data.Get<FInsertOneEveryPrimitiveStructArgs>();
    }

    static FReducer InsertOneEveryVecStruct(const FInsertOneEveryVecStructArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneEveryVecStruct;
        Out.Data.Set<FInsertOneEveryVecStructArgs>(Value);
        Out.ReducerName = TEXT("insert_one_every_vec_struct");
        return Out;
    }

    FORCEINLINE bool IsInsertOneEveryVecStruct() const { return Tag == EReducerTag::InsertOneEveryVecStruct; }
    FORCEINLINE FInsertOneEveryVecStructArgs GetAsInsertOneEveryVecStruct() const
    {
        ensureMsgf(IsInsertOneEveryVecStruct(), TEXT("Reducer does not hold InsertOneEveryVecStruct!"));
        return Data.Get<FInsertOneEveryVecStructArgs>();
    }

    static FReducer InsertOneF32(const FInsertOneF32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneF32;
        Out.Data.Set<FInsertOneF32Args>(Value);
        Out.ReducerName = TEXT("insert_one_f32");
        return Out;
    }

    FORCEINLINE bool IsInsertOneF32() const { return Tag == EReducerTag::InsertOneF32; }
    FORCEINLINE FInsertOneF32Args GetAsInsertOneF32() const
    {
        ensureMsgf(IsInsertOneF32(), TEXT("Reducer does not hold InsertOneF32!"));
        return Data.Get<FInsertOneF32Args>();
    }

    static FReducer InsertOneF64(const FInsertOneF64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneF64;
        Out.Data.Set<FInsertOneF64Args>(Value);
        Out.ReducerName = TEXT("insert_one_f64");
        return Out;
    }

    FORCEINLINE bool IsInsertOneF64() const { return Tag == EReducerTag::InsertOneF64; }
    FORCEINLINE FInsertOneF64Args GetAsInsertOneF64() const
    {
        ensureMsgf(IsInsertOneF64(), TEXT("Reducer does not hold InsertOneF64!"));
        return Data.Get<FInsertOneF64Args>();
    }

    static FReducer InsertOneI128(const FInsertOneI128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneI128;
        Out.Data.Set<FInsertOneI128Args>(Value);
        Out.ReducerName = TEXT("insert_one_i128");
        return Out;
    }

    FORCEINLINE bool IsInsertOneI128() const { return Tag == EReducerTag::InsertOneI128; }
    FORCEINLINE FInsertOneI128Args GetAsInsertOneI128() const
    {
        ensureMsgf(IsInsertOneI128(), TEXT("Reducer does not hold InsertOneI128!"));
        return Data.Get<FInsertOneI128Args>();
    }

    static FReducer InsertOneI16(const FInsertOneI16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneI16;
        Out.Data.Set<FInsertOneI16Args>(Value);
        Out.ReducerName = TEXT("insert_one_i16");
        return Out;
    }

    FORCEINLINE bool IsInsertOneI16() const { return Tag == EReducerTag::InsertOneI16; }
    FORCEINLINE FInsertOneI16Args GetAsInsertOneI16() const
    {
        ensureMsgf(IsInsertOneI16(), TEXT("Reducer does not hold InsertOneI16!"));
        return Data.Get<FInsertOneI16Args>();
    }

    static FReducer InsertOneI256(const FInsertOneI256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneI256;
        Out.Data.Set<FInsertOneI256Args>(Value);
        Out.ReducerName = TEXT("insert_one_i256");
        return Out;
    }

    FORCEINLINE bool IsInsertOneI256() const { return Tag == EReducerTag::InsertOneI256; }
    FORCEINLINE FInsertOneI256Args GetAsInsertOneI256() const
    {
        ensureMsgf(IsInsertOneI256(), TEXT("Reducer does not hold InsertOneI256!"));
        return Data.Get<FInsertOneI256Args>();
    }

    static FReducer InsertOneI32(const FInsertOneI32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneI32;
        Out.Data.Set<FInsertOneI32Args>(Value);
        Out.ReducerName = TEXT("insert_one_i32");
        return Out;
    }

    FORCEINLINE bool IsInsertOneI32() const { return Tag == EReducerTag::InsertOneI32; }
    FORCEINLINE FInsertOneI32Args GetAsInsertOneI32() const
    {
        ensureMsgf(IsInsertOneI32(), TEXT("Reducer does not hold InsertOneI32!"));
        return Data.Get<FInsertOneI32Args>();
    }

    static FReducer InsertOneI64(const FInsertOneI64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneI64;
        Out.Data.Set<FInsertOneI64Args>(Value);
        Out.ReducerName = TEXT("insert_one_i64");
        return Out;
    }

    FORCEINLINE bool IsInsertOneI64() const { return Tag == EReducerTag::InsertOneI64; }
    FORCEINLINE FInsertOneI64Args GetAsInsertOneI64() const
    {
        ensureMsgf(IsInsertOneI64(), TEXT("Reducer does not hold InsertOneI64!"));
        return Data.Get<FInsertOneI64Args>();
    }

    static FReducer InsertOneI8(const FInsertOneI8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneI8;
        Out.Data.Set<FInsertOneI8Args>(Value);
        Out.ReducerName = TEXT("insert_one_i8");
        return Out;
    }

    FORCEINLINE bool IsInsertOneI8() const { return Tag == EReducerTag::InsertOneI8; }
    FORCEINLINE FInsertOneI8Args GetAsInsertOneI8() const
    {
        ensureMsgf(IsInsertOneI8(), TEXT("Reducer does not hold InsertOneI8!"));
        return Data.Get<FInsertOneI8Args>();
    }

    static FReducer InsertOneIdentity(const FInsertOneIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneIdentity;
        Out.Data.Set<FInsertOneIdentityArgs>(Value);
        Out.ReducerName = TEXT("insert_one_identity");
        return Out;
    }

    FORCEINLINE bool IsInsertOneIdentity() const { return Tag == EReducerTag::InsertOneIdentity; }
    FORCEINLINE FInsertOneIdentityArgs GetAsInsertOneIdentity() const
    {
        ensureMsgf(IsInsertOneIdentity(), TEXT("Reducer does not hold InsertOneIdentity!"));
        return Data.Get<FInsertOneIdentityArgs>();
    }

    static FReducer InsertOneSimpleEnum(const FInsertOneSimpleEnumArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneSimpleEnum;
        Out.Data.Set<FInsertOneSimpleEnumArgs>(Value);
        Out.ReducerName = TEXT("insert_one_simple_enum");
        return Out;
    }

    FORCEINLINE bool IsInsertOneSimpleEnum() const { return Tag == EReducerTag::InsertOneSimpleEnum; }
    FORCEINLINE FInsertOneSimpleEnumArgs GetAsInsertOneSimpleEnum() const
    {
        ensureMsgf(IsInsertOneSimpleEnum(), TEXT("Reducer does not hold InsertOneSimpleEnum!"));
        return Data.Get<FInsertOneSimpleEnumArgs>();
    }

    static FReducer InsertOneString(const FInsertOneStringArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneString;
        Out.Data.Set<FInsertOneStringArgs>(Value);
        Out.ReducerName = TEXT("insert_one_string");
        return Out;
    }

    FORCEINLINE bool IsInsertOneString() const { return Tag == EReducerTag::InsertOneString; }
    FORCEINLINE FInsertOneStringArgs GetAsInsertOneString() const
    {
        ensureMsgf(IsInsertOneString(), TEXT("Reducer does not hold InsertOneString!"));
        return Data.Get<FInsertOneStringArgs>();
    }

    static FReducer InsertOneTimestamp(const FInsertOneTimestampArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneTimestamp;
        Out.Data.Set<FInsertOneTimestampArgs>(Value);
        Out.ReducerName = TEXT("insert_one_timestamp");
        return Out;
    }

    FORCEINLINE bool IsInsertOneTimestamp() const { return Tag == EReducerTag::InsertOneTimestamp; }
    FORCEINLINE FInsertOneTimestampArgs GetAsInsertOneTimestamp() const
    {
        ensureMsgf(IsInsertOneTimestamp(), TEXT("Reducer does not hold InsertOneTimestamp!"));
        return Data.Get<FInsertOneTimestampArgs>();
    }

    static FReducer InsertOneU128(const FInsertOneU128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneU128;
        Out.Data.Set<FInsertOneU128Args>(Value);
        Out.ReducerName = TEXT("insert_one_u128");
        return Out;
    }

    FORCEINLINE bool IsInsertOneU128() const { return Tag == EReducerTag::InsertOneU128; }
    FORCEINLINE FInsertOneU128Args GetAsInsertOneU128() const
    {
        ensureMsgf(IsInsertOneU128(), TEXT("Reducer does not hold InsertOneU128!"));
        return Data.Get<FInsertOneU128Args>();
    }

    static FReducer InsertOneU16(const FInsertOneU16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneU16;
        Out.Data.Set<FInsertOneU16Args>(Value);
        Out.ReducerName = TEXT("insert_one_u16");
        return Out;
    }

    FORCEINLINE bool IsInsertOneU16() const { return Tag == EReducerTag::InsertOneU16; }
    FORCEINLINE FInsertOneU16Args GetAsInsertOneU16() const
    {
        ensureMsgf(IsInsertOneU16(), TEXT("Reducer does not hold InsertOneU16!"));
        return Data.Get<FInsertOneU16Args>();
    }

    static FReducer InsertOneU256(const FInsertOneU256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneU256;
        Out.Data.Set<FInsertOneU256Args>(Value);
        Out.ReducerName = TEXT("insert_one_u256");
        return Out;
    }

    FORCEINLINE bool IsInsertOneU256() const { return Tag == EReducerTag::InsertOneU256; }
    FORCEINLINE FInsertOneU256Args GetAsInsertOneU256() const
    {
        ensureMsgf(IsInsertOneU256(), TEXT("Reducer does not hold InsertOneU256!"));
        return Data.Get<FInsertOneU256Args>();
    }

    static FReducer InsertOneU32(const FInsertOneU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneU32;
        Out.Data.Set<FInsertOneU32Args>(Value);
        Out.ReducerName = TEXT("insert_one_u32");
        return Out;
    }

    FORCEINLINE bool IsInsertOneU32() const { return Tag == EReducerTag::InsertOneU32; }
    FORCEINLINE FInsertOneU32Args GetAsInsertOneU32() const
    {
        ensureMsgf(IsInsertOneU32(), TEXT("Reducer does not hold InsertOneU32!"));
        return Data.Get<FInsertOneU32Args>();
    }

    static FReducer InsertOneU64(const FInsertOneU64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneU64;
        Out.Data.Set<FInsertOneU64Args>(Value);
        Out.ReducerName = TEXT("insert_one_u64");
        return Out;
    }

    FORCEINLINE bool IsInsertOneU64() const { return Tag == EReducerTag::InsertOneU64; }
    FORCEINLINE FInsertOneU64Args GetAsInsertOneU64() const
    {
        ensureMsgf(IsInsertOneU64(), TEXT("Reducer does not hold InsertOneU64!"));
        return Data.Get<FInsertOneU64Args>();
    }

    static FReducer InsertOneU8(const FInsertOneU8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneU8;
        Out.Data.Set<FInsertOneU8Args>(Value);
        Out.ReducerName = TEXT("insert_one_u8");
        return Out;
    }

    FORCEINLINE bool IsInsertOneU8() const { return Tag == EReducerTag::InsertOneU8; }
    FORCEINLINE FInsertOneU8Args GetAsInsertOneU8() const
    {
        ensureMsgf(IsInsertOneU8(), TEXT("Reducer does not hold InsertOneU8!"));
        return Data.Get<FInsertOneU8Args>();
    }

    static FReducer InsertOneUnitStruct(const FInsertOneUnitStructArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOneUnitStruct;
        Out.Data.Set<FInsertOneUnitStructArgs>(Value);
        Out.ReducerName = TEXT("insert_one_unit_struct");
        return Out;
    }

    FORCEINLINE bool IsInsertOneUnitStruct() const { return Tag == EReducerTag::InsertOneUnitStruct; }
    FORCEINLINE FInsertOneUnitStructArgs GetAsInsertOneUnitStruct() const
    {
        ensureMsgf(IsInsertOneUnitStruct(), TEXT("Reducer does not hold InsertOneUnitStruct!"));
        return Data.Get<FInsertOneUnitStructArgs>();
    }

    static FReducer InsertOptionEveryPrimitiveStruct(const FInsertOptionEveryPrimitiveStructArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOptionEveryPrimitiveStruct;
        Out.Data.Set<FInsertOptionEveryPrimitiveStructArgs>(Value);
        Out.ReducerName = TEXT("insert_option_every_primitive_struct");
        return Out;
    }

    FORCEINLINE bool IsInsertOptionEveryPrimitiveStruct() const { return Tag == EReducerTag::InsertOptionEveryPrimitiveStruct; }
    FORCEINLINE FInsertOptionEveryPrimitiveStructArgs GetAsInsertOptionEveryPrimitiveStruct() const
    {
        ensureMsgf(IsInsertOptionEveryPrimitiveStruct(), TEXT("Reducer does not hold InsertOptionEveryPrimitiveStruct!"));
        return Data.Get<FInsertOptionEveryPrimitiveStructArgs>();
    }

    static FReducer InsertOptionI32(const FInsertOptionI32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOptionI32;
        Out.Data.Set<FInsertOptionI32Args>(Value);
        Out.ReducerName = TEXT("insert_option_i32");
        return Out;
    }

    FORCEINLINE bool IsInsertOptionI32() const { return Tag == EReducerTag::InsertOptionI32; }
    FORCEINLINE FInsertOptionI32Args GetAsInsertOptionI32() const
    {
        ensureMsgf(IsInsertOptionI32(), TEXT("Reducer does not hold InsertOptionI32!"));
        return Data.Get<FInsertOptionI32Args>();
    }

    static FReducer InsertOptionIdentity(const FInsertOptionIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOptionIdentity;
        Out.Data.Set<FInsertOptionIdentityArgs>(Value);
        Out.ReducerName = TEXT("insert_option_identity");
        return Out;
    }

    FORCEINLINE bool IsInsertOptionIdentity() const { return Tag == EReducerTag::InsertOptionIdentity; }
    FORCEINLINE FInsertOptionIdentityArgs GetAsInsertOptionIdentity() const
    {
        ensureMsgf(IsInsertOptionIdentity(), TEXT("Reducer does not hold InsertOptionIdentity!"));
        return Data.Get<FInsertOptionIdentityArgs>();
    }

    static FReducer InsertOptionSimpleEnum(const FInsertOptionSimpleEnumArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOptionSimpleEnum;
        Out.Data.Set<FInsertOptionSimpleEnumArgs>(Value);
        Out.ReducerName = TEXT("insert_option_simple_enum");
        return Out;
    }

    FORCEINLINE bool IsInsertOptionSimpleEnum() const { return Tag == EReducerTag::InsertOptionSimpleEnum; }
    FORCEINLINE FInsertOptionSimpleEnumArgs GetAsInsertOptionSimpleEnum() const
    {
        ensureMsgf(IsInsertOptionSimpleEnum(), TEXT("Reducer does not hold InsertOptionSimpleEnum!"));
        return Data.Get<FInsertOptionSimpleEnumArgs>();
    }

    static FReducer InsertOptionString(const FInsertOptionStringArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOptionString;
        Out.Data.Set<FInsertOptionStringArgs>(Value);
        Out.ReducerName = TEXT("insert_option_string");
        return Out;
    }

    FORCEINLINE bool IsInsertOptionString() const { return Tag == EReducerTag::InsertOptionString; }
    FORCEINLINE FInsertOptionStringArgs GetAsInsertOptionString() const
    {
        ensureMsgf(IsInsertOptionString(), TEXT("Reducer does not hold InsertOptionString!"));
        return Data.Get<FInsertOptionStringArgs>();
    }

    static FReducer InsertOptionVecOptionI32(const FInsertOptionVecOptionI32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertOptionVecOptionI32;
        Out.Data.Set<FInsertOptionVecOptionI32Args>(Value);
        Out.ReducerName = TEXT("insert_option_vec_option_i32");
        return Out;
    }

    FORCEINLINE bool IsInsertOptionVecOptionI32() const { return Tag == EReducerTag::InsertOptionVecOptionI32; }
    FORCEINLINE FInsertOptionVecOptionI32Args GetAsInsertOptionVecOptionI32() const
    {
        ensureMsgf(IsInsertOptionVecOptionI32(), TEXT("Reducer does not hold InsertOptionVecOptionI32!"));
        return Data.Get<FInsertOptionVecOptionI32Args>();
    }

    static FReducer InsertPkBool(const FInsertPkBoolArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkBool;
        Out.Data.Set<FInsertPkBoolArgs>(Value);
        Out.ReducerName = TEXT("insert_pk_bool");
        return Out;
    }

    FORCEINLINE bool IsInsertPkBool() const { return Tag == EReducerTag::InsertPkBool; }
    FORCEINLINE FInsertPkBoolArgs GetAsInsertPkBool() const
    {
        ensureMsgf(IsInsertPkBool(), TEXT("Reducer does not hold InsertPkBool!"));
        return Data.Get<FInsertPkBoolArgs>();
    }

    static FReducer InsertPkConnectionId(const FInsertPkConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkConnectionId;
        Out.Data.Set<FInsertPkConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("insert_pk_connection_id");
        return Out;
    }

    FORCEINLINE bool IsInsertPkConnectionId() const { return Tag == EReducerTag::InsertPkConnectionId; }
    FORCEINLINE FInsertPkConnectionIdArgs GetAsInsertPkConnectionId() const
    {
        ensureMsgf(IsInsertPkConnectionId(), TEXT("Reducer does not hold InsertPkConnectionId!"));
        return Data.Get<FInsertPkConnectionIdArgs>();
    }

    static FReducer InsertPkI128(const FInsertPkI128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkI128;
        Out.Data.Set<FInsertPkI128Args>(Value);
        Out.ReducerName = TEXT("insert_pk_i128");
        return Out;
    }

    FORCEINLINE bool IsInsertPkI128() const { return Tag == EReducerTag::InsertPkI128; }
    FORCEINLINE FInsertPkI128Args GetAsInsertPkI128() const
    {
        ensureMsgf(IsInsertPkI128(), TEXT("Reducer does not hold InsertPkI128!"));
        return Data.Get<FInsertPkI128Args>();
    }

    static FReducer InsertPkI16(const FInsertPkI16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkI16;
        Out.Data.Set<FInsertPkI16Args>(Value);
        Out.ReducerName = TEXT("insert_pk_i16");
        return Out;
    }

    FORCEINLINE bool IsInsertPkI16() const { return Tag == EReducerTag::InsertPkI16; }
    FORCEINLINE FInsertPkI16Args GetAsInsertPkI16() const
    {
        ensureMsgf(IsInsertPkI16(), TEXT("Reducer does not hold InsertPkI16!"));
        return Data.Get<FInsertPkI16Args>();
    }

    static FReducer InsertPkI256(const FInsertPkI256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkI256;
        Out.Data.Set<FInsertPkI256Args>(Value);
        Out.ReducerName = TEXT("insert_pk_i256");
        return Out;
    }

    FORCEINLINE bool IsInsertPkI256() const { return Tag == EReducerTag::InsertPkI256; }
    FORCEINLINE FInsertPkI256Args GetAsInsertPkI256() const
    {
        ensureMsgf(IsInsertPkI256(), TEXT("Reducer does not hold InsertPkI256!"));
        return Data.Get<FInsertPkI256Args>();
    }

    static FReducer InsertPkI32(const FInsertPkI32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkI32;
        Out.Data.Set<FInsertPkI32Args>(Value);
        Out.ReducerName = TEXT("insert_pk_i32");
        return Out;
    }

    FORCEINLINE bool IsInsertPkI32() const { return Tag == EReducerTag::InsertPkI32; }
    FORCEINLINE FInsertPkI32Args GetAsInsertPkI32() const
    {
        ensureMsgf(IsInsertPkI32(), TEXT("Reducer does not hold InsertPkI32!"));
        return Data.Get<FInsertPkI32Args>();
    }

    static FReducer InsertPkI64(const FInsertPkI64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkI64;
        Out.Data.Set<FInsertPkI64Args>(Value);
        Out.ReducerName = TEXT("insert_pk_i64");
        return Out;
    }

    FORCEINLINE bool IsInsertPkI64() const { return Tag == EReducerTag::InsertPkI64; }
    FORCEINLINE FInsertPkI64Args GetAsInsertPkI64() const
    {
        ensureMsgf(IsInsertPkI64(), TEXT("Reducer does not hold InsertPkI64!"));
        return Data.Get<FInsertPkI64Args>();
    }

    static FReducer InsertPkI8(const FInsertPkI8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkI8;
        Out.Data.Set<FInsertPkI8Args>(Value);
        Out.ReducerName = TEXT("insert_pk_i8");
        return Out;
    }

    FORCEINLINE bool IsInsertPkI8() const { return Tag == EReducerTag::InsertPkI8; }
    FORCEINLINE FInsertPkI8Args GetAsInsertPkI8() const
    {
        ensureMsgf(IsInsertPkI8(), TEXT("Reducer does not hold InsertPkI8!"));
        return Data.Get<FInsertPkI8Args>();
    }

    static FReducer InsertPkIdentity(const FInsertPkIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkIdentity;
        Out.Data.Set<FInsertPkIdentityArgs>(Value);
        Out.ReducerName = TEXT("insert_pk_identity");
        return Out;
    }

    FORCEINLINE bool IsInsertPkIdentity() const { return Tag == EReducerTag::InsertPkIdentity; }
    FORCEINLINE FInsertPkIdentityArgs GetAsInsertPkIdentity() const
    {
        ensureMsgf(IsInsertPkIdentity(), TEXT("Reducer does not hold InsertPkIdentity!"));
        return Data.Get<FInsertPkIdentityArgs>();
    }

    static FReducer InsertPkSimpleEnum(const FInsertPkSimpleEnumArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkSimpleEnum;
        Out.Data.Set<FInsertPkSimpleEnumArgs>(Value);
        Out.ReducerName = TEXT("insert_pk_simple_enum");
        return Out;
    }

    FORCEINLINE bool IsInsertPkSimpleEnum() const { return Tag == EReducerTag::InsertPkSimpleEnum; }
    FORCEINLINE FInsertPkSimpleEnumArgs GetAsInsertPkSimpleEnum() const
    {
        ensureMsgf(IsInsertPkSimpleEnum(), TEXT("Reducer does not hold InsertPkSimpleEnum!"));
        return Data.Get<FInsertPkSimpleEnumArgs>();
    }

    static FReducer InsertPkString(const FInsertPkStringArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkString;
        Out.Data.Set<FInsertPkStringArgs>(Value);
        Out.ReducerName = TEXT("insert_pk_string");
        return Out;
    }

    FORCEINLINE bool IsInsertPkString() const { return Tag == EReducerTag::InsertPkString; }
    FORCEINLINE FInsertPkStringArgs GetAsInsertPkString() const
    {
        ensureMsgf(IsInsertPkString(), TEXT("Reducer does not hold InsertPkString!"));
        return Data.Get<FInsertPkStringArgs>();
    }

    static FReducer InsertPkU128(const FInsertPkU128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkU128;
        Out.Data.Set<FInsertPkU128Args>(Value);
        Out.ReducerName = TEXT("insert_pk_u128");
        return Out;
    }

    FORCEINLINE bool IsInsertPkU128() const { return Tag == EReducerTag::InsertPkU128; }
    FORCEINLINE FInsertPkU128Args GetAsInsertPkU128() const
    {
        ensureMsgf(IsInsertPkU128(), TEXT("Reducer does not hold InsertPkU128!"));
        return Data.Get<FInsertPkU128Args>();
    }

    static FReducer InsertPkU16(const FInsertPkU16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkU16;
        Out.Data.Set<FInsertPkU16Args>(Value);
        Out.ReducerName = TEXT("insert_pk_u16");
        return Out;
    }

    FORCEINLINE bool IsInsertPkU16() const { return Tag == EReducerTag::InsertPkU16; }
    FORCEINLINE FInsertPkU16Args GetAsInsertPkU16() const
    {
        ensureMsgf(IsInsertPkU16(), TEXT("Reducer does not hold InsertPkU16!"));
        return Data.Get<FInsertPkU16Args>();
    }

    static FReducer InsertPkU256(const FInsertPkU256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkU256;
        Out.Data.Set<FInsertPkU256Args>(Value);
        Out.ReducerName = TEXT("insert_pk_u256");
        return Out;
    }

    FORCEINLINE bool IsInsertPkU256() const { return Tag == EReducerTag::InsertPkU256; }
    FORCEINLINE FInsertPkU256Args GetAsInsertPkU256() const
    {
        ensureMsgf(IsInsertPkU256(), TEXT("Reducer does not hold InsertPkU256!"));
        return Data.Get<FInsertPkU256Args>();
    }

    static FReducer InsertPkU32(const FInsertPkU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkU32;
        Out.Data.Set<FInsertPkU32Args>(Value);
        Out.ReducerName = TEXT("insert_pk_u32");
        return Out;
    }

    FORCEINLINE bool IsInsertPkU32() const { return Tag == EReducerTag::InsertPkU32; }
    FORCEINLINE FInsertPkU32Args GetAsInsertPkU32() const
    {
        ensureMsgf(IsInsertPkU32(), TEXT("Reducer does not hold InsertPkU32!"));
        return Data.Get<FInsertPkU32Args>();
    }

    static FReducer InsertPkU32Two(const FInsertPkU32TwoArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkU32Two;
        Out.Data.Set<FInsertPkU32TwoArgs>(Value);
        Out.ReducerName = TEXT("insert_pk_u32_two");
        return Out;
    }

    FORCEINLINE bool IsInsertPkU32Two() const { return Tag == EReducerTag::InsertPkU32Two; }
    FORCEINLINE FInsertPkU32TwoArgs GetAsInsertPkU32Two() const
    {
        ensureMsgf(IsInsertPkU32Two(), TEXT("Reducer does not hold InsertPkU32Two!"));
        return Data.Get<FInsertPkU32TwoArgs>();
    }

    static FReducer InsertPkU64(const FInsertPkU64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkU64;
        Out.Data.Set<FInsertPkU64Args>(Value);
        Out.ReducerName = TEXT("insert_pk_u64");
        return Out;
    }

    FORCEINLINE bool IsInsertPkU64() const { return Tag == EReducerTag::InsertPkU64; }
    FORCEINLINE FInsertPkU64Args GetAsInsertPkU64() const
    {
        ensureMsgf(IsInsertPkU64(), TEXT("Reducer does not hold InsertPkU64!"));
        return Data.Get<FInsertPkU64Args>();
    }

    static FReducer InsertPkU8(const FInsertPkU8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPkU8;
        Out.Data.Set<FInsertPkU8Args>(Value);
        Out.ReducerName = TEXT("insert_pk_u8");
        return Out;
    }

    FORCEINLINE bool IsInsertPkU8() const { return Tag == EReducerTag::InsertPkU8; }
    FORCEINLINE FInsertPkU8Args GetAsInsertPkU8() const
    {
        ensureMsgf(IsInsertPkU8(), TEXT("Reducer does not hold InsertPkU8!"));
        return Data.Get<FInsertPkU8Args>();
    }

    static FReducer InsertPrimitivesAsStrings(const FInsertPrimitivesAsStringsArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertPrimitivesAsStrings;
        Out.Data.Set<FInsertPrimitivesAsStringsArgs>(Value);
        Out.ReducerName = TEXT("insert_primitives_as_strings");
        return Out;
    }

    FORCEINLINE bool IsInsertPrimitivesAsStrings() const { return Tag == EReducerTag::InsertPrimitivesAsStrings; }
    FORCEINLINE FInsertPrimitivesAsStringsArgs GetAsInsertPrimitivesAsStrings() const
    {
        ensureMsgf(IsInsertPrimitivesAsStrings(), TEXT("Reducer does not hold InsertPrimitivesAsStrings!"));
        return Data.Get<FInsertPrimitivesAsStringsArgs>();
    }

    static FReducer InsertTableHoldsTable(const FInsertTableHoldsTableArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertTableHoldsTable;
        Out.Data.Set<FInsertTableHoldsTableArgs>(Value);
        Out.ReducerName = TEXT("insert_table_holds_table");
        return Out;
    }

    FORCEINLINE bool IsInsertTableHoldsTable() const { return Tag == EReducerTag::InsertTableHoldsTable; }
    FORCEINLINE FInsertTableHoldsTableArgs GetAsInsertTableHoldsTable() const
    {
        ensureMsgf(IsInsertTableHoldsTable(), TEXT("Reducer does not hold InsertTableHoldsTable!"));
        return Data.Get<FInsertTableHoldsTableArgs>();
    }

    static FReducer InsertUniqueBool(const FInsertUniqueBoolArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueBool;
        Out.Data.Set<FInsertUniqueBoolArgs>(Value);
        Out.ReducerName = TEXT("insert_unique_bool");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueBool() const { return Tag == EReducerTag::InsertUniqueBool; }
    FORCEINLINE FInsertUniqueBoolArgs GetAsInsertUniqueBool() const
    {
        ensureMsgf(IsInsertUniqueBool(), TEXT("Reducer does not hold InsertUniqueBool!"));
        return Data.Get<FInsertUniqueBoolArgs>();
    }

    static FReducer InsertUniqueConnectionId(const FInsertUniqueConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueConnectionId;
        Out.Data.Set<FInsertUniqueConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("insert_unique_connection_id");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueConnectionId() const { return Tag == EReducerTag::InsertUniqueConnectionId; }
    FORCEINLINE FInsertUniqueConnectionIdArgs GetAsInsertUniqueConnectionId() const
    {
        ensureMsgf(IsInsertUniqueConnectionId(), TEXT("Reducer does not hold InsertUniqueConnectionId!"));
        return Data.Get<FInsertUniqueConnectionIdArgs>();
    }

    static FReducer InsertUniqueI128(const FInsertUniqueI128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueI128;
        Out.Data.Set<FInsertUniqueI128Args>(Value);
        Out.ReducerName = TEXT("insert_unique_i128");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueI128() const { return Tag == EReducerTag::InsertUniqueI128; }
    FORCEINLINE FInsertUniqueI128Args GetAsInsertUniqueI128() const
    {
        ensureMsgf(IsInsertUniqueI128(), TEXT("Reducer does not hold InsertUniqueI128!"));
        return Data.Get<FInsertUniqueI128Args>();
    }

    static FReducer InsertUniqueI16(const FInsertUniqueI16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueI16;
        Out.Data.Set<FInsertUniqueI16Args>(Value);
        Out.ReducerName = TEXT("insert_unique_i16");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueI16() const { return Tag == EReducerTag::InsertUniqueI16; }
    FORCEINLINE FInsertUniqueI16Args GetAsInsertUniqueI16() const
    {
        ensureMsgf(IsInsertUniqueI16(), TEXT("Reducer does not hold InsertUniqueI16!"));
        return Data.Get<FInsertUniqueI16Args>();
    }

    static FReducer InsertUniqueI256(const FInsertUniqueI256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueI256;
        Out.Data.Set<FInsertUniqueI256Args>(Value);
        Out.ReducerName = TEXT("insert_unique_i256");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueI256() const { return Tag == EReducerTag::InsertUniqueI256; }
    FORCEINLINE FInsertUniqueI256Args GetAsInsertUniqueI256() const
    {
        ensureMsgf(IsInsertUniqueI256(), TEXT("Reducer does not hold InsertUniqueI256!"));
        return Data.Get<FInsertUniqueI256Args>();
    }

    static FReducer InsertUniqueI32(const FInsertUniqueI32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueI32;
        Out.Data.Set<FInsertUniqueI32Args>(Value);
        Out.ReducerName = TEXT("insert_unique_i32");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueI32() const { return Tag == EReducerTag::InsertUniqueI32; }
    FORCEINLINE FInsertUniqueI32Args GetAsInsertUniqueI32() const
    {
        ensureMsgf(IsInsertUniqueI32(), TEXT("Reducer does not hold InsertUniqueI32!"));
        return Data.Get<FInsertUniqueI32Args>();
    }

    static FReducer InsertUniqueI64(const FInsertUniqueI64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueI64;
        Out.Data.Set<FInsertUniqueI64Args>(Value);
        Out.ReducerName = TEXT("insert_unique_i64");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueI64() const { return Tag == EReducerTag::InsertUniqueI64; }
    FORCEINLINE FInsertUniqueI64Args GetAsInsertUniqueI64() const
    {
        ensureMsgf(IsInsertUniqueI64(), TEXT("Reducer does not hold InsertUniqueI64!"));
        return Data.Get<FInsertUniqueI64Args>();
    }

    static FReducer InsertUniqueI8(const FInsertUniqueI8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueI8;
        Out.Data.Set<FInsertUniqueI8Args>(Value);
        Out.ReducerName = TEXT("insert_unique_i8");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueI8() const { return Tag == EReducerTag::InsertUniqueI8; }
    FORCEINLINE FInsertUniqueI8Args GetAsInsertUniqueI8() const
    {
        ensureMsgf(IsInsertUniqueI8(), TEXT("Reducer does not hold InsertUniqueI8!"));
        return Data.Get<FInsertUniqueI8Args>();
    }

    static FReducer InsertUniqueIdentity(const FInsertUniqueIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueIdentity;
        Out.Data.Set<FInsertUniqueIdentityArgs>(Value);
        Out.ReducerName = TEXT("insert_unique_identity");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueIdentity() const { return Tag == EReducerTag::InsertUniqueIdentity; }
    FORCEINLINE FInsertUniqueIdentityArgs GetAsInsertUniqueIdentity() const
    {
        ensureMsgf(IsInsertUniqueIdentity(), TEXT("Reducer does not hold InsertUniqueIdentity!"));
        return Data.Get<FInsertUniqueIdentityArgs>();
    }

    static FReducer InsertUniqueString(const FInsertUniqueStringArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueString;
        Out.Data.Set<FInsertUniqueStringArgs>(Value);
        Out.ReducerName = TEXT("insert_unique_string");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueString() const { return Tag == EReducerTag::InsertUniqueString; }
    FORCEINLINE FInsertUniqueStringArgs GetAsInsertUniqueString() const
    {
        ensureMsgf(IsInsertUniqueString(), TEXT("Reducer does not hold InsertUniqueString!"));
        return Data.Get<FInsertUniqueStringArgs>();
    }

    static FReducer InsertUniqueU128(const FInsertUniqueU128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueU128;
        Out.Data.Set<FInsertUniqueU128Args>(Value);
        Out.ReducerName = TEXT("insert_unique_u128");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueU128() const { return Tag == EReducerTag::InsertUniqueU128; }
    FORCEINLINE FInsertUniqueU128Args GetAsInsertUniqueU128() const
    {
        ensureMsgf(IsInsertUniqueU128(), TEXT("Reducer does not hold InsertUniqueU128!"));
        return Data.Get<FInsertUniqueU128Args>();
    }

    static FReducer InsertUniqueU16(const FInsertUniqueU16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueU16;
        Out.Data.Set<FInsertUniqueU16Args>(Value);
        Out.ReducerName = TEXT("insert_unique_u16");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueU16() const { return Tag == EReducerTag::InsertUniqueU16; }
    FORCEINLINE FInsertUniqueU16Args GetAsInsertUniqueU16() const
    {
        ensureMsgf(IsInsertUniqueU16(), TEXT("Reducer does not hold InsertUniqueU16!"));
        return Data.Get<FInsertUniqueU16Args>();
    }

    static FReducer InsertUniqueU256(const FInsertUniqueU256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueU256;
        Out.Data.Set<FInsertUniqueU256Args>(Value);
        Out.ReducerName = TEXT("insert_unique_u256");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueU256() const { return Tag == EReducerTag::InsertUniqueU256; }
    FORCEINLINE FInsertUniqueU256Args GetAsInsertUniqueU256() const
    {
        ensureMsgf(IsInsertUniqueU256(), TEXT("Reducer does not hold InsertUniqueU256!"));
        return Data.Get<FInsertUniqueU256Args>();
    }

    static FReducer InsertUniqueU32(const FInsertUniqueU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueU32;
        Out.Data.Set<FInsertUniqueU32Args>(Value);
        Out.ReducerName = TEXT("insert_unique_u32");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueU32() const { return Tag == EReducerTag::InsertUniqueU32; }
    FORCEINLINE FInsertUniqueU32Args GetAsInsertUniqueU32() const
    {
        ensureMsgf(IsInsertUniqueU32(), TEXT("Reducer does not hold InsertUniqueU32!"));
        return Data.Get<FInsertUniqueU32Args>();
    }

    static FReducer InsertUniqueU32UpdatePkU32(const FInsertUniqueU32UpdatePkU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueU32UpdatePkU32;
        Out.Data.Set<FInsertUniqueU32UpdatePkU32Args>(Value);
        Out.ReducerName = TEXT("insert_unique_u32_update_pk_u32");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueU32UpdatePkU32() const { return Tag == EReducerTag::InsertUniqueU32UpdatePkU32; }
    FORCEINLINE FInsertUniqueU32UpdatePkU32Args GetAsInsertUniqueU32UpdatePkU32() const
    {
        ensureMsgf(IsInsertUniqueU32UpdatePkU32(), TEXT("Reducer does not hold InsertUniqueU32UpdatePkU32!"));
        return Data.Get<FInsertUniqueU32UpdatePkU32Args>();
    }

    static FReducer InsertUniqueU64(const FInsertUniqueU64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueU64;
        Out.Data.Set<FInsertUniqueU64Args>(Value);
        Out.ReducerName = TEXT("insert_unique_u64");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueU64() const { return Tag == EReducerTag::InsertUniqueU64; }
    FORCEINLINE FInsertUniqueU64Args GetAsInsertUniqueU64() const
    {
        ensureMsgf(IsInsertUniqueU64(), TEXT("Reducer does not hold InsertUniqueU64!"));
        return Data.Get<FInsertUniqueU64Args>();
    }

    static FReducer InsertUniqueU8(const FInsertUniqueU8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUniqueU8;
        Out.Data.Set<FInsertUniqueU8Args>(Value);
        Out.ReducerName = TEXT("insert_unique_u8");
        return Out;
    }

    FORCEINLINE bool IsInsertUniqueU8() const { return Tag == EReducerTag::InsertUniqueU8; }
    FORCEINLINE FInsertUniqueU8Args GetAsInsertUniqueU8() const
    {
        ensureMsgf(IsInsertUniqueU8(), TEXT("Reducer does not hold InsertUniqueU8!"));
        return Data.Get<FInsertUniqueU8Args>();
    }

    static FReducer InsertUser(const FInsertUserArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertUser;
        Out.Data.Set<FInsertUserArgs>(Value);
        Out.ReducerName = TEXT("insert_user");
        return Out;
    }

    FORCEINLINE bool IsInsertUser() const { return Tag == EReducerTag::InsertUser; }
    FORCEINLINE FInsertUserArgs GetAsInsertUser() const
    {
        ensureMsgf(IsInsertUser(), TEXT("Reducer does not hold InsertUser!"));
        return Data.Get<FInsertUserArgs>();
    }

    static FReducer InsertVecBool(const FInsertVecBoolArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecBool;
        Out.Data.Set<FInsertVecBoolArgs>(Value);
        Out.ReducerName = TEXT("insert_vec_bool");
        return Out;
    }

    FORCEINLINE bool IsInsertVecBool() const { return Tag == EReducerTag::InsertVecBool; }
    FORCEINLINE FInsertVecBoolArgs GetAsInsertVecBool() const
    {
        ensureMsgf(IsInsertVecBool(), TEXT("Reducer does not hold InsertVecBool!"));
        return Data.Get<FInsertVecBoolArgs>();
    }

    static FReducer InsertVecByteStruct(const FInsertVecByteStructArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecByteStruct;
        Out.Data.Set<FInsertVecByteStructArgs>(Value);
        Out.ReducerName = TEXT("insert_vec_byte_struct");
        return Out;
    }

    FORCEINLINE bool IsInsertVecByteStruct() const { return Tag == EReducerTag::InsertVecByteStruct; }
    FORCEINLINE FInsertVecByteStructArgs GetAsInsertVecByteStruct() const
    {
        ensureMsgf(IsInsertVecByteStruct(), TEXT("Reducer does not hold InsertVecByteStruct!"));
        return Data.Get<FInsertVecByteStructArgs>();
    }

    static FReducer InsertVecConnectionId(const FInsertVecConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecConnectionId;
        Out.Data.Set<FInsertVecConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("insert_vec_connection_id");
        return Out;
    }

    FORCEINLINE bool IsInsertVecConnectionId() const { return Tag == EReducerTag::InsertVecConnectionId; }
    FORCEINLINE FInsertVecConnectionIdArgs GetAsInsertVecConnectionId() const
    {
        ensureMsgf(IsInsertVecConnectionId(), TEXT("Reducer does not hold InsertVecConnectionId!"));
        return Data.Get<FInsertVecConnectionIdArgs>();
    }

    static FReducer InsertVecEnumWithPayload(const FInsertVecEnumWithPayloadArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecEnumWithPayload;
        Out.Data.Set<FInsertVecEnumWithPayloadArgs>(Value);
        Out.ReducerName = TEXT("insert_vec_enum_with_payload");
        return Out;
    }

    FORCEINLINE bool IsInsertVecEnumWithPayload() const { return Tag == EReducerTag::InsertVecEnumWithPayload; }
    FORCEINLINE FInsertVecEnumWithPayloadArgs GetAsInsertVecEnumWithPayload() const
    {
        ensureMsgf(IsInsertVecEnumWithPayload(), TEXT("Reducer does not hold InsertVecEnumWithPayload!"));
        return Data.Get<FInsertVecEnumWithPayloadArgs>();
    }

    static FReducer InsertVecEveryPrimitiveStruct(const FInsertVecEveryPrimitiveStructArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecEveryPrimitiveStruct;
        Out.Data.Set<FInsertVecEveryPrimitiveStructArgs>(Value);
        Out.ReducerName = TEXT("insert_vec_every_primitive_struct");
        return Out;
    }

    FORCEINLINE bool IsInsertVecEveryPrimitiveStruct() const { return Tag == EReducerTag::InsertVecEveryPrimitiveStruct; }
    FORCEINLINE FInsertVecEveryPrimitiveStructArgs GetAsInsertVecEveryPrimitiveStruct() const
    {
        ensureMsgf(IsInsertVecEveryPrimitiveStruct(), TEXT("Reducer does not hold InsertVecEveryPrimitiveStruct!"));
        return Data.Get<FInsertVecEveryPrimitiveStructArgs>();
    }

    static FReducer InsertVecEveryVecStruct(const FInsertVecEveryVecStructArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecEveryVecStruct;
        Out.Data.Set<FInsertVecEveryVecStructArgs>(Value);
        Out.ReducerName = TEXT("insert_vec_every_vec_struct");
        return Out;
    }

    FORCEINLINE bool IsInsertVecEveryVecStruct() const { return Tag == EReducerTag::InsertVecEveryVecStruct; }
    FORCEINLINE FInsertVecEveryVecStructArgs GetAsInsertVecEveryVecStruct() const
    {
        ensureMsgf(IsInsertVecEveryVecStruct(), TEXT("Reducer does not hold InsertVecEveryVecStruct!"));
        return Data.Get<FInsertVecEveryVecStructArgs>();
    }

    static FReducer InsertVecF32(const FInsertVecF32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecF32;
        Out.Data.Set<FInsertVecF32Args>(Value);
        Out.ReducerName = TEXT("insert_vec_f32");
        return Out;
    }

    FORCEINLINE bool IsInsertVecF32() const { return Tag == EReducerTag::InsertVecF32; }
    FORCEINLINE FInsertVecF32Args GetAsInsertVecF32() const
    {
        ensureMsgf(IsInsertVecF32(), TEXT("Reducer does not hold InsertVecF32!"));
        return Data.Get<FInsertVecF32Args>();
    }

    static FReducer InsertVecF64(const FInsertVecF64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecF64;
        Out.Data.Set<FInsertVecF64Args>(Value);
        Out.ReducerName = TEXT("insert_vec_f64");
        return Out;
    }

    FORCEINLINE bool IsInsertVecF64() const { return Tag == EReducerTag::InsertVecF64; }
    FORCEINLINE FInsertVecF64Args GetAsInsertVecF64() const
    {
        ensureMsgf(IsInsertVecF64(), TEXT("Reducer does not hold InsertVecF64!"));
        return Data.Get<FInsertVecF64Args>();
    }

    static FReducer InsertVecI128(const FInsertVecI128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecI128;
        Out.Data.Set<FInsertVecI128Args>(Value);
        Out.ReducerName = TEXT("insert_vec_i128");
        return Out;
    }

    FORCEINLINE bool IsInsertVecI128() const { return Tag == EReducerTag::InsertVecI128; }
    FORCEINLINE FInsertVecI128Args GetAsInsertVecI128() const
    {
        ensureMsgf(IsInsertVecI128(), TEXT("Reducer does not hold InsertVecI128!"));
        return Data.Get<FInsertVecI128Args>();
    }

    static FReducer InsertVecI16(const FInsertVecI16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecI16;
        Out.Data.Set<FInsertVecI16Args>(Value);
        Out.ReducerName = TEXT("insert_vec_i16");
        return Out;
    }

    FORCEINLINE bool IsInsertVecI16() const { return Tag == EReducerTag::InsertVecI16; }
    FORCEINLINE FInsertVecI16Args GetAsInsertVecI16() const
    {
        ensureMsgf(IsInsertVecI16(), TEXT("Reducer does not hold InsertVecI16!"));
        return Data.Get<FInsertVecI16Args>();
    }

    static FReducer InsertVecI256(const FInsertVecI256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecI256;
        Out.Data.Set<FInsertVecI256Args>(Value);
        Out.ReducerName = TEXT("insert_vec_i256");
        return Out;
    }

    FORCEINLINE bool IsInsertVecI256() const { return Tag == EReducerTag::InsertVecI256; }
    FORCEINLINE FInsertVecI256Args GetAsInsertVecI256() const
    {
        ensureMsgf(IsInsertVecI256(), TEXT("Reducer does not hold InsertVecI256!"));
        return Data.Get<FInsertVecI256Args>();
    }

    static FReducer InsertVecI32(const FInsertVecI32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecI32;
        Out.Data.Set<FInsertVecI32Args>(Value);
        Out.ReducerName = TEXT("insert_vec_i32");
        return Out;
    }

    FORCEINLINE bool IsInsertVecI32() const { return Tag == EReducerTag::InsertVecI32; }
    FORCEINLINE FInsertVecI32Args GetAsInsertVecI32() const
    {
        ensureMsgf(IsInsertVecI32(), TEXT("Reducer does not hold InsertVecI32!"));
        return Data.Get<FInsertVecI32Args>();
    }

    static FReducer InsertVecI64(const FInsertVecI64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecI64;
        Out.Data.Set<FInsertVecI64Args>(Value);
        Out.ReducerName = TEXT("insert_vec_i64");
        return Out;
    }

    FORCEINLINE bool IsInsertVecI64() const { return Tag == EReducerTag::InsertVecI64; }
    FORCEINLINE FInsertVecI64Args GetAsInsertVecI64() const
    {
        ensureMsgf(IsInsertVecI64(), TEXT("Reducer does not hold InsertVecI64!"));
        return Data.Get<FInsertVecI64Args>();
    }

    static FReducer InsertVecI8(const FInsertVecI8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecI8;
        Out.Data.Set<FInsertVecI8Args>(Value);
        Out.ReducerName = TEXT("insert_vec_i8");
        return Out;
    }

    FORCEINLINE bool IsInsertVecI8() const { return Tag == EReducerTag::InsertVecI8; }
    FORCEINLINE FInsertVecI8Args GetAsInsertVecI8() const
    {
        ensureMsgf(IsInsertVecI8(), TEXT("Reducer does not hold InsertVecI8!"));
        return Data.Get<FInsertVecI8Args>();
    }

    static FReducer InsertVecIdentity(const FInsertVecIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecIdentity;
        Out.Data.Set<FInsertVecIdentityArgs>(Value);
        Out.ReducerName = TEXT("insert_vec_identity");
        return Out;
    }

    FORCEINLINE bool IsInsertVecIdentity() const { return Tag == EReducerTag::InsertVecIdentity; }
    FORCEINLINE FInsertVecIdentityArgs GetAsInsertVecIdentity() const
    {
        ensureMsgf(IsInsertVecIdentity(), TEXT("Reducer does not hold InsertVecIdentity!"));
        return Data.Get<FInsertVecIdentityArgs>();
    }

    static FReducer InsertVecSimpleEnum(const FInsertVecSimpleEnumArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecSimpleEnum;
        Out.Data.Set<FInsertVecSimpleEnumArgs>(Value);
        Out.ReducerName = TEXT("insert_vec_simple_enum");
        return Out;
    }

    FORCEINLINE bool IsInsertVecSimpleEnum() const { return Tag == EReducerTag::InsertVecSimpleEnum; }
    FORCEINLINE FInsertVecSimpleEnumArgs GetAsInsertVecSimpleEnum() const
    {
        ensureMsgf(IsInsertVecSimpleEnum(), TEXT("Reducer does not hold InsertVecSimpleEnum!"));
        return Data.Get<FInsertVecSimpleEnumArgs>();
    }

    static FReducer InsertVecString(const FInsertVecStringArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecString;
        Out.Data.Set<FInsertVecStringArgs>(Value);
        Out.ReducerName = TEXT("insert_vec_string");
        return Out;
    }

    FORCEINLINE bool IsInsertVecString() const { return Tag == EReducerTag::InsertVecString; }
    FORCEINLINE FInsertVecStringArgs GetAsInsertVecString() const
    {
        ensureMsgf(IsInsertVecString(), TEXT("Reducer does not hold InsertVecString!"));
        return Data.Get<FInsertVecStringArgs>();
    }

    static FReducer InsertVecTimestamp(const FInsertVecTimestampArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecTimestamp;
        Out.Data.Set<FInsertVecTimestampArgs>(Value);
        Out.ReducerName = TEXT("insert_vec_timestamp");
        return Out;
    }

    FORCEINLINE bool IsInsertVecTimestamp() const { return Tag == EReducerTag::InsertVecTimestamp; }
    FORCEINLINE FInsertVecTimestampArgs GetAsInsertVecTimestamp() const
    {
        ensureMsgf(IsInsertVecTimestamp(), TEXT("Reducer does not hold InsertVecTimestamp!"));
        return Data.Get<FInsertVecTimestampArgs>();
    }

    static FReducer InsertVecU128(const FInsertVecU128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecU128;
        Out.Data.Set<FInsertVecU128Args>(Value);
        Out.ReducerName = TEXT("insert_vec_u128");
        return Out;
    }

    FORCEINLINE bool IsInsertVecU128() const { return Tag == EReducerTag::InsertVecU128; }
    FORCEINLINE FInsertVecU128Args GetAsInsertVecU128() const
    {
        ensureMsgf(IsInsertVecU128(), TEXT("Reducer does not hold InsertVecU128!"));
        return Data.Get<FInsertVecU128Args>();
    }

    static FReducer InsertVecU16(const FInsertVecU16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecU16;
        Out.Data.Set<FInsertVecU16Args>(Value);
        Out.ReducerName = TEXT("insert_vec_u16");
        return Out;
    }

    FORCEINLINE bool IsInsertVecU16() const { return Tag == EReducerTag::InsertVecU16; }
    FORCEINLINE FInsertVecU16Args GetAsInsertVecU16() const
    {
        ensureMsgf(IsInsertVecU16(), TEXT("Reducer does not hold InsertVecU16!"));
        return Data.Get<FInsertVecU16Args>();
    }

    static FReducer InsertVecU256(const FInsertVecU256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecU256;
        Out.Data.Set<FInsertVecU256Args>(Value);
        Out.ReducerName = TEXT("insert_vec_u256");
        return Out;
    }

    FORCEINLINE bool IsInsertVecU256() const { return Tag == EReducerTag::InsertVecU256; }
    FORCEINLINE FInsertVecU256Args GetAsInsertVecU256() const
    {
        ensureMsgf(IsInsertVecU256(), TEXT("Reducer does not hold InsertVecU256!"));
        return Data.Get<FInsertVecU256Args>();
    }

    static FReducer InsertVecU32(const FInsertVecU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecU32;
        Out.Data.Set<FInsertVecU32Args>(Value);
        Out.ReducerName = TEXT("insert_vec_u32");
        return Out;
    }

    FORCEINLINE bool IsInsertVecU32() const { return Tag == EReducerTag::InsertVecU32; }
    FORCEINLINE FInsertVecU32Args GetAsInsertVecU32() const
    {
        ensureMsgf(IsInsertVecU32(), TEXT("Reducer does not hold InsertVecU32!"));
        return Data.Get<FInsertVecU32Args>();
    }

    static FReducer InsertVecU64(const FInsertVecU64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecU64;
        Out.Data.Set<FInsertVecU64Args>(Value);
        Out.ReducerName = TEXT("insert_vec_u64");
        return Out;
    }

    FORCEINLINE bool IsInsertVecU64() const { return Tag == EReducerTag::InsertVecU64; }
    FORCEINLINE FInsertVecU64Args GetAsInsertVecU64() const
    {
        ensureMsgf(IsInsertVecU64(), TEXT("Reducer does not hold InsertVecU64!"));
        return Data.Get<FInsertVecU64Args>();
    }

    static FReducer InsertVecU8(const FInsertVecU8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecU8;
        Out.Data.Set<FInsertVecU8Args>(Value);
        Out.ReducerName = TEXT("insert_vec_u8");
        return Out;
    }

    FORCEINLINE bool IsInsertVecU8() const { return Tag == EReducerTag::InsertVecU8; }
    FORCEINLINE FInsertVecU8Args GetAsInsertVecU8() const
    {
        ensureMsgf(IsInsertVecU8(), TEXT("Reducer does not hold InsertVecU8!"));
        return Data.Get<FInsertVecU8Args>();
    }

    static FReducer InsertVecUnitStruct(const FInsertVecUnitStructArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::InsertVecUnitStruct;
        Out.Data.Set<FInsertVecUnitStructArgs>(Value);
        Out.ReducerName = TEXT("insert_vec_unit_struct");
        return Out;
    }

    FORCEINLINE bool IsInsertVecUnitStruct() const { return Tag == EReducerTag::InsertVecUnitStruct; }
    FORCEINLINE FInsertVecUnitStructArgs GetAsInsertVecUnitStruct() const
    {
        ensureMsgf(IsInsertVecUnitStruct(), TEXT("Reducer does not hold InsertVecUnitStruct!"));
        return Data.Get<FInsertVecUnitStructArgs>();
    }

    static FReducer NoOpSucceeds(const FNoOpSucceedsArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::NoOpSucceeds;
        Out.Data.Set<FNoOpSucceedsArgs>(Value);
        Out.ReducerName = TEXT("no_op_succeeds");
        return Out;
    }

    FORCEINLINE bool IsNoOpSucceeds() const { return Tag == EReducerTag::NoOpSucceeds; }
    FORCEINLINE FNoOpSucceedsArgs GetAsNoOpSucceeds() const
    {
        ensureMsgf(IsNoOpSucceeds(), TEXT("Reducer does not hold NoOpSucceeds!"));
        return Data.Get<FNoOpSucceedsArgs>();
    }

    static FReducer SendScheduledMessage(const FSendScheduledMessageArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::SendScheduledMessage;
        Out.Data.Set<FSendScheduledMessageArgs>(Value);
        Out.ReducerName = TEXT("send_scheduled_message");
        return Out;
    }

    FORCEINLINE bool IsSendScheduledMessage() const { return Tag == EReducerTag::SendScheduledMessage; }
    FORCEINLINE FSendScheduledMessageArgs GetAsSendScheduledMessage() const
    {
        ensureMsgf(IsSendScheduledMessage(), TEXT("Reducer does not hold SendScheduledMessage!"));
        return Data.Get<FSendScheduledMessageArgs>();
    }

    static FReducer UpdateIndexedSimpleEnum(const FUpdateIndexedSimpleEnumArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateIndexedSimpleEnum;
        Out.Data.Set<FUpdateIndexedSimpleEnumArgs>(Value);
        Out.ReducerName = TEXT("update_indexed_simple_enum");
        return Out;
    }

    FORCEINLINE bool IsUpdateIndexedSimpleEnum() const { return Tag == EReducerTag::UpdateIndexedSimpleEnum; }
    FORCEINLINE FUpdateIndexedSimpleEnumArgs GetAsUpdateIndexedSimpleEnum() const
    {
        ensureMsgf(IsUpdateIndexedSimpleEnum(), TEXT("Reducer does not hold UpdateIndexedSimpleEnum!"));
        return Data.Get<FUpdateIndexedSimpleEnumArgs>();
    }

    static FReducer UpdatePkBool(const FUpdatePkBoolArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkBool;
        Out.Data.Set<FUpdatePkBoolArgs>(Value);
        Out.ReducerName = TEXT("update_pk_bool");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkBool() const { return Tag == EReducerTag::UpdatePkBool; }
    FORCEINLINE FUpdatePkBoolArgs GetAsUpdatePkBool() const
    {
        ensureMsgf(IsUpdatePkBool(), TEXT("Reducer does not hold UpdatePkBool!"));
        return Data.Get<FUpdatePkBoolArgs>();
    }

    static FReducer UpdatePkConnectionId(const FUpdatePkConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkConnectionId;
        Out.Data.Set<FUpdatePkConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("update_pk_connection_id");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkConnectionId() const { return Tag == EReducerTag::UpdatePkConnectionId; }
    FORCEINLINE FUpdatePkConnectionIdArgs GetAsUpdatePkConnectionId() const
    {
        ensureMsgf(IsUpdatePkConnectionId(), TEXT("Reducer does not hold UpdatePkConnectionId!"));
        return Data.Get<FUpdatePkConnectionIdArgs>();
    }

    static FReducer UpdatePkI128(const FUpdatePkI128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkI128;
        Out.Data.Set<FUpdatePkI128Args>(Value);
        Out.ReducerName = TEXT("update_pk_i128");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkI128() const { return Tag == EReducerTag::UpdatePkI128; }
    FORCEINLINE FUpdatePkI128Args GetAsUpdatePkI128() const
    {
        ensureMsgf(IsUpdatePkI128(), TEXT("Reducer does not hold UpdatePkI128!"));
        return Data.Get<FUpdatePkI128Args>();
    }

    static FReducer UpdatePkI16(const FUpdatePkI16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkI16;
        Out.Data.Set<FUpdatePkI16Args>(Value);
        Out.ReducerName = TEXT("update_pk_i16");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkI16() const { return Tag == EReducerTag::UpdatePkI16; }
    FORCEINLINE FUpdatePkI16Args GetAsUpdatePkI16() const
    {
        ensureMsgf(IsUpdatePkI16(), TEXT("Reducer does not hold UpdatePkI16!"));
        return Data.Get<FUpdatePkI16Args>();
    }

    static FReducer UpdatePkI256(const FUpdatePkI256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkI256;
        Out.Data.Set<FUpdatePkI256Args>(Value);
        Out.ReducerName = TEXT("update_pk_i256");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkI256() const { return Tag == EReducerTag::UpdatePkI256; }
    FORCEINLINE FUpdatePkI256Args GetAsUpdatePkI256() const
    {
        ensureMsgf(IsUpdatePkI256(), TEXT("Reducer does not hold UpdatePkI256!"));
        return Data.Get<FUpdatePkI256Args>();
    }

    static FReducer UpdatePkI32(const FUpdatePkI32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkI32;
        Out.Data.Set<FUpdatePkI32Args>(Value);
        Out.ReducerName = TEXT("update_pk_i32");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkI32() const { return Tag == EReducerTag::UpdatePkI32; }
    FORCEINLINE FUpdatePkI32Args GetAsUpdatePkI32() const
    {
        ensureMsgf(IsUpdatePkI32(), TEXT("Reducer does not hold UpdatePkI32!"));
        return Data.Get<FUpdatePkI32Args>();
    }

    static FReducer UpdatePkI64(const FUpdatePkI64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkI64;
        Out.Data.Set<FUpdatePkI64Args>(Value);
        Out.ReducerName = TEXT("update_pk_i64");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkI64() const { return Tag == EReducerTag::UpdatePkI64; }
    FORCEINLINE FUpdatePkI64Args GetAsUpdatePkI64() const
    {
        ensureMsgf(IsUpdatePkI64(), TEXT("Reducer does not hold UpdatePkI64!"));
        return Data.Get<FUpdatePkI64Args>();
    }

    static FReducer UpdatePkI8(const FUpdatePkI8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkI8;
        Out.Data.Set<FUpdatePkI8Args>(Value);
        Out.ReducerName = TEXT("update_pk_i8");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkI8() const { return Tag == EReducerTag::UpdatePkI8; }
    FORCEINLINE FUpdatePkI8Args GetAsUpdatePkI8() const
    {
        ensureMsgf(IsUpdatePkI8(), TEXT("Reducer does not hold UpdatePkI8!"));
        return Data.Get<FUpdatePkI8Args>();
    }

    static FReducer UpdatePkIdentity(const FUpdatePkIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkIdentity;
        Out.Data.Set<FUpdatePkIdentityArgs>(Value);
        Out.ReducerName = TEXT("update_pk_identity");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkIdentity() const { return Tag == EReducerTag::UpdatePkIdentity; }
    FORCEINLINE FUpdatePkIdentityArgs GetAsUpdatePkIdentity() const
    {
        ensureMsgf(IsUpdatePkIdentity(), TEXT("Reducer does not hold UpdatePkIdentity!"));
        return Data.Get<FUpdatePkIdentityArgs>();
    }

    static FReducer UpdatePkSimpleEnum(const FUpdatePkSimpleEnumArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkSimpleEnum;
        Out.Data.Set<FUpdatePkSimpleEnumArgs>(Value);
        Out.ReducerName = TEXT("update_pk_simple_enum");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkSimpleEnum() const { return Tag == EReducerTag::UpdatePkSimpleEnum; }
    FORCEINLINE FUpdatePkSimpleEnumArgs GetAsUpdatePkSimpleEnum() const
    {
        ensureMsgf(IsUpdatePkSimpleEnum(), TEXT("Reducer does not hold UpdatePkSimpleEnum!"));
        return Data.Get<FUpdatePkSimpleEnumArgs>();
    }

    static FReducer UpdatePkString(const FUpdatePkStringArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkString;
        Out.Data.Set<FUpdatePkStringArgs>(Value);
        Out.ReducerName = TEXT("update_pk_string");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkString() const { return Tag == EReducerTag::UpdatePkString; }
    FORCEINLINE FUpdatePkStringArgs GetAsUpdatePkString() const
    {
        ensureMsgf(IsUpdatePkString(), TEXT("Reducer does not hold UpdatePkString!"));
        return Data.Get<FUpdatePkStringArgs>();
    }

    static FReducer UpdatePkU128(const FUpdatePkU128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkU128;
        Out.Data.Set<FUpdatePkU128Args>(Value);
        Out.ReducerName = TEXT("update_pk_u128");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkU128() const { return Tag == EReducerTag::UpdatePkU128; }
    FORCEINLINE FUpdatePkU128Args GetAsUpdatePkU128() const
    {
        ensureMsgf(IsUpdatePkU128(), TEXT("Reducer does not hold UpdatePkU128!"));
        return Data.Get<FUpdatePkU128Args>();
    }

    static FReducer UpdatePkU16(const FUpdatePkU16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkU16;
        Out.Data.Set<FUpdatePkU16Args>(Value);
        Out.ReducerName = TEXT("update_pk_u16");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkU16() const { return Tag == EReducerTag::UpdatePkU16; }
    FORCEINLINE FUpdatePkU16Args GetAsUpdatePkU16() const
    {
        ensureMsgf(IsUpdatePkU16(), TEXT("Reducer does not hold UpdatePkU16!"));
        return Data.Get<FUpdatePkU16Args>();
    }

    static FReducer UpdatePkU256(const FUpdatePkU256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkU256;
        Out.Data.Set<FUpdatePkU256Args>(Value);
        Out.ReducerName = TEXT("update_pk_u256");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkU256() const { return Tag == EReducerTag::UpdatePkU256; }
    FORCEINLINE FUpdatePkU256Args GetAsUpdatePkU256() const
    {
        ensureMsgf(IsUpdatePkU256(), TEXT("Reducer does not hold UpdatePkU256!"));
        return Data.Get<FUpdatePkU256Args>();
    }

    static FReducer UpdatePkU32(const FUpdatePkU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkU32;
        Out.Data.Set<FUpdatePkU32Args>(Value);
        Out.ReducerName = TEXT("update_pk_u32");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkU32() const { return Tag == EReducerTag::UpdatePkU32; }
    FORCEINLINE FUpdatePkU32Args GetAsUpdatePkU32() const
    {
        ensureMsgf(IsUpdatePkU32(), TEXT("Reducer does not hold UpdatePkU32!"));
        return Data.Get<FUpdatePkU32Args>();
    }

    static FReducer UpdatePkU32Two(const FUpdatePkU32TwoArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkU32Two;
        Out.Data.Set<FUpdatePkU32TwoArgs>(Value);
        Out.ReducerName = TEXT("update_pk_u32_two");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkU32Two() const { return Tag == EReducerTag::UpdatePkU32Two; }
    FORCEINLINE FUpdatePkU32TwoArgs GetAsUpdatePkU32Two() const
    {
        ensureMsgf(IsUpdatePkU32Two(), TEXT("Reducer does not hold UpdatePkU32Two!"));
        return Data.Get<FUpdatePkU32TwoArgs>();
    }

    static FReducer UpdatePkU64(const FUpdatePkU64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkU64;
        Out.Data.Set<FUpdatePkU64Args>(Value);
        Out.ReducerName = TEXT("update_pk_u64");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkU64() const { return Tag == EReducerTag::UpdatePkU64; }
    FORCEINLINE FUpdatePkU64Args GetAsUpdatePkU64() const
    {
        ensureMsgf(IsUpdatePkU64(), TEXT("Reducer does not hold UpdatePkU64!"));
        return Data.Get<FUpdatePkU64Args>();
    }

    static FReducer UpdatePkU8(const FUpdatePkU8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdatePkU8;
        Out.Data.Set<FUpdatePkU8Args>(Value);
        Out.ReducerName = TEXT("update_pk_u8");
        return Out;
    }

    FORCEINLINE bool IsUpdatePkU8() const { return Tag == EReducerTag::UpdatePkU8; }
    FORCEINLINE FUpdatePkU8Args GetAsUpdatePkU8() const
    {
        ensureMsgf(IsUpdatePkU8(), TEXT("Reducer does not hold UpdatePkU8!"));
        return Data.Get<FUpdatePkU8Args>();
    }

    static FReducer UpdateUniqueBool(const FUpdateUniqueBoolArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueBool;
        Out.Data.Set<FUpdateUniqueBoolArgs>(Value);
        Out.ReducerName = TEXT("update_unique_bool");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueBool() const { return Tag == EReducerTag::UpdateUniqueBool; }
    FORCEINLINE FUpdateUniqueBoolArgs GetAsUpdateUniqueBool() const
    {
        ensureMsgf(IsUpdateUniqueBool(), TEXT("Reducer does not hold UpdateUniqueBool!"));
        return Data.Get<FUpdateUniqueBoolArgs>();
    }

    static FReducer UpdateUniqueConnectionId(const FUpdateUniqueConnectionIdArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueConnectionId;
        Out.Data.Set<FUpdateUniqueConnectionIdArgs>(Value);
        Out.ReducerName = TEXT("update_unique_connection_id");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueConnectionId() const { return Tag == EReducerTag::UpdateUniqueConnectionId; }
    FORCEINLINE FUpdateUniqueConnectionIdArgs GetAsUpdateUniqueConnectionId() const
    {
        ensureMsgf(IsUpdateUniqueConnectionId(), TEXT("Reducer does not hold UpdateUniqueConnectionId!"));
        return Data.Get<FUpdateUniqueConnectionIdArgs>();
    }

    static FReducer UpdateUniqueI128(const FUpdateUniqueI128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueI128;
        Out.Data.Set<FUpdateUniqueI128Args>(Value);
        Out.ReducerName = TEXT("update_unique_i128");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueI128() const { return Tag == EReducerTag::UpdateUniqueI128; }
    FORCEINLINE FUpdateUniqueI128Args GetAsUpdateUniqueI128() const
    {
        ensureMsgf(IsUpdateUniqueI128(), TEXT("Reducer does not hold UpdateUniqueI128!"));
        return Data.Get<FUpdateUniqueI128Args>();
    }

    static FReducer UpdateUniqueI16(const FUpdateUniqueI16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueI16;
        Out.Data.Set<FUpdateUniqueI16Args>(Value);
        Out.ReducerName = TEXT("update_unique_i16");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueI16() const { return Tag == EReducerTag::UpdateUniqueI16; }
    FORCEINLINE FUpdateUniqueI16Args GetAsUpdateUniqueI16() const
    {
        ensureMsgf(IsUpdateUniqueI16(), TEXT("Reducer does not hold UpdateUniqueI16!"));
        return Data.Get<FUpdateUniqueI16Args>();
    }

    static FReducer UpdateUniqueI256(const FUpdateUniqueI256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueI256;
        Out.Data.Set<FUpdateUniqueI256Args>(Value);
        Out.ReducerName = TEXT("update_unique_i256");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueI256() const { return Tag == EReducerTag::UpdateUniqueI256; }
    FORCEINLINE FUpdateUniqueI256Args GetAsUpdateUniqueI256() const
    {
        ensureMsgf(IsUpdateUniqueI256(), TEXT("Reducer does not hold UpdateUniqueI256!"));
        return Data.Get<FUpdateUniqueI256Args>();
    }

    static FReducer UpdateUniqueI32(const FUpdateUniqueI32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueI32;
        Out.Data.Set<FUpdateUniqueI32Args>(Value);
        Out.ReducerName = TEXT("update_unique_i32");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueI32() const { return Tag == EReducerTag::UpdateUniqueI32; }
    FORCEINLINE FUpdateUniqueI32Args GetAsUpdateUniqueI32() const
    {
        ensureMsgf(IsUpdateUniqueI32(), TEXT("Reducer does not hold UpdateUniqueI32!"));
        return Data.Get<FUpdateUniqueI32Args>();
    }

    static FReducer UpdateUniqueI64(const FUpdateUniqueI64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueI64;
        Out.Data.Set<FUpdateUniqueI64Args>(Value);
        Out.ReducerName = TEXT("update_unique_i64");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueI64() const { return Tag == EReducerTag::UpdateUniqueI64; }
    FORCEINLINE FUpdateUniqueI64Args GetAsUpdateUniqueI64() const
    {
        ensureMsgf(IsUpdateUniqueI64(), TEXT("Reducer does not hold UpdateUniqueI64!"));
        return Data.Get<FUpdateUniqueI64Args>();
    }

    static FReducer UpdateUniqueI8(const FUpdateUniqueI8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueI8;
        Out.Data.Set<FUpdateUniqueI8Args>(Value);
        Out.ReducerName = TEXT("update_unique_i8");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueI8() const { return Tag == EReducerTag::UpdateUniqueI8; }
    FORCEINLINE FUpdateUniqueI8Args GetAsUpdateUniqueI8() const
    {
        ensureMsgf(IsUpdateUniqueI8(), TEXT("Reducer does not hold UpdateUniqueI8!"));
        return Data.Get<FUpdateUniqueI8Args>();
    }

    static FReducer UpdateUniqueIdentity(const FUpdateUniqueIdentityArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueIdentity;
        Out.Data.Set<FUpdateUniqueIdentityArgs>(Value);
        Out.ReducerName = TEXT("update_unique_identity");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueIdentity() const { return Tag == EReducerTag::UpdateUniqueIdentity; }
    FORCEINLINE FUpdateUniqueIdentityArgs GetAsUpdateUniqueIdentity() const
    {
        ensureMsgf(IsUpdateUniqueIdentity(), TEXT("Reducer does not hold UpdateUniqueIdentity!"));
        return Data.Get<FUpdateUniqueIdentityArgs>();
    }

    static FReducer UpdateUniqueString(const FUpdateUniqueStringArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueString;
        Out.Data.Set<FUpdateUniqueStringArgs>(Value);
        Out.ReducerName = TEXT("update_unique_string");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueString() const { return Tag == EReducerTag::UpdateUniqueString; }
    FORCEINLINE FUpdateUniqueStringArgs GetAsUpdateUniqueString() const
    {
        ensureMsgf(IsUpdateUniqueString(), TEXT("Reducer does not hold UpdateUniqueString!"));
        return Data.Get<FUpdateUniqueStringArgs>();
    }

    static FReducer UpdateUniqueU128(const FUpdateUniqueU128Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueU128;
        Out.Data.Set<FUpdateUniqueU128Args>(Value);
        Out.ReducerName = TEXT("update_unique_u128");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueU128() const { return Tag == EReducerTag::UpdateUniqueU128; }
    FORCEINLINE FUpdateUniqueU128Args GetAsUpdateUniqueU128() const
    {
        ensureMsgf(IsUpdateUniqueU128(), TEXT("Reducer does not hold UpdateUniqueU128!"));
        return Data.Get<FUpdateUniqueU128Args>();
    }

    static FReducer UpdateUniqueU16(const FUpdateUniqueU16Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueU16;
        Out.Data.Set<FUpdateUniqueU16Args>(Value);
        Out.ReducerName = TEXT("update_unique_u16");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueU16() const { return Tag == EReducerTag::UpdateUniqueU16; }
    FORCEINLINE FUpdateUniqueU16Args GetAsUpdateUniqueU16() const
    {
        ensureMsgf(IsUpdateUniqueU16(), TEXT("Reducer does not hold UpdateUniqueU16!"));
        return Data.Get<FUpdateUniqueU16Args>();
    }

    static FReducer UpdateUniqueU256(const FUpdateUniqueU256Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueU256;
        Out.Data.Set<FUpdateUniqueU256Args>(Value);
        Out.ReducerName = TEXT("update_unique_u256");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueU256() const { return Tag == EReducerTag::UpdateUniqueU256; }
    FORCEINLINE FUpdateUniqueU256Args GetAsUpdateUniqueU256() const
    {
        ensureMsgf(IsUpdateUniqueU256(), TEXT("Reducer does not hold UpdateUniqueU256!"));
        return Data.Get<FUpdateUniqueU256Args>();
    }

    static FReducer UpdateUniqueU32(const FUpdateUniqueU32Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueU32;
        Out.Data.Set<FUpdateUniqueU32Args>(Value);
        Out.ReducerName = TEXT("update_unique_u32");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueU32() const { return Tag == EReducerTag::UpdateUniqueU32; }
    FORCEINLINE FUpdateUniqueU32Args GetAsUpdateUniqueU32() const
    {
        ensureMsgf(IsUpdateUniqueU32(), TEXT("Reducer does not hold UpdateUniqueU32!"));
        return Data.Get<FUpdateUniqueU32Args>();
    }

    static FReducer UpdateUniqueU64(const FUpdateUniqueU64Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueU64;
        Out.Data.Set<FUpdateUniqueU64Args>(Value);
        Out.ReducerName = TEXT("update_unique_u64");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueU64() const { return Tag == EReducerTag::UpdateUniqueU64; }
    FORCEINLINE FUpdateUniqueU64Args GetAsUpdateUniqueU64() const
    {
        ensureMsgf(IsUpdateUniqueU64(), TEXT("Reducer does not hold UpdateUniqueU64!"));
        return Data.Get<FUpdateUniqueU64Args>();
    }

    static FReducer UpdateUniqueU8(const FUpdateUniqueU8Args& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::UpdateUniqueU8;
        Out.Data.Set<FUpdateUniqueU8Args>(Value);
        Out.ReducerName = TEXT("update_unique_u8");
        return Out;
    }

    FORCEINLINE bool IsUpdateUniqueU8() const { return Tag == EReducerTag::UpdateUniqueU8; }
    FORCEINLINE FUpdateUniqueU8Args GetAsUpdateUniqueU8() const
    {
        ensureMsgf(IsUpdateUniqueU8(), TEXT("Reducer does not hold UpdateUniqueU8!"));
        return Data.Get<FUpdateUniqueU8Args>();
    }

    FORCEINLINE bool operator==(const FReducer& Other) const
    {
        if (Tag != Other.Tag || ReducerId != Other.ReducerId || RequestId != Other.RequestId || ReducerName != Other.ReducerName) return false;
        switch (Tag)
        {
        case EReducerTag::DeleteFromBtreeU32:
            return GetAsDeleteFromBtreeU32() == Other.GetAsDeleteFromBtreeU32();
        case EReducerTag::DeleteLargeTable:
            return GetAsDeleteLargeTable() == Other.GetAsDeleteLargeTable();
        case EReducerTag::DeletePkBool:
            return GetAsDeletePkBool() == Other.GetAsDeletePkBool();
        case EReducerTag::DeletePkConnectionId:
            return GetAsDeletePkConnectionId() == Other.GetAsDeletePkConnectionId();
        case EReducerTag::DeletePkI128:
            return GetAsDeletePkI128() == Other.GetAsDeletePkI128();
        case EReducerTag::DeletePkI16:
            return GetAsDeletePkI16() == Other.GetAsDeletePkI16();
        case EReducerTag::DeletePkI256:
            return GetAsDeletePkI256() == Other.GetAsDeletePkI256();
        case EReducerTag::DeletePkI32:
            return GetAsDeletePkI32() == Other.GetAsDeletePkI32();
        case EReducerTag::DeletePkI64:
            return GetAsDeletePkI64() == Other.GetAsDeletePkI64();
        case EReducerTag::DeletePkI8:
            return GetAsDeletePkI8() == Other.GetAsDeletePkI8();
        case EReducerTag::DeletePkIdentity:
            return GetAsDeletePkIdentity() == Other.GetAsDeletePkIdentity();
        case EReducerTag::DeletePkString:
            return GetAsDeletePkString() == Other.GetAsDeletePkString();
        case EReducerTag::DeletePkU128:
            return GetAsDeletePkU128() == Other.GetAsDeletePkU128();
        case EReducerTag::DeletePkU16:
            return GetAsDeletePkU16() == Other.GetAsDeletePkU16();
        case EReducerTag::DeletePkU256:
            return GetAsDeletePkU256() == Other.GetAsDeletePkU256();
        case EReducerTag::DeletePkU32:
            return GetAsDeletePkU32() == Other.GetAsDeletePkU32();
        case EReducerTag::DeletePkU32InsertPkU32Two:
            return GetAsDeletePkU32InsertPkU32Two() == Other.GetAsDeletePkU32InsertPkU32Two();
        case EReducerTag::DeletePkU32Two:
            return GetAsDeletePkU32Two() == Other.GetAsDeletePkU32Two();
        case EReducerTag::DeletePkU64:
            return GetAsDeletePkU64() == Other.GetAsDeletePkU64();
        case EReducerTag::DeletePkU8:
            return GetAsDeletePkU8() == Other.GetAsDeletePkU8();
        case EReducerTag::DeleteUniqueBool:
            return GetAsDeleteUniqueBool() == Other.GetAsDeleteUniqueBool();
        case EReducerTag::DeleteUniqueConnectionId:
            return GetAsDeleteUniqueConnectionId() == Other.GetAsDeleteUniqueConnectionId();
        case EReducerTag::DeleteUniqueI128:
            return GetAsDeleteUniqueI128() == Other.GetAsDeleteUniqueI128();
        case EReducerTag::DeleteUniqueI16:
            return GetAsDeleteUniqueI16() == Other.GetAsDeleteUniqueI16();
        case EReducerTag::DeleteUniqueI256:
            return GetAsDeleteUniqueI256() == Other.GetAsDeleteUniqueI256();
        case EReducerTag::DeleteUniqueI32:
            return GetAsDeleteUniqueI32() == Other.GetAsDeleteUniqueI32();
        case EReducerTag::DeleteUniqueI64:
            return GetAsDeleteUniqueI64() == Other.GetAsDeleteUniqueI64();
        case EReducerTag::DeleteUniqueI8:
            return GetAsDeleteUniqueI8() == Other.GetAsDeleteUniqueI8();
        case EReducerTag::DeleteUniqueIdentity:
            return GetAsDeleteUniqueIdentity() == Other.GetAsDeleteUniqueIdentity();
        case EReducerTag::DeleteUniqueString:
            return GetAsDeleteUniqueString() == Other.GetAsDeleteUniqueString();
        case EReducerTag::DeleteUniqueU128:
            return GetAsDeleteUniqueU128() == Other.GetAsDeleteUniqueU128();
        case EReducerTag::DeleteUniqueU16:
            return GetAsDeleteUniqueU16() == Other.GetAsDeleteUniqueU16();
        case EReducerTag::DeleteUniqueU256:
            return GetAsDeleteUniqueU256() == Other.GetAsDeleteUniqueU256();
        case EReducerTag::DeleteUniqueU32:
            return GetAsDeleteUniqueU32() == Other.GetAsDeleteUniqueU32();
        case EReducerTag::DeleteUniqueU64:
            return GetAsDeleteUniqueU64() == Other.GetAsDeleteUniqueU64();
        case EReducerTag::DeleteUniqueU8:
            return GetAsDeleteUniqueU8() == Other.GetAsDeleteUniqueU8();
        case EReducerTag::InsertCallTimestamp:
            return GetAsInsertCallTimestamp() == Other.GetAsInsertCallTimestamp();
        case EReducerTag::InsertCallerOneConnectionId:
            return GetAsInsertCallerOneConnectionId() == Other.GetAsInsertCallerOneConnectionId();
        case EReducerTag::InsertCallerOneIdentity:
            return GetAsInsertCallerOneIdentity() == Other.GetAsInsertCallerOneIdentity();
        case EReducerTag::InsertCallerPkConnectionId:
            return GetAsInsertCallerPkConnectionId() == Other.GetAsInsertCallerPkConnectionId();
        case EReducerTag::InsertCallerPkIdentity:
            return GetAsInsertCallerPkIdentity() == Other.GetAsInsertCallerPkIdentity();
        case EReducerTag::InsertCallerUniqueConnectionId:
            return GetAsInsertCallerUniqueConnectionId() == Other.GetAsInsertCallerUniqueConnectionId();
        case EReducerTag::InsertCallerUniqueIdentity:
            return GetAsInsertCallerUniqueIdentity() == Other.GetAsInsertCallerUniqueIdentity();
        case EReducerTag::InsertCallerVecConnectionId:
            return GetAsInsertCallerVecConnectionId() == Other.GetAsInsertCallerVecConnectionId();
        case EReducerTag::InsertCallerVecIdentity:
            return GetAsInsertCallerVecIdentity() == Other.GetAsInsertCallerVecIdentity();
        case EReducerTag::InsertIntoBtreeU32:
            return GetAsInsertIntoBtreeU32() == Other.GetAsInsertIntoBtreeU32();
        case EReducerTag::InsertIntoIndexedSimpleEnum:
            return GetAsInsertIntoIndexedSimpleEnum() == Other.GetAsInsertIntoIndexedSimpleEnum();
        case EReducerTag::InsertIntoPkBtreeU32:
            return GetAsInsertIntoPkBtreeU32() == Other.GetAsInsertIntoPkBtreeU32();
        case EReducerTag::InsertLargeTable:
            return GetAsInsertLargeTable() == Other.GetAsInsertLargeTable();
        case EReducerTag::InsertOneBool:
            return GetAsInsertOneBool() == Other.GetAsInsertOneBool();
        case EReducerTag::InsertOneByteStruct:
            return GetAsInsertOneByteStruct() == Other.GetAsInsertOneByteStruct();
        case EReducerTag::InsertOneConnectionId:
            return GetAsInsertOneConnectionId() == Other.GetAsInsertOneConnectionId();
        case EReducerTag::InsertOneEnumWithPayload:
            return GetAsInsertOneEnumWithPayload() == Other.GetAsInsertOneEnumWithPayload();
        case EReducerTag::InsertOneEveryPrimitiveStruct:
            return GetAsInsertOneEveryPrimitiveStruct() == Other.GetAsInsertOneEveryPrimitiveStruct();
        case EReducerTag::InsertOneEveryVecStruct:
            return GetAsInsertOneEveryVecStruct() == Other.GetAsInsertOneEveryVecStruct();
        case EReducerTag::InsertOneF32:
            return GetAsInsertOneF32() == Other.GetAsInsertOneF32();
        case EReducerTag::InsertOneF64:
            return GetAsInsertOneF64() == Other.GetAsInsertOneF64();
        case EReducerTag::InsertOneI128:
            return GetAsInsertOneI128() == Other.GetAsInsertOneI128();
        case EReducerTag::InsertOneI16:
            return GetAsInsertOneI16() == Other.GetAsInsertOneI16();
        case EReducerTag::InsertOneI256:
            return GetAsInsertOneI256() == Other.GetAsInsertOneI256();
        case EReducerTag::InsertOneI32:
            return GetAsInsertOneI32() == Other.GetAsInsertOneI32();
        case EReducerTag::InsertOneI64:
            return GetAsInsertOneI64() == Other.GetAsInsertOneI64();
        case EReducerTag::InsertOneI8:
            return GetAsInsertOneI8() == Other.GetAsInsertOneI8();
        case EReducerTag::InsertOneIdentity:
            return GetAsInsertOneIdentity() == Other.GetAsInsertOneIdentity();
        case EReducerTag::InsertOneSimpleEnum:
            return GetAsInsertOneSimpleEnum() == Other.GetAsInsertOneSimpleEnum();
        case EReducerTag::InsertOneString:
            return GetAsInsertOneString() == Other.GetAsInsertOneString();
        case EReducerTag::InsertOneTimestamp:
            return GetAsInsertOneTimestamp() == Other.GetAsInsertOneTimestamp();
        case EReducerTag::InsertOneU128:
            return GetAsInsertOneU128() == Other.GetAsInsertOneU128();
        case EReducerTag::InsertOneU16:
            return GetAsInsertOneU16() == Other.GetAsInsertOneU16();
        case EReducerTag::InsertOneU256:
            return GetAsInsertOneU256() == Other.GetAsInsertOneU256();
        case EReducerTag::InsertOneU32:
            return GetAsInsertOneU32() == Other.GetAsInsertOneU32();
        case EReducerTag::InsertOneU64:
            return GetAsInsertOneU64() == Other.GetAsInsertOneU64();
        case EReducerTag::InsertOneU8:
            return GetAsInsertOneU8() == Other.GetAsInsertOneU8();
        case EReducerTag::InsertOneUnitStruct:
            return GetAsInsertOneUnitStruct() == Other.GetAsInsertOneUnitStruct();
        case EReducerTag::InsertOptionEveryPrimitiveStruct:
            return GetAsInsertOptionEveryPrimitiveStruct() == Other.GetAsInsertOptionEveryPrimitiveStruct();
        case EReducerTag::InsertOptionI32:
            return GetAsInsertOptionI32() == Other.GetAsInsertOptionI32();
        case EReducerTag::InsertOptionIdentity:
            return GetAsInsertOptionIdentity() == Other.GetAsInsertOptionIdentity();
        case EReducerTag::InsertOptionSimpleEnum:
            return GetAsInsertOptionSimpleEnum() == Other.GetAsInsertOptionSimpleEnum();
        case EReducerTag::InsertOptionString:
            return GetAsInsertOptionString() == Other.GetAsInsertOptionString();
        case EReducerTag::InsertOptionVecOptionI32:
            return GetAsInsertOptionVecOptionI32() == Other.GetAsInsertOptionVecOptionI32();
        case EReducerTag::InsertPkBool:
            return GetAsInsertPkBool() == Other.GetAsInsertPkBool();
        case EReducerTag::InsertPkConnectionId:
            return GetAsInsertPkConnectionId() == Other.GetAsInsertPkConnectionId();
        case EReducerTag::InsertPkI128:
            return GetAsInsertPkI128() == Other.GetAsInsertPkI128();
        case EReducerTag::InsertPkI16:
            return GetAsInsertPkI16() == Other.GetAsInsertPkI16();
        case EReducerTag::InsertPkI256:
            return GetAsInsertPkI256() == Other.GetAsInsertPkI256();
        case EReducerTag::InsertPkI32:
            return GetAsInsertPkI32() == Other.GetAsInsertPkI32();
        case EReducerTag::InsertPkI64:
            return GetAsInsertPkI64() == Other.GetAsInsertPkI64();
        case EReducerTag::InsertPkI8:
            return GetAsInsertPkI8() == Other.GetAsInsertPkI8();
        case EReducerTag::InsertPkIdentity:
            return GetAsInsertPkIdentity() == Other.GetAsInsertPkIdentity();
        case EReducerTag::InsertPkSimpleEnum:
            return GetAsInsertPkSimpleEnum() == Other.GetAsInsertPkSimpleEnum();
        case EReducerTag::InsertPkString:
            return GetAsInsertPkString() == Other.GetAsInsertPkString();
        case EReducerTag::InsertPkU128:
            return GetAsInsertPkU128() == Other.GetAsInsertPkU128();
        case EReducerTag::InsertPkU16:
            return GetAsInsertPkU16() == Other.GetAsInsertPkU16();
        case EReducerTag::InsertPkU256:
            return GetAsInsertPkU256() == Other.GetAsInsertPkU256();
        case EReducerTag::InsertPkU32:
            return GetAsInsertPkU32() == Other.GetAsInsertPkU32();
        case EReducerTag::InsertPkU32Two:
            return GetAsInsertPkU32Two() == Other.GetAsInsertPkU32Two();
        case EReducerTag::InsertPkU64:
            return GetAsInsertPkU64() == Other.GetAsInsertPkU64();
        case EReducerTag::InsertPkU8:
            return GetAsInsertPkU8() == Other.GetAsInsertPkU8();
        case EReducerTag::InsertPrimitivesAsStrings:
            return GetAsInsertPrimitivesAsStrings() == Other.GetAsInsertPrimitivesAsStrings();
        case EReducerTag::InsertTableHoldsTable:
            return GetAsInsertTableHoldsTable() == Other.GetAsInsertTableHoldsTable();
        case EReducerTag::InsertUniqueBool:
            return GetAsInsertUniqueBool() == Other.GetAsInsertUniqueBool();
        case EReducerTag::InsertUniqueConnectionId:
            return GetAsInsertUniqueConnectionId() == Other.GetAsInsertUniqueConnectionId();
        case EReducerTag::InsertUniqueI128:
            return GetAsInsertUniqueI128() == Other.GetAsInsertUniqueI128();
        case EReducerTag::InsertUniqueI16:
            return GetAsInsertUniqueI16() == Other.GetAsInsertUniqueI16();
        case EReducerTag::InsertUniqueI256:
            return GetAsInsertUniqueI256() == Other.GetAsInsertUniqueI256();
        case EReducerTag::InsertUniqueI32:
            return GetAsInsertUniqueI32() == Other.GetAsInsertUniqueI32();
        case EReducerTag::InsertUniqueI64:
            return GetAsInsertUniqueI64() == Other.GetAsInsertUniqueI64();
        case EReducerTag::InsertUniqueI8:
            return GetAsInsertUniqueI8() == Other.GetAsInsertUniqueI8();
        case EReducerTag::InsertUniqueIdentity:
            return GetAsInsertUniqueIdentity() == Other.GetAsInsertUniqueIdentity();
        case EReducerTag::InsertUniqueString:
            return GetAsInsertUniqueString() == Other.GetAsInsertUniqueString();
        case EReducerTag::InsertUniqueU128:
            return GetAsInsertUniqueU128() == Other.GetAsInsertUniqueU128();
        case EReducerTag::InsertUniqueU16:
            return GetAsInsertUniqueU16() == Other.GetAsInsertUniqueU16();
        case EReducerTag::InsertUniqueU256:
            return GetAsInsertUniqueU256() == Other.GetAsInsertUniqueU256();
        case EReducerTag::InsertUniqueU32:
            return GetAsInsertUniqueU32() == Other.GetAsInsertUniqueU32();
        case EReducerTag::InsertUniqueU32UpdatePkU32:
            return GetAsInsertUniqueU32UpdatePkU32() == Other.GetAsInsertUniqueU32UpdatePkU32();
        case EReducerTag::InsertUniqueU64:
            return GetAsInsertUniqueU64() == Other.GetAsInsertUniqueU64();
        case EReducerTag::InsertUniqueU8:
            return GetAsInsertUniqueU8() == Other.GetAsInsertUniqueU8();
        case EReducerTag::InsertUser:
            return GetAsInsertUser() == Other.GetAsInsertUser();
        case EReducerTag::InsertVecBool:
            return GetAsInsertVecBool() == Other.GetAsInsertVecBool();
        case EReducerTag::InsertVecByteStruct:
            return GetAsInsertVecByteStruct() == Other.GetAsInsertVecByteStruct();
        case EReducerTag::InsertVecConnectionId:
            return GetAsInsertVecConnectionId() == Other.GetAsInsertVecConnectionId();
        case EReducerTag::InsertVecEnumWithPayload:
            return GetAsInsertVecEnumWithPayload() == Other.GetAsInsertVecEnumWithPayload();
        case EReducerTag::InsertVecEveryPrimitiveStruct:
            return GetAsInsertVecEveryPrimitiveStruct() == Other.GetAsInsertVecEveryPrimitiveStruct();
        case EReducerTag::InsertVecEveryVecStruct:
            return GetAsInsertVecEveryVecStruct() == Other.GetAsInsertVecEveryVecStruct();
        case EReducerTag::InsertVecF32:
            return GetAsInsertVecF32() == Other.GetAsInsertVecF32();
        case EReducerTag::InsertVecF64:
            return GetAsInsertVecF64() == Other.GetAsInsertVecF64();
        case EReducerTag::InsertVecI128:
            return GetAsInsertVecI128() == Other.GetAsInsertVecI128();
        case EReducerTag::InsertVecI16:
            return GetAsInsertVecI16() == Other.GetAsInsertVecI16();
        case EReducerTag::InsertVecI256:
            return GetAsInsertVecI256() == Other.GetAsInsertVecI256();
        case EReducerTag::InsertVecI32:
            return GetAsInsertVecI32() == Other.GetAsInsertVecI32();
        case EReducerTag::InsertVecI64:
            return GetAsInsertVecI64() == Other.GetAsInsertVecI64();
        case EReducerTag::InsertVecI8:
            return GetAsInsertVecI8() == Other.GetAsInsertVecI8();
        case EReducerTag::InsertVecIdentity:
            return GetAsInsertVecIdentity() == Other.GetAsInsertVecIdentity();
        case EReducerTag::InsertVecSimpleEnum:
            return GetAsInsertVecSimpleEnum() == Other.GetAsInsertVecSimpleEnum();
        case EReducerTag::InsertVecString:
            return GetAsInsertVecString() == Other.GetAsInsertVecString();
        case EReducerTag::InsertVecTimestamp:
            return GetAsInsertVecTimestamp() == Other.GetAsInsertVecTimestamp();
        case EReducerTag::InsertVecU128:
            return GetAsInsertVecU128() == Other.GetAsInsertVecU128();
        case EReducerTag::InsertVecU16:
            return GetAsInsertVecU16() == Other.GetAsInsertVecU16();
        case EReducerTag::InsertVecU256:
            return GetAsInsertVecU256() == Other.GetAsInsertVecU256();
        case EReducerTag::InsertVecU32:
            return GetAsInsertVecU32() == Other.GetAsInsertVecU32();
        case EReducerTag::InsertVecU64:
            return GetAsInsertVecU64() == Other.GetAsInsertVecU64();
        case EReducerTag::InsertVecU8:
            return GetAsInsertVecU8() == Other.GetAsInsertVecU8();
        case EReducerTag::InsertVecUnitStruct:
            return GetAsInsertVecUnitStruct() == Other.GetAsInsertVecUnitStruct();
        case EReducerTag::NoOpSucceeds:
            return GetAsNoOpSucceeds() == Other.GetAsNoOpSucceeds();
        case EReducerTag::SendScheduledMessage:
            return GetAsSendScheduledMessage() == Other.GetAsSendScheduledMessage();
        case EReducerTag::UpdateIndexedSimpleEnum:
            return GetAsUpdateIndexedSimpleEnum() == Other.GetAsUpdateIndexedSimpleEnum();
        case EReducerTag::UpdatePkBool:
            return GetAsUpdatePkBool() == Other.GetAsUpdatePkBool();
        case EReducerTag::UpdatePkConnectionId:
            return GetAsUpdatePkConnectionId() == Other.GetAsUpdatePkConnectionId();
        case EReducerTag::UpdatePkI128:
            return GetAsUpdatePkI128() == Other.GetAsUpdatePkI128();
        case EReducerTag::UpdatePkI16:
            return GetAsUpdatePkI16() == Other.GetAsUpdatePkI16();
        case EReducerTag::UpdatePkI256:
            return GetAsUpdatePkI256() == Other.GetAsUpdatePkI256();
        case EReducerTag::UpdatePkI32:
            return GetAsUpdatePkI32() == Other.GetAsUpdatePkI32();
        case EReducerTag::UpdatePkI64:
            return GetAsUpdatePkI64() == Other.GetAsUpdatePkI64();
        case EReducerTag::UpdatePkI8:
            return GetAsUpdatePkI8() == Other.GetAsUpdatePkI8();
        case EReducerTag::UpdatePkIdentity:
            return GetAsUpdatePkIdentity() == Other.GetAsUpdatePkIdentity();
        case EReducerTag::UpdatePkSimpleEnum:
            return GetAsUpdatePkSimpleEnum() == Other.GetAsUpdatePkSimpleEnum();
        case EReducerTag::UpdatePkString:
            return GetAsUpdatePkString() == Other.GetAsUpdatePkString();
        case EReducerTag::UpdatePkU128:
            return GetAsUpdatePkU128() == Other.GetAsUpdatePkU128();
        case EReducerTag::UpdatePkU16:
            return GetAsUpdatePkU16() == Other.GetAsUpdatePkU16();
        case EReducerTag::UpdatePkU256:
            return GetAsUpdatePkU256() == Other.GetAsUpdatePkU256();
        case EReducerTag::UpdatePkU32:
            return GetAsUpdatePkU32() == Other.GetAsUpdatePkU32();
        case EReducerTag::UpdatePkU32Two:
            return GetAsUpdatePkU32Two() == Other.GetAsUpdatePkU32Two();
        case EReducerTag::UpdatePkU64:
            return GetAsUpdatePkU64() == Other.GetAsUpdatePkU64();
        case EReducerTag::UpdatePkU8:
            return GetAsUpdatePkU8() == Other.GetAsUpdatePkU8();
        case EReducerTag::UpdateUniqueBool:
            return GetAsUpdateUniqueBool() == Other.GetAsUpdateUniqueBool();
        case EReducerTag::UpdateUniqueConnectionId:
            return GetAsUpdateUniqueConnectionId() == Other.GetAsUpdateUniqueConnectionId();
        case EReducerTag::UpdateUniqueI128:
            return GetAsUpdateUniqueI128() == Other.GetAsUpdateUniqueI128();
        case EReducerTag::UpdateUniqueI16:
            return GetAsUpdateUniqueI16() == Other.GetAsUpdateUniqueI16();
        case EReducerTag::UpdateUniqueI256:
            return GetAsUpdateUniqueI256() == Other.GetAsUpdateUniqueI256();
        case EReducerTag::UpdateUniqueI32:
            return GetAsUpdateUniqueI32() == Other.GetAsUpdateUniqueI32();
        case EReducerTag::UpdateUniqueI64:
            return GetAsUpdateUniqueI64() == Other.GetAsUpdateUniqueI64();
        case EReducerTag::UpdateUniqueI8:
            return GetAsUpdateUniqueI8() == Other.GetAsUpdateUniqueI8();
        case EReducerTag::UpdateUniqueIdentity:
            return GetAsUpdateUniqueIdentity() == Other.GetAsUpdateUniqueIdentity();
        case EReducerTag::UpdateUniqueString:
            return GetAsUpdateUniqueString() == Other.GetAsUpdateUniqueString();
        case EReducerTag::UpdateUniqueU128:
            return GetAsUpdateUniqueU128() == Other.GetAsUpdateUniqueU128();
        case EReducerTag::UpdateUniqueU16:
            return GetAsUpdateUniqueU16() == Other.GetAsUpdateUniqueU16();
        case EReducerTag::UpdateUniqueU256:
            return GetAsUpdateUniqueU256() == Other.GetAsUpdateUniqueU256();
        case EReducerTag::UpdateUniqueU32:
            return GetAsUpdateUniqueU32() == Other.GetAsUpdateUniqueU32();
        case EReducerTag::UpdateUniqueU64:
            return GetAsUpdateUniqueU64() == Other.GetAsUpdateUniqueU64();
        case EReducerTag::UpdateUniqueU8:
            return GetAsUpdateUniqueU8() == Other.GetAsUpdateUniqueU8();
        default: return false;
        }
    }
    FORCEINLINE bool operator!=(const FReducer& Other) const { return !(*this == Other); }
};

UCLASS()
class TESTCLIENT_API UReducerBpLib : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

private:

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteFromBtreeU32(const FDeleteFromBtreeU32Args& Value) {
        return FReducer::DeleteFromBtreeU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteFromBtreeU32(const FReducer& Reducer) { return Reducer.IsDeleteFromBtreeU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteFromBtreeU32Args GetAsDeleteFromBtreeU32(const FReducer& Reducer) {
        return Reducer.GetAsDeleteFromBtreeU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteLargeTable(const FDeleteLargeTableArgs& Value) {
        return FReducer::DeleteLargeTable(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteLargeTable(const FReducer& Reducer) { return Reducer.IsDeleteLargeTable(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteLargeTableArgs GetAsDeleteLargeTable(const FReducer& Reducer) {
        return Reducer.GetAsDeleteLargeTable();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkBool(const FDeletePkBoolArgs& Value) {
        return FReducer::DeletePkBool(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkBool(const FReducer& Reducer) { return Reducer.IsDeletePkBool(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkBoolArgs GetAsDeletePkBool(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkBool();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkConnectionId(const FDeletePkConnectionIdArgs& Value) {
        return FReducer::DeletePkConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkConnectionId(const FReducer& Reducer) { return Reducer.IsDeletePkConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkConnectionIdArgs GetAsDeletePkConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkI128(const FDeletePkI128Args& Value) {
        return FReducer::DeletePkI128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkI128(const FReducer& Reducer) { return Reducer.IsDeletePkI128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkI128Args GetAsDeletePkI128(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkI128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkI16(const FDeletePkI16Args& Value) {
        return FReducer::DeletePkI16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkI16(const FReducer& Reducer) { return Reducer.IsDeletePkI16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkI16Args GetAsDeletePkI16(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkI16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkI256(const FDeletePkI256Args& Value) {
        return FReducer::DeletePkI256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkI256(const FReducer& Reducer) { return Reducer.IsDeletePkI256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkI256Args GetAsDeletePkI256(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkI256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkI32(const FDeletePkI32Args& Value) {
        return FReducer::DeletePkI32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkI32(const FReducer& Reducer) { return Reducer.IsDeletePkI32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkI32Args GetAsDeletePkI32(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkI32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkI64(const FDeletePkI64Args& Value) {
        return FReducer::DeletePkI64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkI64(const FReducer& Reducer) { return Reducer.IsDeletePkI64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkI64Args GetAsDeletePkI64(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkI64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkI8(const FDeletePkI8Args& Value) {
        return FReducer::DeletePkI8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkI8(const FReducer& Reducer) { return Reducer.IsDeletePkI8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkI8Args GetAsDeletePkI8(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkI8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkIdentity(const FDeletePkIdentityArgs& Value) {
        return FReducer::DeletePkIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkIdentity(const FReducer& Reducer) { return Reducer.IsDeletePkIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkIdentityArgs GetAsDeletePkIdentity(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkString(const FDeletePkStringArgs& Value) {
        return FReducer::DeletePkString(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkString(const FReducer& Reducer) { return Reducer.IsDeletePkString(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkStringArgs GetAsDeletePkString(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkString();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkU128(const FDeletePkU128Args& Value) {
        return FReducer::DeletePkU128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkU128(const FReducer& Reducer) { return Reducer.IsDeletePkU128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkU128Args GetAsDeletePkU128(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkU128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkU16(const FDeletePkU16Args& Value) {
        return FReducer::DeletePkU16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkU16(const FReducer& Reducer) { return Reducer.IsDeletePkU16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkU16Args GetAsDeletePkU16(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkU16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkU256(const FDeletePkU256Args& Value) {
        return FReducer::DeletePkU256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkU256(const FReducer& Reducer) { return Reducer.IsDeletePkU256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkU256Args GetAsDeletePkU256(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkU256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkU32(const FDeletePkU32Args& Value) {
        return FReducer::DeletePkU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkU32(const FReducer& Reducer) { return Reducer.IsDeletePkU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkU32Args GetAsDeletePkU32(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkU32InsertPkU32Two(const FDeletePkU32InsertPkU32TwoArgs& Value) {
        return FReducer::DeletePkU32InsertPkU32Two(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkU32InsertPkU32Two(const FReducer& Reducer) { return Reducer.IsDeletePkU32InsertPkU32Two(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkU32InsertPkU32TwoArgs GetAsDeletePkU32InsertPkU32Two(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkU32InsertPkU32Two();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkU32Two(const FDeletePkU32TwoArgs& Value) {
        return FReducer::DeletePkU32Two(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkU32Two(const FReducer& Reducer) { return Reducer.IsDeletePkU32Two(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkU32TwoArgs GetAsDeletePkU32Two(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkU32Two();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkU64(const FDeletePkU64Args& Value) {
        return FReducer::DeletePkU64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkU64(const FReducer& Reducer) { return Reducer.IsDeletePkU64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkU64Args GetAsDeletePkU64(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkU64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeletePkU8(const FDeletePkU8Args& Value) {
        return FReducer::DeletePkU8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeletePkU8(const FReducer& Reducer) { return Reducer.IsDeletePkU8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeletePkU8Args GetAsDeletePkU8(const FReducer& Reducer) {
        return Reducer.GetAsDeletePkU8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueBool(const FDeleteUniqueBoolArgs& Value) {
        return FReducer::DeleteUniqueBool(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueBool(const FReducer& Reducer) { return Reducer.IsDeleteUniqueBool(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueBoolArgs GetAsDeleteUniqueBool(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueBool();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueConnectionId(const FDeleteUniqueConnectionIdArgs& Value) {
        return FReducer::DeleteUniqueConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueConnectionId(const FReducer& Reducer) { return Reducer.IsDeleteUniqueConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueConnectionIdArgs GetAsDeleteUniqueConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueI128(const FDeleteUniqueI128Args& Value) {
        return FReducer::DeleteUniqueI128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueI128(const FReducer& Reducer) { return Reducer.IsDeleteUniqueI128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueI128Args GetAsDeleteUniqueI128(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueI128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueI16(const FDeleteUniqueI16Args& Value) {
        return FReducer::DeleteUniqueI16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueI16(const FReducer& Reducer) { return Reducer.IsDeleteUniqueI16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueI16Args GetAsDeleteUniqueI16(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueI16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueI256(const FDeleteUniqueI256Args& Value) {
        return FReducer::DeleteUniqueI256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueI256(const FReducer& Reducer) { return Reducer.IsDeleteUniqueI256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueI256Args GetAsDeleteUniqueI256(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueI256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueI32(const FDeleteUniqueI32Args& Value) {
        return FReducer::DeleteUniqueI32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueI32(const FReducer& Reducer) { return Reducer.IsDeleteUniqueI32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueI32Args GetAsDeleteUniqueI32(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueI32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueI64(const FDeleteUniqueI64Args& Value) {
        return FReducer::DeleteUniqueI64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueI64(const FReducer& Reducer) { return Reducer.IsDeleteUniqueI64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueI64Args GetAsDeleteUniqueI64(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueI64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueI8(const FDeleteUniqueI8Args& Value) {
        return FReducer::DeleteUniqueI8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueI8(const FReducer& Reducer) { return Reducer.IsDeleteUniqueI8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueI8Args GetAsDeleteUniqueI8(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueI8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueIdentity(const FDeleteUniqueIdentityArgs& Value) {
        return FReducer::DeleteUniqueIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueIdentity(const FReducer& Reducer) { return Reducer.IsDeleteUniqueIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueIdentityArgs GetAsDeleteUniqueIdentity(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueString(const FDeleteUniqueStringArgs& Value) {
        return FReducer::DeleteUniqueString(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueString(const FReducer& Reducer) { return Reducer.IsDeleteUniqueString(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueStringArgs GetAsDeleteUniqueString(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueString();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueU128(const FDeleteUniqueU128Args& Value) {
        return FReducer::DeleteUniqueU128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueU128(const FReducer& Reducer) { return Reducer.IsDeleteUniqueU128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueU128Args GetAsDeleteUniqueU128(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueU128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueU16(const FDeleteUniqueU16Args& Value) {
        return FReducer::DeleteUniqueU16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueU16(const FReducer& Reducer) { return Reducer.IsDeleteUniqueU16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueU16Args GetAsDeleteUniqueU16(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueU16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueU256(const FDeleteUniqueU256Args& Value) {
        return FReducer::DeleteUniqueU256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueU256(const FReducer& Reducer) { return Reducer.IsDeleteUniqueU256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueU256Args GetAsDeleteUniqueU256(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueU256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueU32(const FDeleteUniqueU32Args& Value) {
        return FReducer::DeleteUniqueU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueU32(const FReducer& Reducer) { return Reducer.IsDeleteUniqueU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueU32Args GetAsDeleteUniqueU32(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueU64(const FDeleteUniqueU64Args& Value) {
        return FReducer::DeleteUniqueU64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueU64(const FReducer& Reducer) { return Reducer.IsDeleteUniqueU64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueU64Args GetAsDeleteUniqueU64(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueU64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer DeleteUniqueU8(const FDeleteUniqueU8Args& Value) {
        return FReducer::DeleteUniqueU8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDeleteUniqueU8(const FReducer& Reducer) { return Reducer.IsDeleteUniqueU8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDeleteUniqueU8Args GetAsDeleteUniqueU8(const FReducer& Reducer) {
        return Reducer.GetAsDeleteUniqueU8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertCallTimestamp(const FInsertCallTimestampArgs& Value) {
        return FReducer::InsertCallTimestamp(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertCallTimestamp(const FReducer& Reducer) { return Reducer.IsInsertCallTimestamp(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertCallTimestampArgs GetAsInsertCallTimestamp(const FReducer& Reducer) {
        return Reducer.GetAsInsertCallTimestamp();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertCallerOneConnectionId(const FInsertCallerOneConnectionIdArgs& Value) {
        return FReducer::InsertCallerOneConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertCallerOneConnectionId(const FReducer& Reducer) { return Reducer.IsInsertCallerOneConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertCallerOneConnectionIdArgs GetAsInsertCallerOneConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsInsertCallerOneConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertCallerOneIdentity(const FInsertCallerOneIdentityArgs& Value) {
        return FReducer::InsertCallerOneIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertCallerOneIdentity(const FReducer& Reducer) { return Reducer.IsInsertCallerOneIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertCallerOneIdentityArgs GetAsInsertCallerOneIdentity(const FReducer& Reducer) {
        return Reducer.GetAsInsertCallerOneIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertCallerPkConnectionId(const FInsertCallerPkConnectionIdArgs& Value) {
        return FReducer::InsertCallerPkConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertCallerPkConnectionId(const FReducer& Reducer) { return Reducer.IsInsertCallerPkConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertCallerPkConnectionIdArgs GetAsInsertCallerPkConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsInsertCallerPkConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertCallerPkIdentity(const FInsertCallerPkIdentityArgs& Value) {
        return FReducer::InsertCallerPkIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertCallerPkIdentity(const FReducer& Reducer) { return Reducer.IsInsertCallerPkIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertCallerPkIdentityArgs GetAsInsertCallerPkIdentity(const FReducer& Reducer) {
        return Reducer.GetAsInsertCallerPkIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertCallerUniqueConnectionId(const FInsertCallerUniqueConnectionIdArgs& Value) {
        return FReducer::InsertCallerUniqueConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertCallerUniqueConnectionId(const FReducer& Reducer) { return Reducer.IsInsertCallerUniqueConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertCallerUniqueConnectionIdArgs GetAsInsertCallerUniqueConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsInsertCallerUniqueConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertCallerUniqueIdentity(const FInsertCallerUniqueIdentityArgs& Value) {
        return FReducer::InsertCallerUniqueIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertCallerUniqueIdentity(const FReducer& Reducer) { return Reducer.IsInsertCallerUniqueIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertCallerUniqueIdentityArgs GetAsInsertCallerUniqueIdentity(const FReducer& Reducer) {
        return Reducer.GetAsInsertCallerUniqueIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertCallerVecConnectionId(const FInsertCallerVecConnectionIdArgs& Value) {
        return FReducer::InsertCallerVecConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertCallerVecConnectionId(const FReducer& Reducer) { return Reducer.IsInsertCallerVecConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertCallerVecConnectionIdArgs GetAsInsertCallerVecConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsInsertCallerVecConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertCallerVecIdentity(const FInsertCallerVecIdentityArgs& Value) {
        return FReducer::InsertCallerVecIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertCallerVecIdentity(const FReducer& Reducer) { return Reducer.IsInsertCallerVecIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertCallerVecIdentityArgs GetAsInsertCallerVecIdentity(const FReducer& Reducer) {
        return Reducer.GetAsInsertCallerVecIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertIntoBtreeU32(const FInsertIntoBtreeU32Args& Value) {
        return FReducer::InsertIntoBtreeU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertIntoBtreeU32(const FReducer& Reducer) { return Reducer.IsInsertIntoBtreeU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertIntoBtreeU32Args GetAsInsertIntoBtreeU32(const FReducer& Reducer) {
        return Reducer.GetAsInsertIntoBtreeU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertIntoIndexedSimpleEnum(const FInsertIntoIndexedSimpleEnumArgs& Value) {
        return FReducer::InsertIntoIndexedSimpleEnum(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertIntoIndexedSimpleEnum(const FReducer& Reducer) { return Reducer.IsInsertIntoIndexedSimpleEnum(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertIntoIndexedSimpleEnumArgs GetAsInsertIntoIndexedSimpleEnum(const FReducer& Reducer) {
        return Reducer.GetAsInsertIntoIndexedSimpleEnum();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertIntoPkBtreeU32(const FInsertIntoPkBtreeU32Args& Value) {
        return FReducer::InsertIntoPkBtreeU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertIntoPkBtreeU32(const FReducer& Reducer) { return Reducer.IsInsertIntoPkBtreeU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertIntoPkBtreeU32Args GetAsInsertIntoPkBtreeU32(const FReducer& Reducer) {
        return Reducer.GetAsInsertIntoPkBtreeU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertLargeTable(const FInsertLargeTableArgs& Value) {
        return FReducer::InsertLargeTable(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertLargeTable(const FReducer& Reducer) { return Reducer.IsInsertLargeTable(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertLargeTableArgs GetAsInsertLargeTable(const FReducer& Reducer) {
        return Reducer.GetAsInsertLargeTable();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneBool(const FInsertOneBoolArgs& Value) {
        return FReducer::InsertOneBool(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneBool(const FReducer& Reducer) { return Reducer.IsInsertOneBool(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneBoolArgs GetAsInsertOneBool(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneBool();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneByteStruct(const FInsertOneByteStructArgs& Value) {
        return FReducer::InsertOneByteStruct(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneByteStruct(const FReducer& Reducer) { return Reducer.IsInsertOneByteStruct(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneByteStructArgs GetAsInsertOneByteStruct(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneByteStruct();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneConnectionId(const FInsertOneConnectionIdArgs& Value) {
        return FReducer::InsertOneConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneConnectionId(const FReducer& Reducer) { return Reducer.IsInsertOneConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneConnectionIdArgs GetAsInsertOneConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneEnumWithPayload(const FInsertOneEnumWithPayloadArgs& Value) {
        return FReducer::InsertOneEnumWithPayload(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneEnumWithPayload(const FReducer& Reducer) { return Reducer.IsInsertOneEnumWithPayload(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneEnumWithPayloadArgs GetAsInsertOneEnumWithPayload(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneEnumWithPayload();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneEveryPrimitiveStruct(const FInsertOneEveryPrimitiveStructArgs& Value) {
        return FReducer::InsertOneEveryPrimitiveStruct(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneEveryPrimitiveStruct(const FReducer& Reducer) { return Reducer.IsInsertOneEveryPrimitiveStruct(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneEveryPrimitiveStructArgs GetAsInsertOneEveryPrimitiveStruct(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneEveryPrimitiveStruct();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneEveryVecStruct(const FInsertOneEveryVecStructArgs& Value) {
        return FReducer::InsertOneEveryVecStruct(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneEveryVecStruct(const FReducer& Reducer) { return Reducer.IsInsertOneEveryVecStruct(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneEveryVecStructArgs GetAsInsertOneEveryVecStruct(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneEveryVecStruct();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneF32(const FInsertOneF32Args& Value) {
        return FReducer::InsertOneF32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneF32(const FReducer& Reducer) { return Reducer.IsInsertOneF32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneF32Args GetAsInsertOneF32(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneF32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneF64(const FInsertOneF64Args& Value) {
        return FReducer::InsertOneF64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneF64(const FReducer& Reducer) { return Reducer.IsInsertOneF64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneF64Args GetAsInsertOneF64(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneF64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneI128(const FInsertOneI128Args& Value) {
        return FReducer::InsertOneI128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneI128(const FReducer& Reducer) { return Reducer.IsInsertOneI128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneI128Args GetAsInsertOneI128(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneI128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneI16(const FInsertOneI16Args& Value) {
        return FReducer::InsertOneI16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneI16(const FReducer& Reducer) { return Reducer.IsInsertOneI16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneI16Args GetAsInsertOneI16(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneI16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneI256(const FInsertOneI256Args& Value) {
        return FReducer::InsertOneI256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneI256(const FReducer& Reducer) { return Reducer.IsInsertOneI256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneI256Args GetAsInsertOneI256(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneI256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneI32(const FInsertOneI32Args& Value) {
        return FReducer::InsertOneI32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneI32(const FReducer& Reducer) { return Reducer.IsInsertOneI32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneI32Args GetAsInsertOneI32(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneI32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneI64(const FInsertOneI64Args& Value) {
        return FReducer::InsertOneI64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneI64(const FReducer& Reducer) { return Reducer.IsInsertOneI64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneI64Args GetAsInsertOneI64(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneI64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneI8(const FInsertOneI8Args& Value) {
        return FReducer::InsertOneI8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneI8(const FReducer& Reducer) { return Reducer.IsInsertOneI8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneI8Args GetAsInsertOneI8(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneI8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneIdentity(const FInsertOneIdentityArgs& Value) {
        return FReducer::InsertOneIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneIdentity(const FReducer& Reducer) { return Reducer.IsInsertOneIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneIdentityArgs GetAsInsertOneIdentity(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneSimpleEnum(const FInsertOneSimpleEnumArgs& Value) {
        return FReducer::InsertOneSimpleEnum(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneSimpleEnum(const FReducer& Reducer) { return Reducer.IsInsertOneSimpleEnum(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneSimpleEnumArgs GetAsInsertOneSimpleEnum(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneSimpleEnum();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneString(const FInsertOneStringArgs& Value) {
        return FReducer::InsertOneString(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneString(const FReducer& Reducer) { return Reducer.IsInsertOneString(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneStringArgs GetAsInsertOneString(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneString();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneTimestamp(const FInsertOneTimestampArgs& Value) {
        return FReducer::InsertOneTimestamp(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneTimestamp(const FReducer& Reducer) { return Reducer.IsInsertOneTimestamp(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneTimestampArgs GetAsInsertOneTimestamp(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneTimestamp();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneU128(const FInsertOneU128Args& Value) {
        return FReducer::InsertOneU128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneU128(const FReducer& Reducer) { return Reducer.IsInsertOneU128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneU128Args GetAsInsertOneU128(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneU128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneU16(const FInsertOneU16Args& Value) {
        return FReducer::InsertOneU16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneU16(const FReducer& Reducer) { return Reducer.IsInsertOneU16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneU16Args GetAsInsertOneU16(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneU16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneU256(const FInsertOneU256Args& Value) {
        return FReducer::InsertOneU256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneU256(const FReducer& Reducer) { return Reducer.IsInsertOneU256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneU256Args GetAsInsertOneU256(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneU256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneU32(const FInsertOneU32Args& Value) {
        return FReducer::InsertOneU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneU32(const FReducer& Reducer) { return Reducer.IsInsertOneU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneU32Args GetAsInsertOneU32(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneU64(const FInsertOneU64Args& Value) {
        return FReducer::InsertOneU64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneU64(const FReducer& Reducer) { return Reducer.IsInsertOneU64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneU64Args GetAsInsertOneU64(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneU64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneU8(const FInsertOneU8Args& Value) {
        return FReducer::InsertOneU8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneU8(const FReducer& Reducer) { return Reducer.IsInsertOneU8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneU8Args GetAsInsertOneU8(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneU8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOneUnitStruct(const FInsertOneUnitStructArgs& Value) {
        return FReducer::InsertOneUnitStruct(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOneUnitStruct(const FReducer& Reducer) { return Reducer.IsInsertOneUnitStruct(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOneUnitStructArgs GetAsInsertOneUnitStruct(const FReducer& Reducer) {
        return Reducer.GetAsInsertOneUnitStruct();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOptionEveryPrimitiveStruct(const FInsertOptionEveryPrimitiveStructArgs& Value) {
        return FReducer::InsertOptionEveryPrimitiveStruct(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOptionEveryPrimitiveStruct(const FReducer& Reducer) { return Reducer.IsInsertOptionEveryPrimitiveStruct(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOptionEveryPrimitiveStructArgs GetAsInsertOptionEveryPrimitiveStruct(const FReducer& Reducer) {
        return Reducer.GetAsInsertOptionEveryPrimitiveStruct();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOptionI32(const FInsertOptionI32Args& Value) {
        return FReducer::InsertOptionI32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOptionI32(const FReducer& Reducer) { return Reducer.IsInsertOptionI32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOptionI32Args GetAsInsertOptionI32(const FReducer& Reducer) {
        return Reducer.GetAsInsertOptionI32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOptionIdentity(const FInsertOptionIdentityArgs& Value) {
        return FReducer::InsertOptionIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOptionIdentity(const FReducer& Reducer) { return Reducer.IsInsertOptionIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOptionIdentityArgs GetAsInsertOptionIdentity(const FReducer& Reducer) {
        return Reducer.GetAsInsertOptionIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOptionSimpleEnum(const FInsertOptionSimpleEnumArgs& Value) {
        return FReducer::InsertOptionSimpleEnum(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOptionSimpleEnum(const FReducer& Reducer) { return Reducer.IsInsertOptionSimpleEnum(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOptionSimpleEnumArgs GetAsInsertOptionSimpleEnum(const FReducer& Reducer) {
        return Reducer.GetAsInsertOptionSimpleEnum();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOptionString(const FInsertOptionStringArgs& Value) {
        return FReducer::InsertOptionString(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOptionString(const FReducer& Reducer) { return Reducer.IsInsertOptionString(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOptionStringArgs GetAsInsertOptionString(const FReducer& Reducer) {
        return Reducer.GetAsInsertOptionString();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertOptionVecOptionI32(const FInsertOptionVecOptionI32Args& Value) {
        return FReducer::InsertOptionVecOptionI32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertOptionVecOptionI32(const FReducer& Reducer) { return Reducer.IsInsertOptionVecOptionI32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertOptionVecOptionI32Args GetAsInsertOptionVecOptionI32(const FReducer& Reducer) {
        return Reducer.GetAsInsertOptionVecOptionI32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkBool(const FInsertPkBoolArgs& Value) {
        return FReducer::InsertPkBool(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkBool(const FReducer& Reducer) { return Reducer.IsInsertPkBool(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkBoolArgs GetAsInsertPkBool(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkBool();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkConnectionId(const FInsertPkConnectionIdArgs& Value) {
        return FReducer::InsertPkConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkConnectionId(const FReducer& Reducer) { return Reducer.IsInsertPkConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkConnectionIdArgs GetAsInsertPkConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkI128(const FInsertPkI128Args& Value) {
        return FReducer::InsertPkI128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkI128(const FReducer& Reducer) { return Reducer.IsInsertPkI128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkI128Args GetAsInsertPkI128(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkI128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkI16(const FInsertPkI16Args& Value) {
        return FReducer::InsertPkI16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkI16(const FReducer& Reducer) { return Reducer.IsInsertPkI16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkI16Args GetAsInsertPkI16(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkI16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkI256(const FInsertPkI256Args& Value) {
        return FReducer::InsertPkI256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkI256(const FReducer& Reducer) { return Reducer.IsInsertPkI256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkI256Args GetAsInsertPkI256(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkI256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkI32(const FInsertPkI32Args& Value) {
        return FReducer::InsertPkI32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkI32(const FReducer& Reducer) { return Reducer.IsInsertPkI32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkI32Args GetAsInsertPkI32(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkI32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkI64(const FInsertPkI64Args& Value) {
        return FReducer::InsertPkI64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkI64(const FReducer& Reducer) { return Reducer.IsInsertPkI64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkI64Args GetAsInsertPkI64(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkI64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkI8(const FInsertPkI8Args& Value) {
        return FReducer::InsertPkI8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkI8(const FReducer& Reducer) { return Reducer.IsInsertPkI8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkI8Args GetAsInsertPkI8(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkI8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkIdentity(const FInsertPkIdentityArgs& Value) {
        return FReducer::InsertPkIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkIdentity(const FReducer& Reducer) { return Reducer.IsInsertPkIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkIdentityArgs GetAsInsertPkIdentity(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkSimpleEnum(const FInsertPkSimpleEnumArgs& Value) {
        return FReducer::InsertPkSimpleEnum(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkSimpleEnum(const FReducer& Reducer) { return Reducer.IsInsertPkSimpleEnum(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkSimpleEnumArgs GetAsInsertPkSimpleEnum(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkSimpleEnum();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkString(const FInsertPkStringArgs& Value) {
        return FReducer::InsertPkString(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkString(const FReducer& Reducer) { return Reducer.IsInsertPkString(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkStringArgs GetAsInsertPkString(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkString();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkU128(const FInsertPkU128Args& Value) {
        return FReducer::InsertPkU128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkU128(const FReducer& Reducer) { return Reducer.IsInsertPkU128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkU128Args GetAsInsertPkU128(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkU128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkU16(const FInsertPkU16Args& Value) {
        return FReducer::InsertPkU16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkU16(const FReducer& Reducer) { return Reducer.IsInsertPkU16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkU16Args GetAsInsertPkU16(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkU16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkU256(const FInsertPkU256Args& Value) {
        return FReducer::InsertPkU256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkU256(const FReducer& Reducer) { return Reducer.IsInsertPkU256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkU256Args GetAsInsertPkU256(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkU256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkU32(const FInsertPkU32Args& Value) {
        return FReducer::InsertPkU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkU32(const FReducer& Reducer) { return Reducer.IsInsertPkU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkU32Args GetAsInsertPkU32(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkU32Two(const FInsertPkU32TwoArgs& Value) {
        return FReducer::InsertPkU32Two(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkU32Two(const FReducer& Reducer) { return Reducer.IsInsertPkU32Two(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkU32TwoArgs GetAsInsertPkU32Two(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkU32Two();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkU64(const FInsertPkU64Args& Value) {
        return FReducer::InsertPkU64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkU64(const FReducer& Reducer) { return Reducer.IsInsertPkU64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkU64Args GetAsInsertPkU64(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkU64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPkU8(const FInsertPkU8Args& Value) {
        return FReducer::InsertPkU8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPkU8(const FReducer& Reducer) { return Reducer.IsInsertPkU8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPkU8Args GetAsInsertPkU8(const FReducer& Reducer) {
        return Reducer.GetAsInsertPkU8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertPrimitivesAsStrings(const FInsertPrimitivesAsStringsArgs& Value) {
        return FReducer::InsertPrimitivesAsStrings(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertPrimitivesAsStrings(const FReducer& Reducer) { return Reducer.IsInsertPrimitivesAsStrings(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertPrimitivesAsStringsArgs GetAsInsertPrimitivesAsStrings(const FReducer& Reducer) {
        return Reducer.GetAsInsertPrimitivesAsStrings();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertTableHoldsTable(const FInsertTableHoldsTableArgs& Value) {
        return FReducer::InsertTableHoldsTable(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertTableHoldsTable(const FReducer& Reducer) { return Reducer.IsInsertTableHoldsTable(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertTableHoldsTableArgs GetAsInsertTableHoldsTable(const FReducer& Reducer) {
        return Reducer.GetAsInsertTableHoldsTable();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueBool(const FInsertUniqueBoolArgs& Value) {
        return FReducer::InsertUniqueBool(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueBool(const FReducer& Reducer) { return Reducer.IsInsertUniqueBool(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueBoolArgs GetAsInsertUniqueBool(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueBool();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueConnectionId(const FInsertUniqueConnectionIdArgs& Value) {
        return FReducer::InsertUniqueConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueConnectionId(const FReducer& Reducer) { return Reducer.IsInsertUniqueConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueConnectionIdArgs GetAsInsertUniqueConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueI128(const FInsertUniqueI128Args& Value) {
        return FReducer::InsertUniqueI128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueI128(const FReducer& Reducer) { return Reducer.IsInsertUniqueI128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueI128Args GetAsInsertUniqueI128(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueI128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueI16(const FInsertUniqueI16Args& Value) {
        return FReducer::InsertUniqueI16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueI16(const FReducer& Reducer) { return Reducer.IsInsertUniqueI16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueI16Args GetAsInsertUniqueI16(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueI16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueI256(const FInsertUniqueI256Args& Value) {
        return FReducer::InsertUniqueI256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueI256(const FReducer& Reducer) { return Reducer.IsInsertUniqueI256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueI256Args GetAsInsertUniqueI256(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueI256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueI32(const FInsertUniqueI32Args& Value) {
        return FReducer::InsertUniqueI32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueI32(const FReducer& Reducer) { return Reducer.IsInsertUniqueI32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueI32Args GetAsInsertUniqueI32(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueI32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueI64(const FInsertUniqueI64Args& Value) {
        return FReducer::InsertUniqueI64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueI64(const FReducer& Reducer) { return Reducer.IsInsertUniqueI64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueI64Args GetAsInsertUniqueI64(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueI64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueI8(const FInsertUniqueI8Args& Value) {
        return FReducer::InsertUniqueI8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueI8(const FReducer& Reducer) { return Reducer.IsInsertUniqueI8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueI8Args GetAsInsertUniqueI8(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueI8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueIdentity(const FInsertUniqueIdentityArgs& Value) {
        return FReducer::InsertUniqueIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueIdentity(const FReducer& Reducer) { return Reducer.IsInsertUniqueIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueIdentityArgs GetAsInsertUniqueIdentity(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueString(const FInsertUniqueStringArgs& Value) {
        return FReducer::InsertUniqueString(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueString(const FReducer& Reducer) { return Reducer.IsInsertUniqueString(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueStringArgs GetAsInsertUniqueString(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueString();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueU128(const FInsertUniqueU128Args& Value) {
        return FReducer::InsertUniqueU128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueU128(const FReducer& Reducer) { return Reducer.IsInsertUniqueU128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueU128Args GetAsInsertUniqueU128(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueU128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueU16(const FInsertUniqueU16Args& Value) {
        return FReducer::InsertUniqueU16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueU16(const FReducer& Reducer) { return Reducer.IsInsertUniqueU16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueU16Args GetAsInsertUniqueU16(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueU16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueU256(const FInsertUniqueU256Args& Value) {
        return FReducer::InsertUniqueU256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueU256(const FReducer& Reducer) { return Reducer.IsInsertUniqueU256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueU256Args GetAsInsertUniqueU256(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueU256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueU32(const FInsertUniqueU32Args& Value) {
        return FReducer::InsertUniqueU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueU32(const FReducer& Reducer) { return Reducer.IsInsertUniqueU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueU32Args GetAsInsertUniqueU32(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueU32UpdatePkU32(const FInsertUniqueU32UpdatePkU32Args& Value) {
        return FReducer::InsertUniqueU32UpdatePkU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueU32UpdatePkU32(const FReducer& Reducer) { return Reducer.IsInsertUniqueU32UpdatePkU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueU32UpdatePkU32Args GetAsInsertUniqueU32UpdatePkU32(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueU32UpdatePkU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueU64(const FInsertUniqueU64Args& Value) {
        return FReducer::InsertUniqueU64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueU64(const FReducer& Reducer) { return Reducer.IsInsertUniqueU64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueU64Args GetAsInsertUniqueU64(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueU64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUniqueU8(const FInsertUniqueU8Args& Value) {
        return FReducer::InsertUniqueU8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUniqueU8(const FReducer& Reducer) { return Reducer.IsInsertUniqueU8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUniqueU8Args GetAsInsertUniqueU8(const FReducer& Reducer) {
        return Reducer.GetAsInsertUniqueU8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertUser(const FInsertUserArgs& Value) {
        return FReducer::InsertUser(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertUser(const FReducer& Reducer) { return Reducer.IsInsertUser(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertUserArgs GetAsInsertUser(const FReducer& Reducer) {
        return Reducer.GetAsInsertUser();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecBool(const FInsertVecBoolArgs& Value) {
        return FReducer::InsertVecBool(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecBool(const FReducer& Reducer) { return Reducer.IsInsertVecBool(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecBoolArgs GetAsInsertVecBool(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecBool();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecByteStruct(const FInsertVecByteStructArgs& Value) {
        return FReducer::InsertVecByteStruct(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecByteStruct(const FReducer& Reducer) { return Reducer.IsInsertVecByteStruct(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecByteStructArgs GetAsInsertVecByteStruct(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecByteStruct();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecConnectionId(const FInsertVecConnectionIdArgs& Value) {
        return FReducer::InsertVecConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecConnectionId(const FReducer& Reducer) { return Reducer.IsInsertVecConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecConnectionIdArgs GetAsInsertVecConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecEnumWithPayload(const FInsertVecEnumWithPayloadArgs& Value) {
        return FReducer::InsertVecEnumWithPayload(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecEnumWithPayload(const FReducer& Reducer) { return Reducer.IsInsertVecEnumWithPayload(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecEnumWithPayloadArgs GetAsInsertVecEnumWithPayload(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecEnumWithPayload();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecEveryPrimitiveStruct(const FInsertVecEveryPrimitiveStructArgs& Value) {
        return FReducer::InsertVecEveryPrimitiveStruct(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecEveryPrimitiveStruct(const FReducer& Reducer) { return Reducer.IsInsertVecEveryPrimitiveStruct(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecEveryPrimitiveStructArgs GetAsInsertVecEveryPrimitiveStruct(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecEveryPrimitiveStruct();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecEveryVecStruct(const FInsertVecEveryVecStructArgs& Value) {
        return FReducer::InsertVecEveryVecStruct(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecEveryVecStruct(const FReducer& Reducer) { return Reducer.IsInsertVecEveryVecStruct(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecEveryVecStructArgs GetAsInsertVecEveryVecStruct(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecEveryVecStruct();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecF32(const FInsertVecF32Args& Value) {
        return FReducer::InsertVecF32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecF32(const FReducer& Reducer) { return Reducer.IsInsertVecF32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecF32Args GetAsInsertVecF32(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecF32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecF64(const FInsertVecF64Args& Value) {
        return FReducer::InsertVecF64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecF64(const FReducer& Reducer) { return Reducer.IsInsertVecF64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecF64Args GetAsInsertVecF64(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecF64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecI128(const FInsertVecI128Args& Value) {
        return FReducer::InsertVecI128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecI128(const FReducer& Reducer) { return Reducer.IsInsertVecI128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecI128Args GetAsInsertVecI128(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecI128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecI16(const FInsertVecI16Args& Value) {
        return FReducer::InsertVecI16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecI16(const FReducer& Reducer) { return Reducer.IsInsertVecI16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecI16Args GetAsInsertVecI16(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecI16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecI256(const FInsertVecI256Args& Value) {
        return FReducer::InsertVecI256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecI256(const FReducer& Reducer) { return Reducer.IsInsertVecI256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecI256Args GetAsInsertVecI256(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecI256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecI32(const FInsertVecI32Args& Value) {
        return FReducer::InsertVecI32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecI32(const FReducer& Reducer) { return Reducer.IsInsertVecI32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecI32Args GetAsInsertVecI32(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecI32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecI64(const FInsertVecI64Args& Value) {
        return FReducer::InsertVecI64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecI64(const FReducer& Reducer) { return Reducer.IsInsertVecI64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecI64Args GetAsInsertVecI64(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecI64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecI8(const FInsertVecI8Args& Value) {
        return FReducer::InsertVecI8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecI8(const FReducer& Reducer) { return Reducer.IsInsertVecI8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecI8Args GetAsInsertVecI8(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecI8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecIdentity(const FInsertVecIdentityArgs& Value) {
        return FReducer::InsertVecIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecIdentity(const FReducer& Reducer) { return Reducer.IsInsertVecIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecIdentityArgs GetAsInsertVecIdentity(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecSimpleEnum(const FInsertVecSimpleEnumArgs& Value) {
        return FReducer::InsertVecSimpleEnum(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecSimpleEnum(const FReducer& Reducer) { return Reducer.IsInsertVecSimpleEnum(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecSimpleEnumArgs GetAsInsertVecSimpleEnum(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecSimpleEnum();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecString(const FInsertVecStringArgs& Value) {
        return FReducer::InsertVecString(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecString(const FReducer& Reducer) { return Reducer.IsInsertVecString(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecStringArgs GetAsInsertVecString(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecString();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecTimestamp(const FInsertVecTimestampArgs& Value) {
        return FReducer::InsertVecTimestamp(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecTimestamp(const FReducer& Reducer) { return Reducer.IsInsertVecTimestamp(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecTimestampArgs GetAsInsertVecTimestamp(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecTimestamp();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecU128(const FInsertVecU128Args& Value) {
        return FReducer::InsertVecU128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecU128(const FReducer& Reducer) { return Reducer.IsInsertVecU128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecU128Args GetAsInsertVecU128(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecU128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecU16(const FInsertVecU16Args& Value) {
        return FReducer::InsertVecU16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecU16(const FReducer& Reducer) { return Reducer.IsInsertVecU16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecU16Args GetAsInsertVecU16(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecU16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecU256(const FInsertVecU256Args& Value) {
        return FReducer::InsertVecU256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecU256(const FReducer& Reducer) { return Reducer.IsInsertVecU256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecU256Args GetAsInsertVecU256(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecU256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecU32(const FInsertVecU32Args& Value) {
        return FReducer::InsertVecU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecU32(const FReducer& Reducer) { return Reducer.IsInsertVecU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecU32Args GetAsInsertVecU32(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecU64(const FInsertVecU64Args& Value) {
        return FReducer::InsertVecU64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecU64(const FReducer& Reducer) { return Reducer.IsInsertVecU64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecU64Args GetAsInsertVecU64(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecU64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecU8(const FInsertVecU8Args& Value) {
        return FReducer::InsertVecU8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecU8(const FReducer& Reducer) { return Reducer.IsInsertVecU8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecU8Args GetAsInsertVecU8(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecU8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer InsertVecUnitStruct(const FInsertVecUnitStructArgs& Value) {
        return FReducer::InsertVecUnitStruct(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsInsertVecUnitStruct(const FReducer& Reducer) { return Reducer.IsInsertVecUnitStruct(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FInsertVecUnitStructArgs GetAsInsertVecUnitStruct(const FReducer& Reducer) {
        return Reducer.GetAsInsertVecUnitStruct();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer NoOpSucceeds(const FNoOpSucceedsArgs& Value) {
        return FReducer::NoOpSucceeds(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsNoOpSucceeds(const FReducer& Reducer) { return Reducer.IsNoOpSucceeds(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FNoOpSucceedsArgs GetAsNoOpSucceeds(const FReducer& Reducer) {
        return Reducer.GetAsNoOpSucceeds();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer SendScheduledMessage(const FSendScheduledMessageArgs& Value) {
        return FReducer::SendScheduledMessage(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsSendScheduledMessage(const FReducer& Reducer) { return Reducer.IsSendScheduledMessage(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FSendScheduledMessageArgs GetAsSendScheduledMessage(const FReducer& Reducer) {
        return Reducer.GetAsSendScheduledMessage();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateIndexedSimpleEnum(const FUpdateIndexedSimpleEnumArgs& Value) {
        return FReducer::UpdateIndexedSimpleEnum(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateIndexedSimpleEnum(const FReducer& Reducer) { return Reducer.IsUpdateIndexedSimpleEnum(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateIndexedSimpleEnumArgs GetAsUpdateIndexedSimpleEnum(const FReducer& Reducer) {
        return Reducer.GetAsUpdateIndexedSimpleEnum();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkBool(const FUpdatePkBoolArgs& Value) {
        return FReducer::UpdatePkBool(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkBool(const FReducer& Reducer) { return Reducer.IsUpdatePkBool(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkBoolArgs GetAsUpdatePkBool(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkBool();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkConnectionId(const FUpdatePkConnectionIdArgs& Value) {
        return FReducer::UpdatePkConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkConnectionId(const FReducer& Reducer) { return Reducer.IsUpdatePkConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkConnectionIdArgs GetAsUpdatePkConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkI128(const FUpdatePkI128Args& Value) {
        return FReducer::UpdatePkI128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkI128(const FReducer& Reducer) { return Reducer.IsUpdatePkI128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkI128Args GetAsUpdatePkI128(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkI128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkI16(const FUpdatePkI16Args& Value) {
        return FReducer::UpdatePkI16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkI16(const FReducer& Reducer) { return Reducer.IsUpdatePkI16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkI16Args GetAsUpdatePkI16(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkI16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkI256(const FUpdatePkI256Args& Value) {
        return FReducer::UpdatePkI256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkI256(const FReducer& Reducer) { return Reducer.IsUpdatePkI256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkI256Args GetAsUpdatePkI256(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkI256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkI32(const FUpdatePkI32Args& Value) {
        return FReducer::UpdatePkI32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkI32(const FReducer& Reducer) { return Reducer.IsUpdatePkI32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkI32Args GetAsUpdatePkI32(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkI32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkI64(const FUpdatePkI64Args& Value) {
        return FReducer::UpdatePkI64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkI64(const FReducer& Reducer) { return Reducer.IsUpdatePkI64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkI64Args GetAsUpdatePkI64(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkI64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkI8(const FUpdatePkI8Args& Value) {
        return FReducer::UpdatePkI8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkI8(const FReducer& Reducer) { return Reducer.IsUpdatePkI8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkI8Args GetAsUpdatePkI8(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkI8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkIdentity(const FUpdatePkIdentityArgs& Value) {
        return FReducer::UpdatePkIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkIdentity(const FReducer& Reducer) { return Reducer.IsUpdatePkIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkIdentityArgs GetAsUpdatePkIdentity(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkSimpleEnum(const FUpdatePkSimpleEnumArgs& Value) {
        return FReducer::UpdatePkSimpleEnum(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkSimpleEnum(const FReducer& Reducer) { return Reducer.IsUpdatePkSimpleEnum(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkSimpleEnumArgs GetAsUpdatePkSimpleEnum(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkSimpleEnum();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkString(const FUpdatePkStringArgs& Value) {
        return FReducer::UpdatePkString(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkString(const FReducer& Reducer) { return Reducer.IsUpdatePkString(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkStringArgs GetAsUpdatePkString(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkString();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkU128(const FUpdatePkU128Args& Value) {
        return FReducer::UpdatePkU128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkU128(const FReducer& Reducer) { return Reducer.IsUpdatePkU128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkU128Args GetAsUpdatePkU128(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkU128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkU16(const FUpdatePkU16Args& Value) {
        return FReducer::UpdatePkU16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkU16(const FReducer& Reducer) { return Reducer.IsUpdatePkU16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkU16Args GetAsUpdatePkU16(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkU16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkU256(const FUpdatePkU256Args& Value) {
        return FReducer::UpdatePkU256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkU256(const FReducer& Reducer) { return Reducer.IsUpdatePkU256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkU256Args GetAsUpdatePkU256(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkU256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkU32(const FUpdatePkU32Args& Value) {
        return FReducer::UpdatePkU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkU32(const FReducer& Reducer) { return Reducer.IsUpdatePkU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkU32Args GetAsUpdatePkU32(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkU32Two(const FUpdatePkU32TwoArgs& Value) {
        return FReducer::UpdatePkU32Two(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkU32Two(const FReducer& Reducer) { return Reducer.IsUpdatePkU32Two(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkU32TwoArgs GetAsUpdatePkU32Two(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkU32Two();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkU64(const FUpdatePkU64Args& Value) {
        return FReducer::UpdatePkU64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkU64(const FReducer& Reducer) { return Reducer.IsUpdatePkU64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkU64Args GetAsUpdatePkU64(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkU64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdatePkU8(const FUpdatePkU8Args& Value) {
        return FReducer::UpdatePkU8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdatePkU8(const FReducer& Reducer) { return Reducer.IsUpdatePkU8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdatePkU8Args GetAsUpdatePkU8(const FReducer& Reducer) {
        return Reducer.GetAsUpdatePkU8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueBool(const FUpdateUniqueBoolArgs& Value) {
        return FReducer::UpdateUniqueBool(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueBool(const FReducer& Reducer) { return Reducer.IsUpdateUniqueBool(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueBoolArgs GetAsUpdateUniqueBool(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueBool();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueConnectionId(const FUpdateUniqueConnectionIdArgs& Value) {
        return FReducer::UpdateUniqueConnectionId(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueConnectionId(const FReducer& Reducer) { return Reducer.IsUpdateUniqueConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueConnectionIdArgs GetAsUpdateUniqueConnectionId(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueI128(const FUpdateUniqueI128Args& Value) {
        return FReducer::UpdateUniqueI128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueI128(const FReducer& Reducer) { return Reducer.IsUpdateUniqueI128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueI128Args GetAsUpdateUniqueI128(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueI128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueI16(const FUpdateUniqueI16Args& Value) {
        return FReducer::UpdateUniqueI16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueI16(const FReducer& Reducer) { return Reducer.IsUpdateUniqueI16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueI16Args GetAsUpdateUniqueI16(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueI16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueI256(const FUpdateUniqueI256Args& Value) {
        return FReducer::UpdateUniqueI256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueI256(const FReducer& Reducer) { return Reducer.IsUpdateUniqueI256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueI256Args GetAsUpdateUniqueI256(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueI256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueI32(const FUpdateUniqueI32Args& Value) {
        return FReducer::UpdateUniqueI32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueI32(const FReducer& Reducer) { return Reducer.IsUpdateUniqueI32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueI32Args GetAsUpdateUniqueI32(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueI32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueI64(const FUpdateUniqueI64Args& Value) {
        return FReducer::UpdateUniqueI64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueI64(const FReducer& Reducer) { return Reducer.IsUpdateUniqueI64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueI64Args GetAsUpdateUniqueI64(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueI64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueI8(const FUpdateUniqueI8Args& Value) {
        return FReducer::UpdateUniqueI8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueI8(const FReducer& Reducer) { return Reducer.IsUpdateUniqueI8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueI8Args GetAsUpdateUniqueI8(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueI8();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueIdentity(const FUpdateUniqueIdentityArgs& Value) {
        return FReducer::UpdateUniqueIdentity(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueIdentity(const FReducer& Reducer) { return Reducer.IsUpdateUniqueIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueIdentityArgs GetAsUpdateUniqueIdentity(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueString(const FUpdateUniqueStringArgs& Value) {
        return FReducer::UpdateUniqueString(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueString(const FReducer& Reducer) { return Reducer.IsUpdateUniqueString(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueStringArgs GetAsUpdateUniqueString(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueString();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueU128(const FUpdateUniqueU128Args& Value) {
        return FReducer::UpdateUniqueU128(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueU128(const FReducer& Reducer) { return Reducer.IsUpdateUniqueU128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueU128Args GetAsUpdateUniqueU128(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueU128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueU16(const FUpdateUniqueU16Args& Value) {
        return FReducer::UpdateUniqueU16(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueU16(const FReducer& Reducer) { return Reducer.IsUpdateUniqueU16(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueU16Args GetAsUpdateUniqueU16(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueU16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueU256(const FUpdateUniqueU256Args& Value) {
        return FReducer::UpdateUniqueU256(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueU256(const FReducer& Reducer) { return Reducer.IsUpdateUniqueU256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueU256Args GetAsUpdateUniqueU256(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueU256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueU32(const FUpdateUniqueU32Args& Value) {
        return FReducer::UpdateUniqueU32(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueU32(const FReducer& Reducer) { return Reducer.IsUpdateUniqueU32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueU32Args GetAsUpdateUniqueU32(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueU32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueU64(const FUpdateUniqueU64Args& Value) {
        return FReducer::UpdateUniqueU64(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueU64(const FReducer& Reducer) { return Reducer.IsUpdateUniqueU64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueU64Args GetAsUpdateUniqueU64(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueU64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer UpdateUniqueU8(const FUpdateUniqueU8Args& Value) {
        return FReducer::UpdateUniqueU8(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsUpdateUniqueU8(const FReducer& Reducer) { return Reducer.IsUpdateUniqueU8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FUpdateUniqueU8Args GetAsUpdateUniqueU8(const FReducer& Reducer) {
        return Reducer.GetAsUpdateUniqueU8();
    }
};

/** Metadata describing a reducer run. */
USTRUCT(BlueprintType)
struct TESTCLIENT_API FTestClientReducerEvent
{
	GENERATED_BODY()

	/** Timestamp for when the reducer executed */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBTimestamp Timestamp;

	/** Result status of the reducer */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBStatus Status;

	/** Identity that initiated the call */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBIdentity CallerIdentity;

	/** Connection ID for the caller */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBConnectionId CallerConnectionId;

	/** Energy consumed while executing */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FEnergyQuantaType EnergyConsumed;

	/** Detailed call information */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FReducer Reducer;

	FORCEINLINE bool operator==(const FTestClientReducerEvent& Other) const
	{
		return Status == Other.Status && Timestamp == Other.Timestamp && CallerIdentity == Other.CallerIdentity &&
			CallerConnectionId == Other.CallerConnectionId && EnergyConsumed == Other.EnergyConsumed &&
			Reducer == Other.Reducer;
	}

	FORCEINLINE bool operator!=(const FTestClientReducerEvent& Other) const
	{
		return !(*this == Other);
	}
};

/** Represents event with variant message data. */
USTRUCT(BlueprintType)
struct TESTCLIENT_API FTestClientEvent
{
	GENERATED_BODY()

	/** Tagged union holding reducer call, unit events, or error string */
	TVariant<FReducer, FSpacetimeDBUnit, FString> MessageData;

	/** Type tag indicating what this event represents */
	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
	ESpacetimeDBEventTag Tag = ESpacetimeDBEventTag::UnknownTransaction;

	/** === Static factory methods ===*/
	static FTestClientEvent Reducer(const FReducer& Value)
	{
		FTestClientEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::Reducer;
		Obj.MessageData.Set<FReducer>(Value);
		return Obj;
	}

	static FTestClientEvent SubscribeApplied(const FSpacetimeDBUnit& Value)
	{
		FTestClientEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::SubscribeApplied;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	static FTestClientEvent UnsubscribeApplied(const FSpacetimeDBUnit& Value)
	{
		FTestClientEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::UnsubscribeApplied;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	static FTestClientEvent Disconnected(const FSpacetimeDBUnit& Value)
	{
		FTestClientEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::Disconnected;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	static FTestClientEvent SubscribeError(const FString& Value)
	{
		FTestClientEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::SubscribeError;
		Obj.MessageData.Set<FString>(Value);
		return Obj;
	}

	static FTestClientEvent UnknownTransaction(const FSpacetimeDBUnit& Value)
	{
		FTestClientEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::UnknownTransaction;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	FORCEINLINE bool IsReducer() const { return Tag == ESpacetimeDBEventTag::Reducer; }
	FORCEINLINE FReducer GetAsReducer() const
	{
		ensureMsgf(IsReducer(), TEXT("MessageData does not hold Reducer!"));
		return MessageData.Get<FReducer>();
	}

	FORCEINLINE bool IsSubscribeApplied() const { return Tag == ESpacetimeDBEventTag::SubscribeApplied; }
	FORCEINLINE FSpacetimeDBUnit GetAsSubscribeApplied() const
	{
		ensureMsgf(IsSubscribeApplied(), TEXT("MessageData does not hold SubscribeApplied!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool IsUnsubscribeApplied() const { return Tag == ESpacetimeDBEventTag::UnsubscribeApplied; }
	FORCEINLINE FSpacetimeDBUnit GetAsUnsubscribeApplied() const
	{
		ensureMsgf(IsUnsubscribeApplied(), TEXT("MessageData does not hold UnsubscribeApplied!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool IsDisconnected() const { return Tag == ESpacetimeDBEventTag::Disconnected; }
	FORCEINLINE FSpacetimeDBUnit GetAsDisconnected() const
	{
		ensureMsgf(IsDisconnected(), TEXT("MessageData does not hold Disconnected!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool IsSubscribeError() const { return Tag == ESpacetimeDBEventTag::SubscribeError; }
	FORCEINLINE FString GetAsSubscribeError() const
	{
		ensureMsgf(IsSubscribeError(), TEXT("MessageData does not hold SubscribeError!"));
		return MessageData.Get<FString>();
	}

	FORCEINLINE bool IsUnknownTransaction() const { return Tag == ESpacetimeDBEventTag::UnknownTransaction; }
	FORCEINLINE FSpacetimeDBUnit GetAsUnknownTransaction() const
	{
		ensureMsgf(IsUnknownTransaction(), TEXT("MessageData does not hold UnknownTransaction!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool operator==(const FTestClientEvent& Other) const
	{
		if (Tag != Other.Tag) return false;
		switch (Tag)
		{
		case ESpacetimeDBEventTag::Reducer: return GetAsReducer() == Other.GetAsReducer();
		case ESpacetimeDBEventTag::SubscribeApplied: return GetAsSubscribeApplied() == Other.GetAsSubscribeApplied();
		case ESpacetimeDBEventTag::UnsubscribeApplied: return GetAsUnsubscribeApplied() == Other.GetAsUnsubscribeApplied();
		case ESpacetimeDBEventTag::Disconnected: return GetAsDisconnected() == Other.GetAsDisconnected();
		case ESpacetimeDBEventTag::SubscribeError: return GetAsSubscribeError() == Other.GetAsSubscribeError();
		case ESpacetimeDBEventTag::UnknownTransaction: return GetAsUnknownTransaction() == Other.GetAsUnknownTransaction();
		default: return false;
		}
	}

	FORCEINLINE bool operator!=(const FTestClientEvent& Other) const
	{
		return !(*this == Other);
	}
};

UCLASS()
class TESTCLIENT_API UTestClientEventBpLib : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

private:
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|TestClientEvent")
    static FTestClientEvent Reducer(const FReducer& InValue)
    {
        return FTestClientEvent::Reducer(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|TestClientEvent")
    static FTestClientEvent SubscribeApplied(const FSpacetimeDBUnit& InValue)
    {
        return FTestClientEvent::SubscribeApplied(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|TestClientEvent")
    static FTestClientEvent UnsubscribeApplied(const FSpacetimeDBUnit& InValue)
    {
        return FTestClientEvent::UnsubscribeApplied(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|TestClientEvent")
    static FTestClientEvent Disconnected(const FSpacetimeDBUnit& InValue)
    {
        return FTestClientEvent::Disconnected(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|TestClientEvent")
    static FTestClientEvent SubscribeError(const FString& InValue)
    {
        return FTestClientEvent::SubscribeError(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|TestClientEvent")
    static FTestClientEvent UnknownTransaction(const FSpacetimeDBUnit& InValue)
    {
        return FTestClientEvent::UnknownTransaction(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static bool IsReducer(const FTestClientEvent& Event) { return Event.IsReducer(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static bool IsSubscribeApplied(const FTestClientEvent& Event) { return Event.IsSubscribeApplied(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static bool IsUnsubscribeApplied(const FTestClientEvent& Event) { return Event.IsUnsubscribeApplied(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static bool IsDisconnected(const FTestClientEvent& Event) { return Event.IsDisconnected(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static bool IsSubscribeError(const FTestClientEvent& Event) { return Event.IsSubscribeError(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static bool IsUnknownTransaction(const FTestClientEvent& Event) { return Event.IsUnknownTransaction(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static FReducer GetAsReducer(const FTestClientEvent& Event)
    {
        return Event.GetAsReducer();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static FSpacetimeDBUnit GetAsSubscribeApplied(const FTestClientEvent& Event)
    {
        return Event.GetAsSubscribeApplied();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static FSpacetimeDBUnit GetAsUnsubscribeApplied(const FTestClientEvent& Event)
    {
        return Event.GetAsUnsubscribeApplied();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static FSpacetimeDBUnit GetAsDisconnected(const FTestClientEvent& Event)
    {
        return Event.GetAsDisconnected();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static FString GetAsSubscribeError(const FTestClientEvent& Event)
    {
        return Event.GetAsSubscribeError();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|TestClientEvent")
    static FSpacetimeDBUnit GetAsUnknownTransaction(const FTestClientEvent& Event)
    {
        return Event.GetAsUnknownTransaction();
    }

};


USTRUCT(BlueprintType)
struct TESTCLIENT_API FEventContext : public FContextBase
{
	GENERATED_BODY()

	FEventContext() = default;
	FEventContext(UDbConnection* InConn, const FTestClientEvent& InEvent) : FContextBase(InConn), Event(InEvent) {}

	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
	FTestClientEvent Event;
};

USTRUCT(BlueprintType)
struct TESTCLIENT_API FReducerEventContext : public FContextBase
{
	GENERATED_BODY()

	FReducerEventContext() = default;
	FReducerEventContext(UDbConnection* InConn, FTestClientReducerEvent InEvent) : FContextBase(InConn), Event(InEvent) {}
	
	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB") 
	FTestClientReducerEvent Event;
};

USTRUCT(BlueprintType)
struct TESTCLIENT_API FErrorContext : public FContextBase
{
	GENERATED_BODY()

	FErrorContext() = default;
	FErrorContext(UDbConnection* InConn, const FString& InError) : FContextBase(InConn), Error(InError) {}

	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
	FString Error;

};

USTRUCT(BlueprintType)
struct TESTCLIENT_API FSubscriptionEventContext : public FContextBase
{
	GENERATED_BODY()

	FSubscriptionEventContext() = default;
	FSubscriptionEventContext(UDbConnection* InConn) : FContextBase(InConn) {}

};

DECLARE_DYNAMIC_DELEGATE_OneParam(
	FOnSubscriptionApplied,
	FSubscriptionEventContext, Context);

DECLARE_DYNAMIC_DELEGATE_OneParam(
	FOnSubscriptionError,
	FErrorContext, Context);

UCLASS(BlueprintType)
class TESTCLIENT_API USetReducerFlags : public USetReducerFlagsBase
{
	GENERATED_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteFromBtreeU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteLargeTable(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkBool(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkI128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkI16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkI256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkI32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkI64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkI8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkString(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkU128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkU16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkU256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkU32InsertPkU32Two(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkU32Two(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkU64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeletePkU8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueBool(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueI128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueI16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueI256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueI32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueI64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueI8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueString(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueU128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueU16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueU256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueU64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void DeleteUniqueU8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertCallTimestamp(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertCallerOneConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertCallerOneIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertCallerPkConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertCallerPkIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertCallerUniqueConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertCallerUniqueIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertCallerVecConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertCallerVecIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertIntoBtreeU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertIntoIndexedSimpleEnum(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertIntoPkBtreeU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertLargeTable(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneBool(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneByteStruct(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneEnumWithPayload(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneEveryPrimitiveStruct(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneEveryVecStruct(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneF32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneF64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneI128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneI16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneI256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneI32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneI64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneI8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneSimpleEnum(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneString(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneTimestamp(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneU128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneU16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneU256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneU64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneU8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOneUnitStruct(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOptionEveryPrimitiveStruct(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOptionI32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOptionIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOptionSimpleEnum(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOptionString(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertOptionVecOptionI32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkBool(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkI128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkI16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkI256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkI32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkI64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkI8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkSimpleEnum(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkString(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkU128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkU16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkU256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkU32Two(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkU64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPkU8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertPrimitivesAsStrings(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertTableHoldsTable(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueBool(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueI128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueI16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueI256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueI32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueI64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueI8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueString(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueU128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueU16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueU256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueU32UpdatePkU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueU64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUniqueU8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertUser(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecBool(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecByteStruct(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecEnumWithPayload(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecEveryPrimitiveStruct(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecEveryVecStruct(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecF32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecF64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecI128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecI16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecI256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecI32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecI64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecI8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecSimpleEnum(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecString(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecTimestamp(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecU128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecU16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecU256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecU64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecU8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void InsertVecUnitStruct(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void NoOpSucceeds(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void SendScheduledMessage(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateIndexedSimpleEnum(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkBool(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkI128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkI16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkI256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkI32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkI64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkI8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkSimpleEnum(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkString(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkU128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkU16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkU256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkU32Two(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkU64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdatePkU8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueBool(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueConnectionId(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueI128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueI16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueI256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueI32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueI64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueI8(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueIdentity(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueString(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueU128(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueU16(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueU256(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueU32(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueU64(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void UpdateUniqueU8(ECallReducerFlags Flag);

};

// RemoteTables class
UCLASS(BlueprintType)
class TESTCLIENT_API URemoteTables : public UObject
{
    GENERATED_BODY()

public:
    void Initialize();

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUsersTable* Users;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueI32Table* UniqueI32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneTimestampTable* OneTimestamp;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecI8Table* VecI8;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UBTreeU32Table* BtreeU32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecByteStructTable* VecByteStruct;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecI256Table* VecI256;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecU16Table* VecU16;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueU16Table* UniqueU16;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecI128Table* VecI128;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UScheduledTableTable* ScheduledTable;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecI16Table* VecI16;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkBoolTable* PkBool;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneI32Table* OneI32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecU256Table* VecU256;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneEveryPrimitiveStructTable* OneEveryPrimitiveStruct;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkI64Table* PkI64;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkI32Table* PkI32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneStringTable* OneString;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOptionStringTable* OptionString;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneUnitStructTable* OneUnitStruct;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkIdentityTable* PkIdentity;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOptionEveryPrimitiveStructTable* OptionEveryPrimitiveStruct;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueI64Table* UniqueI64;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkU128Table* PkU128;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkConnectionIdTable* PkConnectionId;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecConnectionIdTable* VecConnectionId;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecI32Table* VecI32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecTimestampTable* VecTimestamp;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneEveryVecStructTable* OneEveryVecStruct;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneF32Table* OneF32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneU8Table* OneU8;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOptionVecOptionI32Table* OptionVecOptionI32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneU256Table* OneU256;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueIdentityTable* UniqueIdentity;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecStringTable* VecString;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueConnectionIdTable* UniqueConnectionId;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecU32Table* VecU32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    ULargeTableTable* LargeTable;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecUnitStructTable* VecUnitStruct;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneI8Table* OneI8;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkI16Table* PkI16;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueI16Table* UniqueI16;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueU8Table* UniqueU8;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOptionIdentityTable* OptionIdentity;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueI256Table* UniqueI256;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UIndexedTableTable* IndexedTable;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecEveryVecStructTable* VecEveryVecStruct;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecU128Table* VecU128;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueU256Table* UniqueU256;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecF32Table* VecF32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecIdentityTable* VecIdentity;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOptionI32Table* OptionI32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneU16Table* OneU16;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneU32Table* OneU32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneI128Table* OneI128;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueI128Table* UniqueI128;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueU128Table* UniqueU128;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkI8Table* PkI8;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneEnumWithPayloadTable* OneEnumWithPayload;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneByteStructTable* OneByteStruct;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkU64Table* PkU64;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkU256Table* PkU256;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UTableHoldsTableTable* TableHoldsTable;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecI64Table* VecI64;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueU64Table* UniqueU64;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecU8Table* VecU8;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneF64Table* OneF64;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneBoolTable* OneBool;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecEnumWithPayloadTable* VecEnumWithPayload;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneConnectionIdTable* OneConnectionId;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkI128Table* PkI128;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneU128Table* OneU128;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UIndexedTable2Table* IndexedTable2;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneI16Table* OneI16;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneI64Table* OneI64;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOptionSimpleEnumTable* OptionSimpleEnum;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkSimpleEnumTable* PkSimpleEnum;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkStringTable* PkString;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkU8Table* PkU8;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueBoolTable* UniqueBool;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecBoolTable* VecBool;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecEveryPrimitiveStructTable* VecEveryPrimitiveStruct;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UIndexedSimpleEnumTable* IndexedSimpleEnum;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkU32Table* PkU32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueI8Table* UniqueI8;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueStringTable* UniqueString;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecF64Table* VecF64;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneU64Table* OneU64;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneIdentityTable* OneIdentity;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkU16Table* PkU16;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecSimpleEnumTable* VecSimpleEnum;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneSimpleEnumTable* OneSimpleEnum;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkU32TwoTable* PkU32Two;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUniqueU32Table* UniqueU32;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UVecU64Table* VecU64;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPkI256Table* PkI256;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UOneI256Table* OneI256;

};

// RemoteReducers class
UCLASS(BlueprintType)
class TESTCLIENT_API URemoteReducers : public UObject
{
    GENERATED_BODY()

public:

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteFromBtreeU32Handler,
        const FReducerEventContext&, Context,
        const TArray<FBTreeU32Type>&, Rows
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteFromBtreeU32Handler OnDeleteFromBtreeU32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteFromBtreeU32(const TArray<FBTreeU32Type>& Rows);

    bool InvokeDeleteFromBtreeU32(const FReducerEventContext& Context, const UDeleteFromBtreeU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteLargeTableHandler,
        const FReducerEventContext&, Context,
        const FDeleteLargeTableArgs&, Args
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteLargeTableHandler OnDeleteLargeTable;

    // NOTE: Not exposed to Blueprint because uint16, uint32, uint64, int8, int16 types are not Blueprint-compatible
    void DeleteLargeTable(const uint8 A, const uint16 B, const uint32 C, const uint64 D, const FSpacetimeDBUInt128& E, const FSpacetimeDBUInt256& F, const int8 G, const int16 H, const int32 I, const int64 J, const FSpacetimeDBInt128& K, const FSpacetimeDBInt256& L, const bool M, const float N, const double O, const FString& P, const ESimpleEnumType& Q, const FEnumWithPayloadType& R, const FUnitStructType& S, const FByteStructType& T, const FEveryPrimitiveStructType& U, const FEveryVecStructType& V);

    bool InvokeDeleteLargeTable(const FReducerEventContext& Context, const UDeleteLargeTableReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkBoolHandler,
        const FReducerEventContext&, Context,
        bool, B
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeletePkBoolHandler OnDeletePkBool;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeletePkBool(const bool B);

    bool InvokeDeletePkBool(const FReducerEventContext& Context, const UDeletePkBoolReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkConnectionIdHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBConnectionId&, A
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeletePkConnectionIdHandler OnDeletePkConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeletePkConnectionId(const FSpacetimeDBConnectionId& A);

    bool InvokeDeletePkConnectionId(const FReducerEventContext& Context, const UDeletePkConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkI128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt128&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeletePkI128Handler OnDeletePkI128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeletePkI128(const FSpacetimeDBInt128& N);

    bool InvokeDeletePkI128(const FReducerEventContext& Context, const UDeletePkI128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkI16Handler,
        const FReducerEventContext&, Context,
        int16, N
    );
    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    FDeletePkI16Handler OnDeletePkI16;

    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    void DeletePkI16(const int16 N);

    bool InvokeDeletePkI16(const FReducerEventContext& Context, const UDeletePkI16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkI256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt256&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeletePkI256Handler OnDeletePkI256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeletePkI256(const FSpacetimeDBInt256& N);

    bool InvokeDeletePkI256(const FReducerEventContext& Context, const UDeletePkI256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkI32Handler,
        const FReducerEventContext&, Context,
        int32, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeletePkI32Handler OnDeletePkI32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeletePkI32(const int32 N);

    bool InvokeDeletePkI32(const FReducerEventContext& Context, const UDeletePkI32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkI64Handler,
        const FReducerEventContext&, Context,
        int64, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeletePkI64Handler OnDeletePkI64;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeletePkI64(const int64 N);

    bool InvokeDeletePkI64(const FReducerEventContext& Context, const UDeletePkI64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkI8Handler,
        const FReducerEventContext&, Context,
        int8, N
    );
    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    FDeletePkI8Handler OnDeletePkI8;

    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    void DeletePkI8(const int8 N);

    bool InvokeDeletePkI8(const FReducerEventContext& Context, const UDeletePkI8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkIdentityHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBIdentity&, I
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeletePkIdentityHandler OnDeletePkIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeletePkIdentity(const FSpacetimeDBIdentity& I);

    bool InvokeDeletePkIdentity(const FReducerEventContext& Context, const UDeletePkIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkStringHandler,
        const FReducerEventContext&, Context,
        const FString&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeletePkStringHandler OnDeletePkString;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeletePkString(const FString& S);

    bool InvokeDeletePkString(const FReducerEventContext& Context, const UDeletePkStringReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkU128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt128&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeletePkU128Handler OnDeletePkU128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeletePkU128(const FSpacetimeDBUInt128& N);

    bool InvokeDeletePkU128(const FReducerEventContext& Context, const UDeletePkU128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkU16Handler,
        const FReducerEventContext&, Context,
        uint16, N
    );
    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    FDeletePkU16Handler OnDeletePkU16;

    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    void DeletePkU16(const uint16 N);

    bool InvokeDeletePkU16(const FReducerEventContext& Context, const UDeletePkU16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkU256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt256&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeletePkU256Handler OnDeletePkU256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeletePkU256(const FSpacetimeDBUInt256& N);

    bool InvokeDeletePkU256(const FReducerEventContext& Context, const UDeletePkU256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkU32Handler,
        const FReducerEventContext&, Context,
        uint32, N
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FDeletePkU32Handler OnDeletePkU32;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void DeletePkU32(const uint32 N);

    bool InvokeDeletePkU32(const FReducerEventContext& Context, const UDeletePkU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FDeletePkU32InsertPkU32TwoHandler,
        const FReducerEventContext&, Context,
        uint32, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FDeletePkU32InsertPkU32TwoHandler OnDeletePkU32InsertPkU32Two;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void DeletePkU32InsertPkU32Two(const uint32 N, const int32 Data);

    bool InvokeDeletePkU32InsertPkU32Two(const FReducerEventContext& Context, const UDeletePkU32InsertPkU32TwoReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkU32TwoHandler,
        const FReducerEventContext&, Context,
        uint32, N
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FDeletePkU32TwoHandler OnDeletePkU32Two;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void DeletePkU32Two(const uint32 N);

    bool InvokeDeletePkU32Two(const FReducerEventContext& Context, const UDeletePkU32TwoReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkU64Handler,
        const FReducerEventContext&, Context,
        uint64, N
    );
    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    FDeletePkU64Handler OnDeletePkU64;

    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    void DeletePkU64(const uint64 N);

    bool InvokeDeletePkU64(const FReducerEventContext& Context, const UDeletePkU64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeletePkU8Handler,
        const FReducerEventContext&, Context,
        uint8, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeletePkU8Handler OnDeletePkU8;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeletePkU8(const uint8 N);

    bool InvokeDeletePkU8(const FReducerEventContext& Context, const UDeletePkU8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueBoolHandler,
        const FReducerEventContext&, Context,
        bool, B
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteUniqueBoolHandler OnDeleteUniqueBool;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteUniqueBool(const bool B);

    bool InvokeDeleteUniqueBool(const FReducerEventContext& Context, const UDeleteUniqueBoolReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueConnectionIdHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBConnectionId&, A
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteUniqueConnectionIdHandler OnDeleteUniqueConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteUniqueConnectionId(const FSpacetimeDBConnectionId& A);

    bool InvokeDeleteUniqueConnectionId(const FReducerEventContext& Context, const UDeleteUniqueConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueI128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt128&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteUniqueI128Handler OnDeleteUniqueI128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteUniqueI128(const FSpacetimeDBInt128& N);

    bool InvokeDeleteUniqueI128(const FReducerEventContext& Context, const UDeleteUniqueI128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueI16Handler,
        const FReducerEventContext&, Context,
        int16, N
    );
    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    FDeleteUniqueI16Handler OnDeleteUniqueI16;

    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    void DeleteUniqueI16(const int16 N);

    bool InvokeDeleteUniqueI16(const FReducerEventContext& Context, const UDeleteUniqueI16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueI256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt256&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteUniqueI256Handler OnDeleteUniqueI256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteUniqueI256(const FSpacetimeDBInt256& N);

    bool InvokeDeleteUniqueI256(const FReducerEventContext& Context, const UDeleteUniqueI256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueI32Handler,
        const FReducerEventContext&, Context,
        int32, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteUniqueI32Handler OnDeleteUniqueI32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteUniqueI32(const int32 N);

    bool InvokeDeleteUniqueI32(const FReducerEventContext& Context, const UDeleteUniqueI32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueI64Handler,
        const FReducerEventContext&, Context,
        int64, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteUniqueI64Handler OnDeleteUniqueI64;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteUniqueI64(const int64 N);

    bool InvokeDeleteUniqueI64(const FReducerEventContext& Context, const UDeleteUniqueI64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueI8Handler,
        const FReducerEventContext&, Context,
        int8, N
    );
    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    FDeleteUniqueI8Handler OnDeleteUniqueI8;

    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    void DeleteUniqueI8(const int8 N);

    bool InvokeDeleteUniqueI8(const FReducerEventContext& Context, const UDeleteUniqueI8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueIdentityHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBIdentity&, I
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteUniqueIdentityHandler OnDeleteUniqueIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteUniqueIdentity(const FSpacetimeDBIdentity& I);

    bool InvokeDeleteUniqueIdentity(const FReducerEventContext& Context, const UDeleteUniqueIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueStringHandler,
        const FReducerEventContext&, Context,
        const FString&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteUniqueStringHandler OnDeleteUniqueString;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteUniqueString(const FString& S);

    bool InvokeDeleteUniqueString(const FReducerEventContext& Context, const UDeleteUniqueStringReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueU128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt128&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteUniqueU128Handler OnDeleteUniqueU128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteUniqueU128(const FSpacetimeDBUInt128& N);

    bool InvokeDeleteUniqueU128(const FReducerEventContext& Context, const UDeleteUniqueU128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueU16Handler,
        const FReducerEventContext&, Context,
        uint16, N
    );
    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    FDeleteUniqueU16Handler OnDeleteUniqueU16;

    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    void DeleteUniqueU16(const uint16 N);

    bool InvokeDeleteUniqueU16(const FReducerEventContext& Context, const UDeleteUniqueU16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueU256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt256&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteUniqueU256Handler OnDeleteUniqueU256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteUniqueU256(const FSpacetimeDBUInt256& N);

    bool InvokeDeleteUniqueU256(const FReducerEventContext& Context, const UDeleteUniqueU256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueU32Handler,
        const FReducerEventContext&, Context,
        uint32, N
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FDeleteUniqueU32Handler OnDeleteUniqueU32;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void DeleteUniqueU32(const uint32 N);

    bool InvokeDeleteUniqueU32(const FReducerEventContext& Context, const UDeleteUniqueU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueU64Handler,
        const FReducerEventContext&, Context,
        uint64, N
    );
    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    FDeleteUniqueU64Handler OnDeleteUniqueU64;

    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    void DeleteUniqueU64(const uint64 N);

    bool InvokeDeleteUniqueU64(const FReducerEventContext& Context, const UDeleteUniqueU64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FDeleteUniqueU8Handler,
        const FReducerEventContext&, Context,
        uint8, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDeleteUniqueU8Handler OnDeleteUniqueU8;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void DeleteUniqueU8(const uint8 N);

    bool InvokeDeleteUniqueU8(const FReducerEventContext& Context, const UDeleteUniqueU8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FInsertCallTimestampHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertCallTimestampHandler OnInsertCallTimestamp;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertCallTimestamp();

    bool InvokeInsertCallTimestamp(const FReducerEventContext& Context, const UInsertCallTimestampReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FInsertCallerOneConnectionIdHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertCallerOneConnectionIdHandler OnInsertCallerOneConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertCallerOneConnectionId();

    bool InvokeInsertCallerOneConnectionId(const FReducerEventContext& Context, const UInsertCallerOneConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FInsertCallerOneIdentityHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertCallerOneIdentityHandler OnInsertCallerOneIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertCallerOneIdentity();

    bool InvokeInsertCallerOneIdentity(const FReducerEventContext& Context, const UInsertCallerOneIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertCallerPkConnectionIdHandler,
        const FReducerEventContext&, Context,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertCallerPkConnectionIdHandler OnInsertCallerPkConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertCallerPkConnectionId(const int32 Data);

    bool InvokeInsertCallerPkConnectionId(const FReducerEventContext& Context, const UInsertCallerPkConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertCallerPkIdentityHandler,
        const FReducerEventContext&, Context,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertCallerPkIdentityHandler OnInsertCallerPkIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertCallerPkIdentity(const int32 Data);

    bool InvokeInsertCallerPkIdentity(const FReducerEventContext& Context, const UInsertCallerPkIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertCallerUniqueConnectionIdHandler,
        const FReducerEventContext&, Context,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertCallerUniqueConnectionIdHandler OnInsertCallerUniqueConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertCallerUniqueConnectionId(const int32 Data);

    bool InvokeInsertCallerUniqueConnectionId(const FReducerEventContext& Context, const UInsertCallerUniqueConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertCallerUniqueIdentityHandler,
        const FReducerEventContext&, Context,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertCallerUniqueIdentityHandler OnInsertCallerUniqueIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertCallerUniqueIdentity(const int32 Data);

    bool InvokeInsertCallerUniqueIdentity(const FReducerEventContext& Context, const UInsertCallerUniqueIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FInsertCallerVecConnectionIdHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertCallerVecConnectionIdHandler OnInsertCallerVecConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertCallerVecConnectionId();

    bool InvokeInsertCallerVecConnectionId(const FReducerEventContext& Context, const UInsertCallerVecConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FInsertCallerVecIdentityHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertCallerVecIdentityHandler OnInsertCallerVecIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertCallerVecIdentity();

    bool InvokeInsertCallerVecIdentity(const FReducerEventContext& Context, const UInsertCallerVecIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertIntoBtreeU32Handler,
        const FReducerEventContext&, Context,
        const TArray<FBTreeU32Type>&, Rows
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertIntoBtreeU32Handler OnInsertIntoBtreeU32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertIntoBtreeU32(const TArray<FBTreeU32Type>& Rows);

    bool InvokeInsertIntoBtreeU32(const FReducerEventContext& Context, const UInsertIntoBtreeU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertIntoIndexedSimpleEnumHandler,
        const FReducerEventContext&, Context,
        const ESimpleEnumType&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertIntoIndexedSimpleEnumHandler OnInsertIntoIndexedSimpleEnum;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertIntoIndexedSimpleEnum(const ESimpleEnumType& N);

    bool InvokeInsertIntoIndexedSimpleEnum(const FReducerEventContext& Context, const UInsertIntoIndexedSimpleEnumReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertIntoPkBtreeU32Handler,
        const FReducerEventContext&, Context,
        const TArray<FPkU32Type>&, PkU32,
        const TArray<FBTreeU32Type>&, BtU32
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertIntoPkBtreeU32Handler OnInsertIntoPkBtreeU32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertIntoPkBtreeU32(const TArray<FPkU32Type>& PkU32, const TArray<FBTreeU32Type>& BtU32);

    bool InvokeInsertIntoPkBtreeU32(const FReducerEventContext& Context, const UInsertIntoPkBtreeU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertLargeTableHandler,
        const FReducerEventContext&, Context,
        const FInsertLargeTableArgs&, Args
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertLargeTableHandler OnInsertLargeTable;

    // NOTE: Not exposed to Blueprint because uint16, uint32, uint64, int8, int16 types are not Blueprint-compatible
    void InsertLargeTable(const uint8 A, const uint16 B, const uint32 C, const uint64 D, const FSpacetimeDBUInt128& E, const FSpacetimeDBUInt256& F, const int8 G, const int16 H, const int32 I, const int64 J, const FSpacetimeDBInt128& K, const FSpacetimeDBInt256& L, const bool M, const float N, const double O, const FString& P, const ESimpleEnumType& Q, const FEnumWithPayloadType& R, const FUnitStructType& S, const FByteStructType& T, const FEveryPrimitiveStructType& U, const FEveryVecStructType& V);

    bool InvokeInsertLargeTable(const FReducerEventContext& Context, const UInsertLargeTableReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneBoolHandler,
        const FReducerEventContext&, Context,
        bool, B
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneBoolHandler OnInsertOneBool;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneBool(const bool B);

    bool InvokeInsertOneBool(const FReducerEventContext& Context, const UInsertOneBoolReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneByteStructHandler,
        const FReducerEventContext&, Context,
        const FByteStructType&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneByteStructHandler OnInsertOneByteStruct;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneByteStruct(const FByteStructType& S);

    bool InvokeInsertOneByteStruct(const FReducerEventContext& Context, const UInsertOneByteStructReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneConnectionIdHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBConnectionId&, A
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneConnectionIdHandler OnInsertOneConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneConnectionId(const FSpacetimeDBConnectionId& A);

    bool InvokeInsertOneConnectionId(const FReducerEventContext& Context, const UInsertOneConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneEnumWithPayloadHandler,
        const FReducerEventContext&, Context,
        const FEnumWithPayloadType&, E
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneEnumWithPayloadHandler OnInsertOneEnumWithPayload;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneEnumWithPayload(const FEnumWithPayloadType& E);

    bool InvokeInsertOneEnumWithPayload(const FReducerEventContext& Context, const UInsertOneEnumWithPayloadReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneEveryPrimitiveStructHandler,
        const FReducerEventContext&, Context,
        const FEveryPrimitiveStructType&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneEveryPrimitiveStructHandler OnInsertOneEveryPrimitiveStruct;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneEveryPrimitiveStruct(const FEveryPrimitiveStructType& S);

    bool InvokeInsertOneEveryPrimitiveStruct(const FReducerEventContext& Context, const UInsertOneEveryPrimitiveStructReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneEveryVecStructHandler,
        const FReducerEventContext&, Context,
        const FEveryVecStructType&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneEveryVecStructHandler OnInsertOneEveryVecStruct;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneEveryVecStruct(const FEveryVecStructType& S);

    bool InvokeInsertOneEveryVecStruct(const FReducerEventContext& Context, const UInsertOneEveryVecStructReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneF32Handler,
        const FReducerEventContext&, Context,
        float, F
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneF32Handler OnInsertOneF32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneF32(const float F);

    bool InvokeInsertOneF32(const FReducerEventContext& Context, const UInsertOneF32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneF64Handler,
        const FReducerEventContext&, Context,
        double, F
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneF64Handler OnInsertOneF64;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneF64(const double F);

    bool InvokeInsertOneF64(const FReducerEventContext& Context, const UInsertOneF64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneI128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt128&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneI128Handler OnInsertOneI128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneI128(const FSpacetimeDBInt128& N);

    bool InvokeInsertOneI128(const FReducerEventContext& Context, const UInsertOneI128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneI16Handler,
        const FReducerEventContext&, Context,
        int16, N
    );
    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    FInsertOneI16Handler OnInsertOneI16;

    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    void InsertOneI16(const int16 N);

    bool InvokeInsertOneI16(const FReducerEventContext& Context, const UInsertOneI16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneI256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt256&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneI256Handler OnInsertOneI256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneI256(const FSpacetimeDBInt256& N);

    bool InvokeInsertOneI256(const FReducerEventContext& Context, const UInsertOneI256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneI32Handler,
        const FReducerEventContext&, Context,
        int32, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneI32Handler OnInsertOneI32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneI32(const int32 N);

    bool InvokeInsertOneI32(const FReducerEventContext& Context, const UInsertOneI32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneI64Handler,
        const FReducerEventContext&, Context,
        int64, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneI64Handler OnInsertOneI64;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneI64(const int64 N);

    bool InvokeInsertOneI64(const FReducerEventContext& Context, const UInsertOneI64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneI8Handler,
        const FReducerEventContext&, Context,
        int8, N
    );
    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    FInsertOneI8Handler OnInsertOneI8;

    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    void InsertOneI8(const int8 N);

    bool InvokeInsertOneI8(const FReducerEventContext& Context, const UInsertOneI8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneIdentityHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBIdentity&, I
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneIdentityHandler OnInsertOneIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneIdentity(const FSpacetimeDBIdentity& I);

    bool InvokeInsertOneIdentity(const FReducerEventContext& Context, const UInsertOneIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneSimpleEnumHandler,
        const FReducerEventContext&, Context,
        const ESimpleEnumType&, E
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneSimpleEnumHandler OnInsertOneSimpleEnum;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneSimpleEnum(const ESimpleEnumType& E);

    bool InvokeInsertOneSimpleEnum(const FReducerEventContext& Context, const UInsertOneSimpleEnumReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneStringHandler,
        const FReducerEventContext&, Context,
        const FString&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneStringHandler OnInsertOneString;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneString(const FString& S);

    bool InvokeInsertOneString(const FReducerEventContext& Context, const UInsertOneStringReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneTimestampHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBTimestamp&, T
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneTimestampHandler OnInsertOneTimestamp;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneTimestamp(const FSpacetimeDBTimestamp& T);

    bool InvokeInsertOneTimestamp(const FReducerEventContext& Context, const UInsertOneTimestampReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneU128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt128&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneU128Handler OnInsertOneU128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneU128(const FSpacetimeDBUInt128& N);

    bool InvokeInsertOneU128(const FReducerEventContext& Context, const UInsertOneU128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneU16Handler,
        const FReducerEventContext&, Context,
        uint16, N
    );
    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    FInsertOneU16Handler OnInsertOneU16;

    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    void InsertOneU16(const uint16 N);

    bool InvokeInsertOneU16(const FReducerEventContext& Context, const UInsertOneU16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneU256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt256&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneU256Handler OnInsertOneU256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneU256(const FSpacetimeDBUInt256& N);

    bool InvokeInsertOneU256(const FReducerEventContext& Context, const UInsertOneU256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneU32Handler,
        const FReducerEventContext&, Context,
        uint32, N
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FInsertOneU32Handler OnInsertOneU32;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void InsertOneU32(const uint32 N);

    bool InvokeInsertOneU32(const FReducerEventContext& Context, const UInsertOneU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneU64Handler,
        const FReducerEventContext&, Context,
        uint64, N
    );
    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    FInsertOneU64Handler OnInsertOneU64;

    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    void InsertOneU64(const uint64 N);

    bool InvokeInsertOneU64(const FReducerEventContext& Context, const UInsertOneU64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneU8Handler,
        const FReducerEventContext&, Context,
        uint8, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneU8Handler OnInsertOneU8;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneU8(const uint8 N);

    bool InvokeInsertOneU8(const FReducerEventContext& Context, const UInsertOneU8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOneUnitStructHandler,
        const FReducerEventContext&, Context,
        const FUnitStructType&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOneUnitStructHandler OnInsertOneUnitStruct;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOneUnitStruct(const FUnitStructType& S);

    bool InvokeInsertOneUnitStruct(const FReducerEventContext& Context, const UInsertOneUnitStructReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOptionEveryPrimitiveStructHandler,
        const FReducerEventContext&, Context,
        const FTestClientOptionalEveryPrimitiveStruct&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOptionEveryPrimitiveStructHandler OnInsertOptionEveryPrimitiveStruct;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOptionEveryPrimitiveStruct(const FTestClientOptionalEveryPrimitiveStruct& S);

    bool InvokeInsertOptionEveryPrimitiveStruct(const FReducerEventContext& Context, const UInsertOptionEveryPrimitiveStructReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOptionI32Handler,
        const FReducerEventContext&, Context,
        FTestClientOptionalInt32, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOptionI32Handler OnInsertOptionI32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOptionI32(const FTestClientOptionalInt32 N);

    bool InvokeInsertOptionI32(const FReducerEventContext& Context, const UInsertOptionI32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOptionIdentityHandler,
        const FReducerEventContext&, Context,
        const FTestClientOptionalIdentity&, I
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOptionIdentityHandler OnInsertOptionIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOptionIdentity(const FTestClientOptionalIdentity& I);

    bool InvokeInsertOptionIdentity(const FReducerEventContext& Context, const UInsertOptionIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOptionSimpleEnumHandler,
        const FReducerEventContext&, Context,
        const FTestClientOptionalSimpleEnum&, E
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOptionSimpleEnumHandler OnInsertOptionSimpleEnum;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOptionSimpleEnum(const FTestClientOptionalSimpleEnum& E);

    bool InvokeInsertOptionSimpleEnum(const FReducerEventContext& Context, const UInsertOptionSimpleEnumReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOptionStringHandler,
        const FReducerEventContext&, Context,
        const FTestClientOptionalString&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOptionStringHandler OnInsertOptionString;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOptionString(const FTestClientOptionalString& S);

    bool InvokeInsertOptionString(const FReducerEventContext& Context, const UInsertOptionStringReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertOptionVecOptionI32Handler,
        const FReducerEventContext&, Context,
        const FTestClientOptionalVecInt32&, V
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertOptionVecOptionI32Handler OnInsertOptionVecOptionI32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertOptionVecOptionI32(const FTestClientOptionalVecInt32& V);

    bool InvokeInsertOptionVecOptionI32(const FReducerEventContext& Context, const UInsertOptionVecOptionI32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkBoolHandler,
        const FReducerEventContext&, Context,
        bool, B,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkBoolHandler OnInsertPkBool;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkBool(const bool B, const int32 Data);

    bool InvokeInsertPkBool(const FReducerEventContext& Context, const UInsertPkBoolReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkConnectionIdHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBConnectionId&, A,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkConnectionIdHandler OnInsertPkConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkConnectionId(const FSpacetimeDBConnectionId& A, const int32 Data);

    bool InvokeInsertPkConnectionId(const FReducerEventContext& Context, const UInsertPkConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkI128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt128&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkI128Handler OnInsertPkI128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkI128(const FSpacetimeDBInt128& N, const int32 Data);

    bool InvokeInsertPkI128(const FReducerEventContext& Context, const UInsertPkI128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkI16Handler,
        const FReducerEventContext&, Context,
        int16, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    FInsertPkI16Handler OnInsertPkI16;

    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    void InsertPkI16(const int16 N, const int32 Data);

    bool InvokeInsertPkI16(const FReducerEventContext& Context, const UInsertPkI16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkI256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt256&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkI256Handler OnInsertPkI256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkI256(const FSpacetimeDBInt256& N, const int32 Data);

    bool InvokeInsertPkI256(const FReducerEventContext& Context, const UInsertPkI256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkI32Handler,
        const FReducerEventContext&, Context,
        int32, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkI32Handler OnInsertPkI32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkI32(const int32 N, const int32 Data);

    bool InvokeInsertPkI32(const FReducerEventContext& Context, const UInsertPkI32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkI64Handler,
        const FReducerEventContext&, Context,
        int64, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkI64Handler OnInsertPkI64;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkI64(const int64 N, const int32 Data);

    bool InvokeInsertPkI64(const FReducerEventContext& Context, const UInsertPkI64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkI8Handler,
        const FReducerEventContext&, Context,
        int8, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    FInsertPkI8Handler OnInsertPkI8;

    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    void InsertPkI8(const int8 N, const int32 Data);

    bool InvokeInsertPkI8(const FReducerEventContext& Context, const UInsertPkI8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkIdentityHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBIdentity&, I,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkIdentityHandler OnInsertPkIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkIdentity(const FSpacetimeDBIdentity& I, const int32 Data);

    bool InvokeInsertPkIdentity(const FReducerEventContext& Context, const UInsertPkIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkSimpleEnumHandler,
        const FReducerEventContext&, Context,
        const ESimpleEnumType&, A,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkSimpleEnumHandler OnInsertPkSimpleEnum;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkSimpleEnum(const ESimpleEnumType& A, const int32 Data);

    bool InvokeInsertPkSimpleEnum(const FReducerEventContext& Context, const UInsertPkSimpleEnumReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkStringHandler,
        const FReducerEventContext&, Context,
        const FString&, S,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkStringHandler OnInsertPkString;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkString(const FString& S, const int32 Data);

    bool InvokeInsertPkString(const FReducerEventContext& Context, const UInsertPkStringReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkU128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt128&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkU128Handler OnInsertPkU128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkU128(const FSpacetimeDBUInt128& N, const int32 Data);

    bool InvokeInsertPkU128(const FReducerEventContext& Context, const UInsertPkU128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkU16Handler,
        const FReducerEventContext&, Context,
        uint16, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    FInsertPkU16Handler OnInsertPkU16;

    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    void InsertPkU16(const uint16 N, const int32 Data);

    bool InvokeInsertPkU16(const FReducerEventContext& Context, const UInsertPkU16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkU256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt256&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkU256Handler OnInsertPkU256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkU256(const FSpacetimeDBUInt256& N, const int32 Data);

    bool InvokeInsertPkU256(const FReducerEventContext& Context, const UInsertPkU256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkU32Handler,
        const FReducerEventContext&, Context,
        uint32, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FInsertPkU32Handler OnInsertPkU32;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void InsertPkU32(const uint32 N, const int32 Data);

    bool InvokeInsertPkU32(const FReducerEventContext& Context, const UInsertPkU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkU32TwoHandler,
        const FReducerEventContext&, Context,
        uint32, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FInsertPkU32TwoHandler OnInsertPkU32Two;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void InsertPkU32Two(const uint32 N, const int32 Data);

    bool InvokeInsertPkU32Two(const FReducerEventContext& Context, const UInsertPkU32TwoReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkU64Handler,
        const FReducerEventContext&, Context,
        uint64, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    FInsertPkU64Handler OnInsertPkU64;

    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    void InsertPkU64(const uint64 N, const int32 Data);

    bool InvokeInsertPkU64(const FReducerEventContext& Context, const UInsertPkU64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertPkU8Handler,
        const FReducerEventContext&, Context,
        uint8, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPkU8Handler OnInsertPkU8;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPkU8(const uint8 N, const int32 Data);

    bool InvokeInsertPkU8(const FReducerEventContext& Context, const UInsertPkU8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertPrimitivesAsStringsHandler,
        const FReducerEventContext&, Context,
        const FEveryPrimitiveStructType&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertPrimitivesAsStringsHandler OnInsertPrimitivesAsStrings;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertPrimitivesAsStrings(const FEveryPrimitiveStructType& S);

    bool InvokeInsertPrimitivesAsStrings(const FReducerEventContext& Context, const UInsertPrimitivesAsStringsReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertTableHoldsTableHandler,
        const FReducerEventContext&, Context,
        const FOneU8Type&, A,
        const FVecU8Type&, B
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertTableHoldsTableHandler OnInsertTableHoldsTable;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertTableHoldsTable(const FOneU8Type& A, const FVecU8Type& B);

    bool InvokeInsertTableHoldsTable(const FReducerEventContext& Context, const UInsertTableHoldsTableReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueBoolHandler,
        const FReducerEventContext&, Context,
        bool, B,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUniqueBoolHandler OnInsertUniqueBool;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUniqueBool(const bool B, const int32 Data);

    bool InvokeInsertUniqueBool(const FReducerEventContext& Context, const UInsertUniqueBoolReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueConnectionIdHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBConnectionId&, A,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUniqueConnectionIdHandler OnInsertUniqueConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUniqueConnectionId(const FSpacetimeDBConnectionId& A, const int32 Data);

    bool InvokeInsertUniqueConnectionId(const FReducerEventContext& Context, const UInsertUniqueConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueI128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt128&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUniqueI128Handler OnInsertUniqueI128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUniqueI128(const FSpacetimeDBInt128& N, const int32 Data);

    bool InvokeInsertUniqueI128(const FReducerEventContext& Context, const UInsertUniqueI128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueI16Handler,
        const FReducerEventContext&, Context,
        int16, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    FInsertUniqueI16Handler OnInsertUniqueI16;

    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    void InsertUniqueI16(const int16 N, const int32 Data);

    bool InvokeInsertUniqueI16(const FReducerEventContext& Context, const UInsertUniqueI16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueI256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt256&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUniqueI256Handler OnInsertUniqueI256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUniqueI256(const FSpacetimeDBInt256& N, const int32 Data);

    bool InvokeInsertUniqueI256(const FReducerEventContext& Context, const UInsertUniqueI256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueI32Handler,
        const FReducerEventContext&, Context,
        int32, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUniqueI32Handler OnInsertUniqueI32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUniqueI32(const int32 N, const int32 Data);

    bool InvokeInsertUniqueI32(const FReducerEventContext& Context, const UInsertUniqueI32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueI64Handler,
        const FReducerEventContext&, Context,
        int64, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUniqueI64Handler OnInsertUniqueI64;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUniqueI64(const int64 N, const int32 Data);

    bool InvokeInsertUniqueI64(const FReducerEventContext& Context, const UInsertUniqueI64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueI8Handler,
        const FReducerEventContext&, Context,
        int8, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    FInsertUniqueI8Handler OnInsertUniqueI8;

    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    void InsertUniqueI8(const int8 N, const int32 Data);

    bool InvokeInsertUniqueI8(const FReducerEventContext& Context, const UInsertUniqueI8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueIdentityHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBIdentity&, I,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUniqueIdentityHandler OnInsertUniqueIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUniqueIdentity(const FSpacetimeDBIdentity& I, const int32 Data);

    bool InvokeInsertUniqueIdentity(const FReducerEventContext& Context, const UInsertUniqueIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueStringHandler,
        const FReducerEventContext&, Context,
        const FString&, S,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUniqueStringHandler OnInsertUniqueString;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUniqueString(const FString& S, const int32 Data);

    bool InvokeInsertUniqueString(const FReducerEventContext& Context, const UInsertUniqueStringReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueU128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt128&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUniqueU128Handler OnInsertUniqueU128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUniqueU128(const FSpacetimeDBUInt128& N, const int32 Data);

    bool InvokeInsertUniqueU128(const FReducerEventContext& Context, const UInsertUniqueU128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueU16Handler,
        const FReducerEventContext&, Context,
        uint16, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    FInsertUniqueU16Handler OnInsertUniqueU16;

    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    void InsertUniqueU16(const uint16 N, const int32 Data);

    bool InvokeInsertUniqueU16(const FReducerEventContext& Context, const UInsertUniqueU16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueU256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt256&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUniqueU256Handler OnInsertUniqueU256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUniqueU256(const FSpacetimeDBUInt256& N, const int32 Data);

    bool InvokeInsertUniqueU256(const FReducerEventContext& Context, const UInsertUniqueU256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueU32Handler,
        const FReducerEventContext&, Context,
        uint32, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FInsertUniqueU32Handler OnInsertUniqueU32;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void InsertUniqueU32(const uint32 N, const int32 Data);

    bool InvokeInsertUniqueU32(const FReducerEventContext& Context, const UInsertUniqueU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_FourParams(
        FInsertUniqueU32UpdatePkU32Handler,
        const FReducerEventContext&, Context,
        uint32, N,
        int32, DUnique,
        int32, DPk
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FInsertUniqueU32UpdatePkU32Handler OnInsertUniqueU32UpdatePkU32;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void InsertUniqueU32UpdatePkU32(const uint32 N, const int32 DUnique, const int32 DPk);

    bool InvokeInsertUniqueU32UpdatePkU32(const FReducerEventContext& Context, const UInsertUniqueU32UpdatePkU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueU64Handler,
        const FReducerEventContext&, Context,
        uint64, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    FInsertUniqueU64Handler OnInsertUniqueU64;

    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    void InsertUniqueU64(const uint64 N, const int32 Data);

    bool InvokeInsertUniqueU64(const FReducerEventContext& Context, const UInsertUniqueU64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUniqueU8Handler,
        const FReducerEventContext&, Context,
        uint8, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUniqueU8Handler OnInsertUniqueU8;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUniqueU8(const uint8 N, const int32 Data);

    bool InvokeInsertUniqueU8(const FReducerEventContext& Context, const UInsertUniqueU8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FInsertUserHandler,
        const FReducerEventContext&, Context,
        const FString&, Name,
        const FSpacetimeDBIdentity&, Identity
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertUserHandler OnInsertUser;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertUser(const FString& Name, const FSpacetimeDBIdentity& Identity);

    bool InvokeInsertUser(const FReducerEventContext& Context, const UInsertUserReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecBoolHandler,
        const FReducerEventContext&, Context,
        const TArray<bool>&, B
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecBoolHandler OnInsertVecBool;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecBool(const TArray<bool>& B);

    bool InvokeInsertVecBool(const FReducerEventContext& Context, const UInsertVecBoolReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecByteStructHandler,
        const FReducerEventContext&, Context,
        const TArray<FByteStructType>&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecByteStructHandler OnInsertVecByteStruct;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecByteStruct(const TArray<FByteStructType>& S);

    bool InvokeInsertVecByteStruct(const FReducerEventContext& Context, const UInsertVecByteStructReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecConnectionIdHandler,
        const FReducerEventContext&, Context,
        const TArray<FSpacetimeDBConnectionId>&, A
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecConnectionIdHandler OnInsertVecConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecConnectionId(const TArray<FSpacetimeDBConnectionId>& A);

    bool InvokeInsertVecConnectionId(const FReducerEventContext& Context, const UInsertVecConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecEnumWithPayloadHandler,
        const FReducerEventContext&, Context,
        const TArray<FEnumWithPayloadType>&, E
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecEnumWithPayloadHandler OnInsertVecEnumWithPayload;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecEnumWithPayload(const TArray<FEnumWithPayloadType>& E);

    bool InvokeInsertVecEnumWithPayload(const FReducerEventContext& Context, const UInsertVecEnumWithPayloadReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecEveryPrimitiveStructHandler,
        const FReducerEventContext&, Context,
        const TArray<FEveryPrimitiveStructType>&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecEveryPrimitiveStructHandler OnInsertVecEveryPrimitiveStruct;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecEveryPrimitiveStruct(const TArray<FEveryPrimitiveStructType>& S);

    bool InvokeInsertVecEveryPrimitiveStruct(const FReducerEventContext& Context, const UInsertVecEveryPrimitiveStructReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecEveryVecStructHandler,
        const FReducerEventContext&, Context,
        const TArray<FEveryVecStructType>&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecEveryVecStructHandler OnInsertVecEveryVecStruct;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecEveryVecStruct(const TArray<FEveryVecStructType>& S);

    bool InvokeInsertVecEveryVecStruct(const FReducerEventContext& Context, const UInsertVecEveryVecStructReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecF32Handler,
        const FReducerEventContext&, Context,
        const TArray<float>&, F
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecF32Handler OnInsertVecF32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecF32(const TArray<float>& F);

    bool InvokeInsertVecF32(const FReducerEventContext& Context, const UInsertVecF32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecF64Handler,
        const FReducerEventContext&, Context,
        const TArray<double>&, F
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecF64Handler OnInsertVecF64;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecF64(const TArray<double>& F);

    bool InvokeInsertVecF64(const FReducerEventContext& Context, const UInsertVecF64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecI128Handler,
        const FReducerEventContext&, Context,
        const TArray<FSpacetimeDBInt128>&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecI128Handler OnInsertVecI128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecI128(const TArray<FSpacetimeDBInt128>& N);

    bool InvokeInsertVecI128(const FReducerEventContext& Context, const UInsertVecI128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecI16Handler,
        const FReducerEventContext&, Context,
        const TArray<int16>&, N
    );
    // NOTE: Not exposed to Blueprint because TArray<int16> types are not Blueprint-compatible
    FInsertVecI16Handler OnInsertVecI16;

    // NOTE: Not exposed to Blueprint because TArray<int16> types are not Blueprint-compatible
    void InsertVecI16(const TArray<int16>& N);

    bool InvokeInsertVecI16(const FReducerEventContext& Context, const UInsertVecI16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecI256Handler,
        const FReducerEventContext&, Context,
        const TArray<FSpacetimeDBInt256>&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecI256Handler OnInsertVecI256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecI256(const TArray<FSpacetimeDBInt256>& N);

    bool InvokeInsertVecI256(const FReducerEventContext& Context, const UInsertVecI256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecI32Handler,
        const FReducerEventContext&, Context,
        const TArray<int32>&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecI32Handler OnInsertVecI32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecI32(const TArray<int32>& N);

    bool InvokeInsertVecI32(const FReducerEventContext& Context, const UInsertVecI32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecI64Handler,
        const FReducerEventContext&, Context,
        const TArray<int64>&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecI64Handler OnInsertVecI64;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecI64(const TArray<int64>& N);

    bool InvokeInsertVecI64(const FReducerEventContext& Context, const UInsertVecI64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecI8Handler,
        const FReducerEventContext&, Context,
        const TArray<int8>&, N
    );
    // NOTE: Not exposed to Blueprint because TArray<int8> types are not Blueprint-compatible
    FInsertVecI8Handler OnInsertVecI8;

    // NOTE: Not exposed to Blueprint because TArray<int8> types are not Blueprint-compatible
    void InsertVecI8(const TArray<int8>& N);

    bool InvokeInsertVecI8(const FReducerEventContext& Context, const UInsertVecI8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecIdentityHandler,
        const FReducerEventContext&, Context,
        const TArray<FSpacetimeDBIdentity>&, I
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecIdentityHandler OnInsertVecIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecIdentity(const TArray<FSpacetimeDBIdentity>& I);

    bool InvokeInsertVecIdentity(const FReducerEventContext& Context, const UInsertVecIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecSimpleEnumHandler,
        const FReducerEventContext&, Context,
        const TArray<ESimpleEnumType>&, E
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecSimpleEnumHandler OnInsertVecSimpleEnum;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecSimpleEnum(const TArray<ESimpleEnumType>& E);

    bool InvokeInsertVecSimpleEnum(const FReducerEventContext& Context, const UInsertVecSimpleEnumReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecStringHandler,
        const FReducerEventContext&, Context,
        const TArray<FString>&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecStringHandler OnInsertVecString;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecString(const TArray<FString>& S);

    bool InvokeInsertVecString(const FReducerEventContext& Context, const UInsertVecStringReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecTimestampHandler,
        const FReducerEventContext&, Context,
        const TArray<FSpacetimeDBTimestamp>&, T
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecTimestampHandler OnInsertVecTimestamp;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecTimestamp(const TArray<FSpacetimeDBTimestamp>& T);

    bool InvokeInsertVecTimestamp(const FReducerEventContext& Context, const UInsertVecTimestampReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecU128Handler,
        const FReducerEventContext&, Context,
        const TArray<FSpacetimeDBUInt128>&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecU128Handler OnInsertVecU128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecU128(const TArray<FSpacetimeDBUInt128>& N);

    bool InvokeInsertVecU128(const FReducerEventContext& Context, const UInsertVecU128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecU16Handler,
        const FReducerEventContext&, Context,
        const TArray<uint16>&, N
    );
    // NOTE: Not exposed to Blueprint because TArray<uint16> types are not Blueprint-compatible
    FInsertVecU16Handler OnInsertVecU16;

    // NOTE: Not exposed to Blueprint because TArray<uint16> types are not Blueprint-compatible
    void InsertVecU16(const TArray<uint16>& N);

    bool InvokeInsertVecU16(const FReducerEventContext& Context, const UInsertVecU16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecU256Handler,
        const FReducerEventContext&, Context,
        const TArray<FSpacetimeDBUInt256>&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecU256Handler OnInsertVecU256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecU256(const TArray<FSpacetimeDBUInt256>& N);

    bool InvokeInsertVecU256(const FReducerEventContext& Context, const UInsertVecU256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecU32Handler,
        const FReducerEventContext&, Context,
        const TArray<uint32>&, N
    );
    // NOTE: Not exposed to Blueprint because TArray<uint32> types are not Blueprint-compatible
    FInsertVecU32Handler OnInsertVecU32;

    // NOTE: Not exposed to Blueprint because TArray<uint32> types are not Blueprint-compatible
    void InsertVecU32(const TArray<uint32>& N);

    bool InvokeInsertVecU32(const FReducerEventContext& Context, const UInsertVecU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecU64Handler,
        const FReducerEventContext&, Context,
        const TArray<uint64>&, N
    );
    // NOTE: Not exposed to Blueprint because TArray<uint64> types are not Blueprint-compatible
    FInsertVecU64Handler OnInsertVecU64;

    // NOTE: Not exposed to Blueprint because TArray<uint64> types are not Blueprint-compatible
    void InsertVecU64(const TArray<uint64>& N);

    bool InvokeInsertVecU64(const FReducerEventContext& Context, const UInsertVecU64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecU8Handler,
        const FReducerEventContext&, Context,
        const TArray<uint8>&, N
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecU8Handler OnInsertVecU8;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecU8(const TArray<uint8>& N);

    bool InvokeInsertVecU8(const FReducerEventContext& Context, const UInsertVecU8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FInsertVecUnitStructHandler,
        const FReducerEventContext&, Context,
        const TArray<FUnitStructType>&, S
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FInsertVecUnitStructHandler OnInsertVecUnitStruct;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void InsertVecUnitStruct(const TArray<FUnitStructType>& S);

    bool InvokeInsertVecUnitStruct(const FReducerEventContext& Context, const UInsertVecUnitStructReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FNoOpSucceedsHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FNoOpSucceedsHandler OnNoOpSucceeds;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void NoOpSucceeds();

    bool InvokeNoOpSucceeds(const FReducerEventContext& Context, const UNoOpSucceedsReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FSendScheduledMessageHandler,
        const FReducerEventContext&, Context,
        const FScheduledTableType&, Arg
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FSendScheduledMessageHandler OnSendScheduledMessage;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void SendScheduledMessage(const FScheduledTableType& Arg);

    bool InvokeSendScheduledMessage(const FReducerEventContext& Context, const USendScheduledMessageReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateIndexedSimpleEnumHandler,
        const FReducerEventContext&, Context,
        const ESimpleEnumType&, A,
        const ESimpleEnumType&, B
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateIndexedSimpleEnumHandler OnUpdateIndexedSimpleEnum;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateIndexedSimpleEnum(const ESimpleEnumType& A, const ESimpleEnumType& B);

    bool InvokeUpdateIndexedSimpleEnum(const FReducerEventContext& Context, const UUpdateIndexedSimpleEnumReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkBoolHandler,
        const FReducerEventContext&, Context,
        bool, B,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkBoolHandler OnUpdatePkBool;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkBool(const bool B, const int32 Data);

    bool InvokeUpdatePkBool(const FReducerEventContext& Context, const UUpdatePkBoolReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkConnectionIdHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBConnectionId&, A,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkConnectionIdHandler OnUpdatePkConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkConnectionId(const FSpacetimeDBConnectionId& A, const int32 Data);

    bool InvokeUpdatePkConnectionId(const FReducerEventContext& Context, const UUpdatePkConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkI128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt128&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkI128Handler OnUpdatePkI128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkI128(const FSpacetimeDBInt128& N, const int32 Data);

    bool InvokeUpdatePkI128(const FReducerEventContext& Context, const UUpdatePkI128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkI16Handler,
        const FReducerEventContext&, Context,
        int16, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    FUpdatePkI16Handler OnUpdatePkI16;

    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    void UpdatePkI16(const int16 N, const int32 Data);

    bool InvokeUpdatePkI16(const FReducerEventContext& Context, const UUpdatePkI16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkI256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt256&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkI256Handler OnUpdatePkI256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkI256(const FSpacetimeDBInt256& N, const int32 Data);

    bool InvokeUpdatePkI256(const FReducerEventContext& Context, const UUpdatePkI256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkI32Handler,
        const FReducerEventContext&, Context,
        int32, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkI32Handler OnUpdatePkI32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkI32(const int32 N, const int32 Data);

    bool InvokeUpdatePkI32(const FReducerEventContext& Context, const UUpdatePkI32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkI64Handler,
        const FReducerEventContext&, Context,
        int64, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkI64Handler OnUpdatePkI64;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkI64(const int64 N, const int32 Data);

    bool InvokeUpdatePkI64(const FReducerEventContext& Context, const UUpdatePkI64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkI8Handler,
        const FReducerEventContext&, Context,
        int8, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    FUpdatePkI8Handler OnUpdatePkI8;

    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    void UpdatePkI8(const int8 N, const int32 Data);

    bool InvokeUpdatePkI8(const FReducerEventContext& Context, const UUpdatePkI8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkIdentityHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBIdentity&, I,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkIdentityHandler OnUpdatePkIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkIdentity(const FSpacetimeDBIdentity& I, const int32 Data);

    bool InvokeUpdatePkIdentity(const FReducerEventContext& Context, const UUpdatePkIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkSimpleEnumHandler,
        const FReducerEventContext&, Context,
        const ESimpleEnumType&, A,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkSimpleEnumHandler OnUpdatePkSimpleEnum;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkSimpleEnum(const ESimpleEnumType& A, const int32 Data);

    bool InvokeUpdatePkSimpleEnum(const FReducerEventContext& Context, const UUpdatePkSimpleEnumReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkStringHandler,
        const FReducerEventContext&, Context,
        const FString&, S,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkStringHandler OnUpdatePkString;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkString(const FString& S, const int32 Data);

    bool InvokeUpdatePkString(const FReducerEventContext& Context, const UUpdatePkStringReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkU128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt128&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkU128Handler OnUpdatePkU128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkU128(const FSpacetimeDBUInt128& N, const int32 Data);

    bool InvokeUpdatePkU128(const FReducerEventContext& Context, const UUpdatePkU128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkU16Handler,
        const FReducerEventContext&, Context,
        uint16, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    FUpdatePkU16Handler OnUpdatePkU16;

    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    void UpdatePkU16(const uint16 N, const int32 Data);

    bool InvokeUpdatePkU16(const FReducerEventContext& Context, const UUpdatePkU16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkU256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt256&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkU256Handler OnUpdatePkU256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkU256(const FSpacetimeDBUInt256& N, const int32 Data);

    bool InvokeUpdatePkU256(const FReducerEventContext& Context, const UUpdatePkU256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkU32Handler,
        const FReducerEventContext&, Context,
        uint32, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FUpdatePkU32Handler OnUpdatePkU32;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void UpdatePkU32(const uint32 N, const int32 Data);

    bool InvokeUpdatePkU32(const FReducerEventContext& Context, const UUpdatePkU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkU32TwoHandler,
        const FReducerEventContext&, Context,
        uint32, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FUpdatePkU32TwoHandler OnUpdatePkU32Two;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void UpdatePkU32Two(const uint32 N, const int32 Data);

    bool InvokeUpdatePkU32Two(const FReducerEventContext& Context, const UUpdatePkU32TwoReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkU64Handler,
        const FReducerEventContext&, Context,
        uint64, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    FUpdatePkU64Handler OnUpdatePkU64;

    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    void UpdatePkU64(const uint64 N, const int32 Data);

    bool InvokeUpdatePkU64(const FReducerEventContext& Context, const UUpdatePkU64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdatePkU8Handler,
        const FReducerEventContext&, Context,
        uint8, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdatePkU8Handler OnUpdatePkU8;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdatePkU8(const uint8 N, const int32 Data);

    bool InvokeUpdatePkU8(const FReducerEventContext& Context, const UUpdatePkU8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueBoolHandler,
        const FReducerEventContext&, Context,
        bool, B,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateUniqueBoolHandler OnUpdateUniqueBool;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateUniqueBool(const bool B, const int32 Data);

    bool InvokeUpdateUniqueBool(const FReducerEventContext& Context, const UUpdateUniqueBoolReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueConnectionIdHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBConnectionId&, A,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateUniqueConnectionIdHandler OnUpdateUniqueConnectionId;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateUniqueConnectionId(const FSpacetimeDBConnectionId& A, const int32 Data);

    bool InvokeUpdateUniqueConnectionId(const FReducerEventContext& Context, const UUpdateUniqueConnectionIdReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueI128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt128&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateUniqueI128Handler OnUpdateUniqueI128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateUniqueI128(const FSpacetimeDBInt128& N, const int32 Data);

    bool InvokeUpdateUniqueI128(const FReducerEventContext& Context, const UUpdateUniqueI128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueI16Handler,
        const FReducerEventContext&, Context,
        int16, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    FUpdateUniqueI16Handler OnUpdateUniqueI16;

    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    void UpdateUniqueI16(const int16 N, const int32 Data);

    bool InvokeUpdateUniqueI16(const FReducerEventContext& Context, const UUpdateUniqueI16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueI256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBInt256&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateUniqueI256Handler OnUpdateUniqueI256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateUniqueI256(const FSpacetimeDBInt256& N, const int32 Data);

    bool InvokeUpdateUniqueI256(const FReducerEventContext& Context, const UUpdateUniqueI256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueI32Handler,
        const FReducerEventContext&, Context,
        int32, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateUniqueI32Handler OnUpdateUniqueI32;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateUniqueI32(const int32 N, const int32 Data);

    bool InvokeUpdateUniqueI32(const FReducerEventContext& Context, const UUpdateUniqueI32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueI64Handler,
        const FReducerEventContext&, Context,
        int64, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateUniqueI64Handler OnUpdateUniqueI64;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateUniqueI64(const int64 N, const int32 Data);

    bool InvokeUpdateUniqueI64(const FReducerEventContext& Context, const UUpdateUniqueI64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueI8Handler,
        const FReducerEventContext&, Context,
        int8, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    FUpdateUniqueI8Handler OnUpdateUniqueI8;

    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    void UpdateUniqueI8(const int8 N, const int32 Data);

    bool InvokeUpdateUniqueI8(const FReducerEventContext& Context, const UUpdateUniqueI8Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueIdentityHandler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBIdentity&, I,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateUniqueIdentityHandler OnUpdateUniqueIdentity;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateUniqueIdentity(const FSpacetimeDBIdentity& I, const int32 Data);

    bool InvokeUpdateUniqueIdentity(const FReducerEventContext& Context, const UUpdateUniqueIdentityReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueStringHandler,
        const FReducerEventContext&, Context,
        const FString&, S,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateUniqueStringHandler OnUpdateUniqueString;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateUniqueString(const FString& S, const int32 Data);

    bool InvokeUpdateUniqueString(const FReducerEventContext& Context, const UUpdateUniqueStringReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueU128Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt128&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateUniqueU128Handler OnUpdateUniqueU128;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateUniqueU128(const FSpacetimeDBUInt128& N, const int32 Data);

    bool InvokeUpdateUniqueU128(const FReducerEventContext& Context, const UUpdateUniqueU128Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueU16Handler,
        const FReducerEventContext&, Context,
        uint16, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    FUpdateUniqueU16Handler OnUpdateUniqueU16;

    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    void UpdateUniqueU16(const uint16 N, const int32 Data);

    bool InvokeUpdateUniqueU16(const FReducerEventContext& Context, const UUpdateUniqueU16Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueU256Handler,
        const FReducerEventContext&, Context,
        const FSpacetimeDBUInt256&, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateUniqueU256Handler OnUpdateUniqueU256;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateUniqueU256(const FSpacetimeDBUInt256& N, const int32 Data);

    bool InvokeUpdateUniqueU256(const FReducerEventContext& Context, const UUpdateUniqueU256Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueU32Handler,
        const FReducerEventContext&, Context,
        uint32, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FUpdateUniqueU32Handler OnUpdateUniqueU32;

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    void UpdateUniqueU32(const uint32 N, const int32 Data);

    bool InvokeUpdateUniqueU32(const FReducerEventContext& Context, const UUpdateUniqueU32Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueU64Handler,
        const FReducerEventContext&, Context,
        uint64, N,
        int32, Data
    );
    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    FUpdateUniqueU64Handler OnUpdateUniqueU64;

    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    void UpdateUniqueU64(const uint64 N, const int32 Data);

    bool InvokeUpdateUniqueU64(const FReducerEventContext& Context, const UUpdateUniqueU64Reducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FUpdateUniqueU8Handler,
        const FReducerEventContext&, Context,
        uint8, N,
        int32, Data
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FUpdateUniqueU8Handler OnUpdateUniqueU8;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void UpdateUniqueU8(const uint8 N, const int32 Data);

    bool InvokeUpdateUniqueU8(const FReducerEventContext& Context, const UUpdateUniqueU8Reducer* Args);

    // Internal error handling
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FInternalOnUnhandledReducerError, const FReducerEventContext&, Context, const FString&, Error);
    FInternalOnUnhandledReducerError InternalOnUnhandledReducerError;

private:

    friend UDbConnection;

    UPROPERTY()
    class UDbConnection* Conn;

    UPROPERTY()
    USetReducerFlags* SetCallReducerFlags;
};

// SubscriptionBuilder class
UCLASS(BlueprintType)
class TESTCLIENT_API USubscriptionBuilder : public USubscriptionBuilderBase
{
    GENERATED_BODY()

public:

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    USubscriptionBuilder* OnApplied(FOnSubscriptionApplied Callback);

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    USubscriptionBuilder* OnError(FOnSubscriptionError Callback);

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    USubscriptionHandle* Subscribe(const TArray<FString>& SQL);

    /** Convenience for subscribing to all rows from all tables */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    USubscriptionHandle* SubscribeToAllTables();


    friend class UDbConnection;
    friend class UDbConnectionBase;

protected:
    UPROPERTY()
    class UDbConnection* Conn;

    // Delegates stored so Subscribe() can bind forwarding callbacks
    FOnSubscriptionApplied OnAppliedDelegateInternal;
    FOnSubscriptionError OnErrorDelegateInternal;
};

// SubscriptionHandle class
UCLASS(BlueprintType)
class TESTCLIENT_API USubscriptionHandle : public USubscriptionHandleBase
{
    GENERATED_BODY()

public:

    USubscriptionHandle() {};

    explicit USubscriptionHandle(UDbConnection* InConn);

    friend class USubscriptionBuilder;

private:
    UPROPERTY()
    class UDbConnection* Conn;

    // Delegates that expose subscription events with connection aware contexts
    FOnSubscriptionApplied OnAppliedDelegate;
    FOnSubscriptionError OnErrorDelegate;

    UFUNCTION()
    void ForwardOnApplied(const FSubscriptionEventContextBase& BaseCtx);

    UFUNCTION()
    void ForwardOnError(const FErrorContextBase& BaseCtx);
};

/*
    @Note: Child class of UDbConnectionBuilderBase.
*/
UCLASS(BlueprintType)
class TESTCLIENT_API UDbConnectionBuilder : public UDbConnectionBuilderBase
{
    GENERATED_BODY()
public:

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithUri(const FString& InUri);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithModuleName(const FString& InName);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithToken(const FString& InToken);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithCompression(const ESpacetimeDBCompression& InCompression);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* OnConnect(FOnConnectDelegate Callback);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* OnConnectError(FOnConnectErrorDelegate Callback);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* OnDisconnect(FOnDisconnectDelegate Callback);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnection* Build();

private:

    // Stored delegates which will be forwarded when the connection events occur.
    FOnConnectDelegate OnConnectDelegateInternal;
    FOnDisconnectDelegate OnDisconnectDelegateInternal;
};

// Main DbConnection class
UCLASS(BlueprintType)
class TESTCLIENT_API UDbConnection : public UDbConnectionBase
{
    GENERATED_BODY()

public:
    explicit UDbConnection(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get());


    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    URemoteTables* Db;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    URemoteReducers* Reducers;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    USetReducerFlags* SetReducerFlags;

    // Delegates that allow users to bind with the concrete connection type.
    FOnConnectDelegate OnConnectDelegate;
    FOnDisconnectDelegate OnDisconnectDelegate;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    USubscriptionBuilder* SubscriptionBuilder();

    /** Static entry point for constructing a connection. */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB", DisplayName = "SpacetimeDB Builder")
    static UDbConnectionBuilder* Builder();

    // Error handling
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnUnhandledReducerError, const FReducerEventContext&, Context, const FString&, Error);
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FOnUnhandledReducerError OnUnhandledReducerError;


protected:

    // Hook up error handling to reducers
    virtual void PostInitProperties() override;

    UFUNCTION()
    void ForwardOnConnect(UDbConnectionBase* BaseConnection, FSpacetimeDBIdentity InIdentity, const FString& InToken);
    UFUNCTION()
    void ForwardOnDisconnect(UDbConnectionBase* BaseConnection, const FString& Error);

    UFUNCTION()
    void OnUnhandledReducerErrorHandler(const FReducerEventContext& Context, const FString& Error);

    // Override the DbConnectionBase methods to handle updates and events
    virtual void DbUpdate(const FDatabaseUpdateType& Update, const FSpacetimeDBEvent& Event) override;
    
    // Override the reducer event handler to dispatch events to the appropriate reducers
    virtual void ReducerEvent(const FReducerEvent& Event) override;
    
    // Override the reducer event failed handler
    virtual void ReducerEventFailed(const FReducerEvent& Event, const FString ErrorMessage) override;
};

