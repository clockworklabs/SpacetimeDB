// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Types/Builtins.h"
#include "ModuleBindings/Types/PkU32TwoType.g.h"
#include "Tables/RemoteTable.h"
#include "DBCache/WithBsatn.h"
#include "DBCache/TableHandle.h"
#include "DBCache/TableCache.h"
#include "PkU32TwoTable.g.generated.h"

UCLASS(Blueprintable)
class TESTCLIENT_API UPkU32TwoNUniqueIndex : public UObject
{
    GENERATED_BODY()

private:
    // Declare an instance of your templated helper.
    // It's private because the UObject wrapper will expose its functionality.
    FUniqueIndexHelper<FPkU32TwoType, uint32, FTableCache<FPkU32TwoType>> NIndexHelper;

public:
    UPkU32TwoNUniqueIndex()
        // Initialize the helper with the specific unique index name
        : NIndexHelper("n") {
    }

    /**
     * Finds a PkU32Two by their unique n.
     * @param Key The n to search for.
     * @return The found FPkU32TwoType, or a default-constructed FPkU32TwoType if not found.
     */
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FPkU32TwoType Find(uint32 Key)
    {
        // Simply delegate the call to the internal helper
        return NIndexHelper.FindUniqueIndex(Key);
    }

    // A public setter to provide the cache to the helper after construction
    // This is a common pattern when the cache might be created or provided by another system.
    void SetCache(TSharedPtr<const FTableCache<FPkU32TwoType>> InPkU32TwoCache)
    {
        NIndexHelper.Cache = InPkU32TwoCache;
    }
};
/***/

UCLASS(BlueprintType)
class TESTCLIENT_API UPkU32TwoTable : public URemoteTable
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly)
    UPkU32TwoNUniqueIndex* N;

    void PostInitialize();

    /** Update function for pk_u32_two table*/
    FTableAppliedDiff<FPkU32TwoType> Update(TArray<FWithBsatn<FPkU32TwoType>> InsertsRef, TArray<FWithBsatn<FPkU32TwoType>> DeletesRef);

    /** Number of subscribed rows currently in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    int32 Count() const;

    /** Return all subscribed rows in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    TArray<FPkU32TwoType> Iter() const;

    // Table Events
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnPkU32TwoInsert,
        const FEventContext&, Context,
        const FPkU32TwoType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams( 
        FOnPkU32TwoUpdate,
        const FEventContext&, Context,
        const FPkU32TwoType&, OldRow,
        const FPkU32TwoType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnPkU32TwoDelete,
        const FEventContext&, Context,
        const FPkU32TwoType&, DeletedRow);

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkU32TwoInsert OnInsert;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkU32TwoUpdate OnUpdate;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkU32TwoDelete OnDelete;

private:
    const FString TableName = TEXT("pk_u32_two");

    TSharedPtr<UClientCache<FPkU32TwoType>> Data;
};
