// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Types/Builtins.h"
#include "ModuleBindings/Types/PkI256Type.g.h"
#include "Tables/RemoteTable.h"
#include "DBCache/WithBsatn.h"
#include "DBCache/TableHandle.h"
#include "DBCache/TableCache.h"
#include "PkI256Table.g.generated.h"

UCLASS(Blueprintable)
class TESTCLIENT_API UPkI256NUniqueIndex : public UObject
{
    GENERATED_BODY()

private:
    // Declare an instance of your templated helper.
    // It's private because the UObject wrapper will expose its functionality.
    FUniqueIndexHelper<FPkI256Type, FSpacetimeDBInt256, FTableCache<FPkI256Type>> NIndexHelper;

public:
    UPkI256NUniqueIndex()
        // Initialize the helper with the specific unique index name
        : NIndexHelper("n") {
    }

    /**
     * Finds a PkI256 by their unique n.
     * @param Key The n to search for.
     * @return The found FPkI256Type, or a default-constructed FPkI256Type if not found.
     */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|PkI256Index")
    FPkI256Type Find(FSpacetimeDBInt256 Key)
    {
        // Simply delegate the call to the internal helper
        return NIndexHelper.FindUniqueIndex(Key);
    }

    // A public setter to provide the cache to the helper after construction
    // This is a common pattern when the cache might be created or provided by another system.
    void SetCache(TSharedPtr<const FTableCache<FPkI256Type>> InPkI256Cache)
    {
        NIndexHelper.Cache = InPkI256Cache;
    }
};
/***/

UCLASS(BlueprintType)
class TESTCLIENT_API UPkI256Table : public URemoteTable
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly)
    UPkI256NUniqueIndex* N;

    void PostInitialize();

    /** Update function for pk_i256 table*/
    FTableAppliedDiff<FPkI256Type> Update(TArray<FWithBsatn<FPkI256Type>> InsertsRef, TArray<FWithBsatn<FPkI256Type>> DeletesRef);

    /** Number of subscribed rows currently in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    int32 Count() const;

    /** Return all subscribed rows in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    TArray<FPkI256Type> Iter() const;

    // Table Events
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnPkI256Insert,
        const FEventContext&, Context,
        const FPkI256Type&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams( 
        FOnPkI256Update,
        const FEventContext&, Context,
        const FPkI256Type&, OldRow,
        const FPkI256Type&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnPkI256Delete,
        const FEventContext&, Context,
        const FPkI256Type&, DeletedRow);

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkI256Insert OnInsert;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkI256Update OnUpdate;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkI256Delete OnDelete;

private:
    const FString TableName = TEXT("pk_i256");

    TSharedPtr<UClientCache<FPkI256Type>> Data;
};
