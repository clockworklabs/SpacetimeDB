// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "ModuleBindings/Types/ByteStructType.g.h"
#include "ModuleBindings/Types/EnumWithPayloadType.g.h"
#include "ModuleBindings/Types/EveryPrimitiveStructType.g.h"
#include "ModuleBindings/Types/EveryVecStructType.g.h"
#include "ModuleBindings/Types/SimpleEnumType.g.h"
#include "ModuleBindings/Types/UnitStructType.g.h"
#include "Types/Builtins.h"
#include "LargeTableType.g.generated.h"

USTRUCT(BlueprintType)
struct TESTCLIENT_API FLargeTableType
{
    GENERATED_BODY()

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    uint8 A = 0;

    // NOTE: uint16 field not exposed to Blueprint due to non-blueprintable elements
    uint16 B = 0;

    // NOTE: uint32 field not exposed to Blueprint due to non-blueprintable elements
    uint32 C = 0;

    // NOTE: uint64 field not exposed to Blueprint due to non-blueprintable elements
    uint64 D = 0;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FSpacetimeDBUInt128 E;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FSpacetimeDBUInt256 F;

    // NOTE: int8 field not exposed to Blueprint due to non-blueprintable elements
    int8 G = 0;

    // NOTE: int16 field not exposed to Blueprint due to non-blueprintable elements
    int16 H = 0;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    int32 I = 0;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    int64 J = 0;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FSpacetimeDBInt128 K;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FSpacetimeDBInt256 L;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    bool M = false;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    float N = 0.0f;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    double O = 0.0;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FString P;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    ESimpleEnumType Q;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FEnumWithPayloadType R;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FUnitStructType S;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FByteStructType T;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FEveryPrimitiveStructType U;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FEveryVecStructType V;

    FORCEINLINE bool operator==(const FLargeTableType& Other) const
    {
        return A == Other.A && B == Other.B && C == Other.C && D == Other.D && E == Other.E && F == Other.F && G == Other.G && H == Other.H && I == Other.I && J == Other.J && K == Other.K && L == Other.L && M == Other.M && N == Other.N && O == Other.O && P == Other.P && Q == Other.Q && R == Other.R && S == Other.S && T == Other.T && U == Other.U && V == Other.V;
    }

    FORCEINLINE bool operator!=(const FLargeTableType& Other) const
    {
        return !(*this == Other);
    }
};

/**
 * Custom hash function for FLargeTableType.
 * Combines the hashes of all fields that are compared in operator==.
 * @param LargeTableType The FLargeTableType instance to hash.
 * @return The combined hash value.
 */
FORCEINLINE uint32 GetTypeHash(const FLargeTableType& LargeTableType)
{
    uint32 Hash = GetTypeHash(LargeTableType.A);
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.B));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.C));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.D));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.E));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.F));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.G));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.H));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.I));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.J));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.K));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.L));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.M));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.N));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.O));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.P));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.Q));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.R));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.S));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.T));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.U));
    Hash = HashCombine(Hash, GetTypeHash(LargeTableType.V));
    return Hash;
}

namespace UE::SpacetimeDB
{
    UE_SPACETIMEDB_ENABLE_TARRAY(FLargeTableType);

    UE_SPACETIMEDB_STRUCT(FLargeTableType, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V);
}
