// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Types/Builtins.h"
#include "ModuleBindings/Types/PkSimpleEnumType.g.h"
#include "Tables/RemoteTable.h"
#include "DBCache/WithBsatn.h"
#include "DBCache/TableHandle.h"
#include "DBCache/TableCache.h"
#include "PkSimpleEnumTable.g.generated.h"

UCLASS(Blueprintable)
class TESTCLIENT_API UPkSimpleEnumAUniqueIndex : public UObject
{
    GENERATED_BODY()

private:
    // Declare an instance of your templated helper.
    // It's private because the UObject wrapper will expose its functionality.
    FUniqueIndexHelper<FPkSimpleEnumType, ESimpleEnumType, FTableCache<FPkSimpleEnumType>> AIndexHelper;

public:
    UPkSimpleEnumAUniqueIndex()
        // Initialize the helper with the specific unique index name
        : AIndexHelper("a") {
    }

    /**
     * Finds a PkSimpleEnum by their unique a.
     * @param Key The a to search for.
     * @return The found FPkSimpleEnumType, or a default-constructed FPkSimpleEnumType if not found.
     */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|PkSimpleEnumIndex")
    FPkSimpleEnumType Find(ESimpleEnumType Key)
    {
        // Simply delegate the call to the internal helper
        return AIndexHelper.FindUniqueIndex(Key);
    }

    // A public setter to provide the cache to the helper after construction
    // This is a common pattern when the cache might be created or provided by another system.
    void SetCache(TSharedPtr<const FTableCache<FPkSimpleEnumType>> InPkSimpleEnumCache)
    {
        AIndexHelper.Cache = InPkSimpleEnumCache;
    }
};
/***/

UCLASS(BlueprintType)
class TESTCLIENT_API UPkSimpleEnumTable : public URemoteTable
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly)
    UPkSimpleEnumAUniqueIndex* A;

    void PostInitialize();

    /** Update function for pk_simple_enum table*/
    FTableAppliedDiff<FPkSimpleEnumType> Update(TArray<FWithBsatn<FPkSimpleEnumType>> InsertsRef, TArray<FWithBsatn<FPkSimpleEnumType>> DeletesRef);

    /** Number of subscribed rows currently in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    int32 Count() const;

    /** Return all subscribed rows in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    TArray<FPkSimpleEnumType> Iter() const;

    // Table Events
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnPkSimpleEnumInsert,
        const FEventContext&, Context,
        const FPkSimpleEnumType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams( 
        FOnPkSimpleEnumUpdate,
        const FEventContext&, Context,
        const FPkSimpleEnumType&, OldRow,
        const FPkSimpleEnumType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnPkSimpleEnumDelete,
        const FEventContext&, Context,
        const FPkSimpleEnumType&, DeletedRow);

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkSimpleEnumInsert OnInsert;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkSimpleEnumUpdate OnUpdate;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnPkSimpleEnumDelete OnDelete;

private:
    const FString TableName = TEXT("pk_simple_enum");

    TSharedPtr<UClientCache<FPkSimpleEnumType>> Data;
};
