// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "ModuleBindings/Types/SimpleEnumType.g.h"
#include "Types/Builtins.h"
#include "Kismet/BlueprintFunctionLibrary.h"
#include "EnumWithPayloadType.g.generated.h"

UENUM(BlueprintType)
enum class EEnumWithPayloadTag : uint8
{
    U8,
    U16,
    U32,
    U64,
    U128,
    U256,
    I8,
    I16,
    I32,
    I64,
    I128,
    I256,
    Bool,
    F32,
    F64,
    Str,
    Identity,
    ConnectionId,
    Timestamp,
    Bytes,
    Ints,
    Strings,
    SimpleEnums
};

USTRUCT(BlueprintType)
struct TESTCLIENT_API FEnumWithPayloadType
{
    GENERATED_BODY()

public:
    FEnumWithPayloadType() = default;

    TVariant<TArray<uint8>, float, bool, double, FSpacetimeDBUInt128, uint64, FSpacetimeDBInt256, FSpacetimeDBUInt256, uint32, FSpacetimeDBIdentity, int64, uint8, int8, FSpacetimeDBInt128, FSpacetimeDBConnectionId, FSpacetimeDBTimestamp, uint16, TArray<FString>, TArray<ESimpleEnumType>, FString, int16, TArray<int32>, int32> MessageData;

    UPROPERTY(BlueprintReadOnly)
    EEnumWithPayloadTag Tag = static_cast<EEnumWithPayloadTag>(0);

    static FEnumWithPayloadType U8(const uint8& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::U8;
        Obj.MessageData.Set<uint8>(Value);
        return Obj;
    }

    static FEnumWithPayloadType U16(const uint16& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::U16;
        Obj.MessageData.Set<uint16>(Value);
        return Obj;
    }

    static FEnumWithPayloadType U32(const uint32& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::U32;
        Obj.MessageData.Set<uint32>(Value);
        return Obj;
    }

    static FEnumWithPayloadType U64(const uint64& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::U64;
        Obj.MessageData.Set<uint64>(Value);
        return Obj;
    }

    static FEnumWithPayloadType U128(const FSpacetimeDBUInt128& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::U128;
        Obj.MessageData.Set<FSpacetimeDBUInt128>(Value);
        return Obj;
    }

    static FEnumWithPayloadType U256(const FSpacetimeDBUInt256& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::U256;
        Obj.MessageData.Set<FSpacetimeDBUInt256>(Value);
        return Obj;
    }

    static FEnumWithPayloadType I8(const int8& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::I8;
        Obj.MessageData.Set<int8>(Value);
        return Obj;
    }

    static FEnumWithPayloadType I16(const int16& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::I16;
        Obj.MessageData.Set<int16>(Value);
        return Obj;
    }

    static FEnumWithPayloadType I32(const int32& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::I32;
        Obj.MessageData.Set<int32>(Value);
        return Obj;
    }

    static FEnumWithPayloadType I64(const int64& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::I64;
        Obj.MessageData.Set<int64>(Value);
        return Obj;
    }

    static FEnumWithPayloadType I128(const FSpacetimeDBInt128& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::I128;
        Obj.MessageData.Set<FSpacetimeDBInt128>(Value);
        return Obj;
    }

    static FEnumWithPayloadType I256(const FSpacetimeDBInt256& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::I256;
        Obj.MessageData.Set<FSpacetimeDBInt256>(Value);
        return Obj;
    }

    static FEnumWithPayloadType Bool(const bool& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::Bool;
        Obj.MessageData.Set<bool>(Value);
        return Obj;
    }

    static FEnumWithPayloadType F32(const float& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::F32;
        Obj.MessageData.Set<float>(Value);
        return Obj;
    }

    static FEnumWithPayloadType F64(const double& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::F64;
        Obj.MessageData.Set<double>(Value);
        return Obj;
    }

    static FEnumWithPayloadType Str(const FString& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::Str;
        Obj.MessageData.Set<FString>(Value);
        return Obj;
    }

    static FEnumWithPayloadType Identity(const FSpacetimeDBIdentity& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::Identity;
        Obj.MessageData.Set<FSpacetimeDBIdentity>(Value);
        return Obj;
    }

    static FEnumWithPayloadType ConnectionId(const FSpacetimeDBConnectionId& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::ConnectionId;
        Obj.MessageData.Set<FSpacetimeDBConnectionId>(Value);
        return Obj;
    }

    static FEnumWithPayloadType Timestamp(const FSpacetimeDBTimestamp& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::Timestamp;
        Obj.MessageData.Set<FSpacetimeDBTimestamp>(Value);
        return Obj;
    }

    static FEnumWithPayloadType Bytes(const TArray<uint8>& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::Bytes;
        Obj.MessageData.Set<TArray<uint8>>(Value);
        return Obj;
    }

    static FEnumWithPayloadType Ints(const TArray<int32>& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::Ints;
        Obj.MessageData.Set<TArray<int32>>(Value);
        return Obj;
    }

    static FEnumWithPayloadType Strings(const TArray<FString>& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::Strings;
        Obj.MessageData.Set<TArray<FString>>(Value);
        return Obj;
    }

    static FEnumWithPayloadType SimpleEnums(const TArray<ESimpleEnumType>& Value)
    {
        FEnumWithPayloadType Obj;
        Obj.Tag = EEnumWithPayloadTag::SimpleEnums;
        Obj.MessageData.Set<TArray<ESimpleEnumType>>(Value);
        return Obj;
    }

    FORCEINLINE bool IsU8() const { return Tag == EEnumWithPayloadTag::U8; }

    FORCEINLINE uint8 GetAsU8() const
    {
        ensureMsgf(IsU8(), TEXT("MessageData does not hold U8!"));
        return MessageData.Get<uint8>();
    }

    FORCEINLINE bool IsU16() const { return Tag == EEnumWithPayloadTag::U16; }

    FORCEINLINE uint16 GetAsU16() const
    {
        ensureMsgf(IsU16(), TEXT("MessageData does not hold U16!"));
        return MessageData.Get<uint16>();
    }

    FORCEINLINE bool IsU32() const { return Tag == EEnumWithPayloadTag::U32; }

    FORCEINLINE uint32 GetAsU32() const
    {
        ensureMsgf(IsU32(), TEXT("MessageData does not hold U32!"));
        return MessageData.Get<uint32>();
    }

    FORCEINLINE bool IsU64() const { return Tag == EEnumWithPayloadTag::U64; }

    FORCEINLINE uint64 GetAsU64() const
    {
        ensureMsgf(IsU64(), TEXT("MessageData does not hold U64!"));
        return MessageData.Get<uint64>();
    }

    FORCEINLINE bool IsU128() const { return Tag == EEnumWithPayloadTag::U128; }

    FORCEINLINE FSpacetimeDBUInt128 GetAsU128() const
    {
        ensureMsgf(IsU128(), TEXT("MessageData does not hold U128!"));
        return MessageData.Get<FSpacetimeDBUInt128>();
    }

    FORCEINLINE bool IsU256() const { return Tag == EEnumWithPayloadTag::U256; }

    FORCEINLINE FSpacetimeDBUInt256 GetAsU256() const
    {
        ensureMsgf(IsU256(), TEXT("MessageData does not hold U256!"));
        return MessageData.Get<FSpacetimeDBUInt256>();
    }

    FORCEINLINE bool IsI8() const { return Tag == EEnumWithPayloadTag::I8; }

    FORCEINLINE int8 GetAsI8() const
    {
        ensureMsgf(IsI8(), TEXT("MessageData does not hold I8!"));
        return MessageData.Get<int8>();
    }

    FORCEINLINE bool IsI16() const { return Tag == EEnumWithPayloadTag::I16; }

    FORCEINLINE int16 GetAsI16() const
    {
        ensureMsgf(IsI16(), TEXT("MessageData does not hold I16!"));
        return MessageData.Get<int16>();
    }

    FORCEINLINE bool IsI32() const { return Tag == EEnumWithPayloadTag::I32; }

    FORCEINLINE int32 GetAsI32() const
    {
        ensureMsgf(IsI32(), TEXT("MessageData does not hold I32!"));
        return MessageData.Get<int32>();
    }

    FORCEINLINE bool IsI64() const { return Tag == EEnumWithPayloadTag::I64; }

    FORCEINLINE int64 GetAsI64() const
    {
        ensureMsgf(IsI64(), TEXT("MessageData does not hold I64!"));
        return MessageData.Get<int64>();
    }

    FORCEINLINE bool IsI128() const { return Tag == EEnumWithPayloadTag::I128; }

    FORCEINLINE FSpacetimeDBInt128 GetAsI128() const
    {
        ensureMsgf(IsI128(), TEXT("MessageData does not hold I128!"));
        return MessageData.Get<FSpacetimeDBInt128>();
    }

    FORCEINLINE bool IsI256() const { return Tag == EEnumWithPayloadTag::I256; }

    FORCEINLINE FSpacetimeDBInt256 GetAsI256() const
    {
        ensureMsgf(IsI256(), TEXT("MessageData does not hold I256!"));
        return MessageData.Get<FSpacetimeDBInt256>();
    }

    FORCEINLINE bool IsBool() const { return Tag == EEnumWithPayloadTag::Bool; }

    FORCEINLINE bool GetAsBool() const
    {
        ensureMsgf(IsBool(), TEXT("MessageData does not hold Bool!"));
        return MessageData.Get<bool>();
    }

    FORCEINLINE bool IsF32() const { return Tag == EEnumWithPayloadTag::F32; }

    FORCEINLINE float GetAsF32() const
    {
        ensureMsgf(IsF32(), TEXT("MessageData does not hold F32!"));
        return MessageData.Get<float>();
    }

    FORCEINLINE bool IsF64() const { return Tag == EEnumWithPayloadTag::F64; }

    FORCEINLINE double GetAsF64() const
    {
        ensureMsgf(IsF64(), TEXT("MessageData does not hold F64!"));
        return MessageData.Get<double>();
    }

    FORCEINLINE bool IsStr() const { return Tag == EEnumWithPayloadTag::Str; }

    FORCEINLINE FString GetAsStr() const
    {
        ensureMsgf(IsStr(), TEXT("MessageData does not hold Str!"));
        return MessageData.Get<FString>();
    }

    FORCEINLINE bool IsIdentity() const { return Tag == EEnumWithPayloadTag::Identity; }

    FORCEINLINE FSpacetimeDBIdentity GetAsIdentity() const
    {
        ensureMsgf(IsIdentity(), TEXT("MessageData does not hold Identity!"));
        return MessageData.Get<FSpacetimeDBIdentity>();
    }

    FORCEINLINE bool IsConnectionId() const { return Tag == EEnumWithPayloadTag::ConnectionId; }

    FORCEINLINE FSpacetimeDBConnectionId GetAsConnectionId() const
    {
        ensureMsgf(IsConnectionId(), TEXT("MessageData does not hold ConnectionId!"));
        return MessageData.Get<FSpacetimeDBConnectionId>();
    }

    FORCEINLINE bool IsTimestamp() const { return Tag == EEnumWithPayloadTag::Timestamp; }

    FORCEINLINE FSpacetimeDBTimestamp GetAsTimestamp() const
    {
        ensureMsgf(IsTimestamp(), TEXT("MessageData does not hold Timestamp!"));
        return MessageData.Get<FSpacetimeDBTimestamp>();
    }

    FORCEINLINE bool IsBytes() const { return Tag == EEnumWithPayloadTag::Bytes; }

    FORCEINLINE TArray<uint8> GetAsBytes() const
    {
        ensureMsgf(IsBytes(), TEXT("MessageData does not hold Bytes!"));
        return MessageData.Get<TArray<uint8>>();
    }

    FORCEINLINE bool IsInts() const { return Tag == EEnumWithPayloadTag::Ints; }

    FORCEINLINE TArray<int32> GetAsInts() const
    {
        ensureMsgf(IsInts(), TEXT("MessageData does not hold Ints!"));
        return MessageData.Get<TArray<int32>>();
    }

    FORCEINLINE bool IsStrings() const { return Tag == EEnumWithPayloadTag::Strings; }

    FORCEINLINE TArray<FString> GetAsStrings() const
    {
        ensureMsgf(IsStrings(), TEXT("MessageData does not hold Strings!"));
        return MessageData.Get<TArray<FString>>();
    }

    FORCEINLINE bool IsSimpleEnums() const { return Tag == EEnumWithPayloadTag::SimpleEnums; }

    FORCEINLINE TArray<ESimpleEnumType> GetAsSimpleEnums() const
    {
        ensureMsgf(IsSimpleEnums(), TEXT("MessageData does not hold SimpleEnums!"));
        return MessageData.Get<TArray<ESimpleEnumType>>();
    }

    // Inline equality operators
    FORCEINLINE bool operator==(const FEnumWithPayloadType& Other) const
    {
        if (Tag != Other.Tag) return false;

        switch (Tag)
        {
            case EEnumWithPayloadTag::U8:
                return GetAsU8() == Other.GetAsU8();
            case EEnumWithPayloadTag::U16:
                return GetAsU16() == Other.GetAsU16();
            case EEnumWithPayloadTag::U32:
                return GetAsU32() == Other.GetAsU32();
            case EEnumWithPayloadTag::U64:
                return GetAsU64() == Other.GetAsU64();
            case EEnumWithPayloadTag::U128:
                return GetAsU128() == Other.GetAsU128();
            case EEnumWithPayloadTag::U256:
                return GetAsU256() == Other.GetAsU256();
            case EEnumWithPayloadTag::I8:
                return GetAsI8() == Other.GetAsI8();
            case EEnumWithPayloadTag::I16:
                return GetAsI16() == Other.GetAsI16();
            case EEnumWithPayloadTag::I32:
                return GetAsI32() == Other.GetAsI32();
            case EEnumWithPayloadTag::I64:
                return GetAsI64() == Other.GetAsI64();
            case EEnumWithPayloadTag::I128:
                return GetAsI128() == Other.GetAsI128();
            case EEnumWithPayloadTag::I256:
                return GetAsI256() == Other.GetAsI256();
            case EEnumWithPayloadTag::Bool:
                return GetAsBool() == Other.GetAsBool();
            case EEnumWithPayloadTag::F32:
                return GetAsF32() == Other.GetAsF32();
            case EEnumWithPayloadTag::F64:
                return GetAsF64() == Other.GetAsF64();
            case EEnumWithPayloadTag::Str:
                return GetAsStr() == Other.GetAsStr();
            case EEnumWithPayloadTag::Identity:
                return GetAsIdentity() == Other.GetAsIdentity();
            case EEnumWithPayloadTag::ConnectionId:
                return GetAsConnectionId() == Other.GetAsConnectionId();
            case EEnumWithPayloadTag::Timestamp:
                return GetAsTimestamp() == Other.GetAsTimestamp();
            case EEnumWithPayloadTag::Bytes:
                return GetAsBytes() == Other.GetAsBytes();
            case EEnumWithPayloadTag::Ints:
                return GetAsInts() == Other.GetAsInts();
            case EEnumWithPayloadTag::Strings:
                return GetAsStrings() == Other.GetAsStrings();
            case EEnumWithPayloadTag::SimpleEnums:
                return GetAsSimpleEnums() == Other.GetAsSimpleEnums();
            default:
                return false;
        }
    }

    FORCEINLINE bool operator!=(const FEnumWithPayloadType& Other) const
    {
        return !(*this == Other);
    }
};

/**
 * Custom hash function for FEnumWithPayloadType.
 * Combines the hashes of all fields that are compared in operator==.
 * @param EnumWithPayloadType The FEnumWithPayloadType instance to hash.
 * @return The combined hash value.
 */
FORCEINLINE uint32 GetTypeHash(const FEnumWithPayloadType& EnumWithPayload)
{
    const uint32 TagHash = GetTypeHash(static_cast<uint8>(EnumWithPayload.Tag));
    switch (EnumWithPayload.Tag)
    {
        case EEnumWithPayloadTag::U8: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsU8()));
        case EEnumWithPayloadTag::U16: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsU16()));
        case EEnumWithPayloadTag::U32: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsU32()));
        case EEnumWithPayloadTag::U64: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsU64()));
        case EEnumWithPayloadTag::U128: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsU128()));
        case EEnumWithPayloadTag::U256: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsU256()));
        case EEnumWithPayloadTag::I8: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsI8()));
        case EEnumWithPayloadTag::I16: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsI16()));
        case EEnumWithPayloadTag::I32: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsI32()));
        case EEnumWithPayloadTag::I64: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsI64()));
        case EEnumWithPayloadTag::I128: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsI128()));
        case EEnumWithPayloadTag::I256: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsI256()));
        case EEnumWithPayloadTag::Bool: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsBool()));
        case EEnumWithPayloadTag::F32: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsF32()));
        case EEnumWithPayloadTag::F64: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsF64()));
        case EEnumWithPayloadTag::Str: return HashCombine(TagHash, GetTypeHash(EnumWithPayload.GetAsStr()));
        case EEnumWithPayloadTag::Identity: return HashCombine(TagHash, ::GetTypeHash(EnumWithPayload.GetAsIdentity()));
        case EEnumWithPayloadTag::ConnectionId: return HashCombine(TagHash, ::GetTypeHash(EnumWithPayload.GetAsConnectionId()));
        case EEnumWithPayloadTag::Timestamp: return HashCombine(TagHash, ::GetTypeHash(EnumWithPayload.GetAsTimestamp()));
        case EEnumWithPayloadTag::Bytes: return HashCombine(TagHash, ::GetTypeHash(EnumWithPayload.GetAsBytes()));
        case EEnumWithPayloadTag::Ints: return HashCombine(TagHash, ::GetTypeHash(EnumWithPayload.GetAsInts()));
        case EEnumWithPayloadTag::Strings: return HashCombine(TagHash, ::GetTypeHash(EnumWithPayload.GetAsStrings()));
        case EEnumWithPayloadTag::SimpleEnums: return HashCombine(TagHash, ::GetTypeHash(EnumWithPayload.GetAsSimpleEnums()));
        default: return TagHash;
    }
}

namespace UE::SpacetimeDB
{
    UE_SPACETIMEDB_ENABLE_TARRAY(FEnumWithPayloadType);

    UE_SPACETIMEDB_TAGGED_ENUM(
        FEnumWithPayloadType,
        EEnumWithPayloadTag,
        MessageData,
        U8, uint8,
        U16, uint16,
        U32, uint32,
        U64, uint64,
        U128, FSpacetimeDBUInt128,
        U256, FSpacetimeDBUInt256,
        I8, int8,
        I16, int16,
        I32, int32,
        I64, int64,
        I128, FSpacetimeDBInt128,
        I256, FSpacetimeDBInt256,
        Bool, bool,
        F32, float,
        F64, double,
        Str, FString,
        Identity, FSpacetimeDBIdentity,
        ConnectionId, FSpacetimeDBConnectionId,
        Timestamp, FSpacetimeDBTimestamp,
        Bytes, TArray<uint8>,
        Ints, TArray<int32>,
        Strings, TArray<FString>,
        SimpleEnums, TArray<ESimpleEnumType>
    );
}

UCLASS()
class TESTCLIENT_API UEnumWithPayloadBpLib : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

private:
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType U8(const uint8& InValue)
    {
        return FEnumWithPayloadType::U8(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsU8(const FEnumWithPayloadType& InValue) { return InValue.IsU8(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static uint8 GetAsU8(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsU8();
    }

    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    static FEnumWithPayloadType U16(const uint16& InValue)
    {
        return FEnumWithPayloadType::U16(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsU16(const FEnumWithPayloadType& InValue) { return InValue.IsU16(); }

    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    static uint16 GetAsU16(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsU16();
    }

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    static FEnumWithPayloadType U32(const uint32& InValue)
    {
        return FEnumWithPayloadType::U32(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsU32(const FEnumWithPayloadType& InValue) { return InValue.IsU32(); }

    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    static uint32 GetAsU32(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsU32();
    }

    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    static FEnumWithPayloadType U64(const uint64& InValue)
    {
        return FEnumWithPayloadType::U64(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsU64(const FEnumWithPayloadType& InValue) { return InValue.IsU64(); }

    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    static uint64 GetAsU64(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsU64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType U128(const FSpacetimeDBUInt128& InValue)
    {
        return FEnumWithPayloadType::U128(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsU128(const FEnumWithPayloadType& InValue) { return InValue.IsU128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static FSpacetimeDBUInt128 GetAsU128(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsU128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType U256(const FSpacetimeDBUInt256& InValue)
    {
        return FEnumWithPayloadType::U256(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsU256(const FEnumWithPayloadType& InValue) { return InValue.IsU256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static FSpacetimeDBUInt256 GetAsU256(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsU256();
    }

    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    static FEnumWithPayloadType I8(const int8& InValue)
    {
        return FEnumWithPayloadType::I8(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsI8(const FEnumWithPayloadType& InValue) { return InValue.IsI8(); }

    // NOTE: Not exposed to Blueprint because int8 types are not Blueprint-compatible
    static int8 GetAsI8(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsI8();
    }

    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    static FEnumWithPayloadType I16(const int16& InValue)
    {
        return FEnumWithPayloadType::I16(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsI16(const FEnumWithPayloadType& InValue) { return InValue.IsI16(); }

    // NOTE: Not exposed to Blueprint because int16 types are not Blueprint-compatible
    static int16 GetAsI16(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsI16();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType I32(const int32& InValue)
    {
        return FEnumWithPayloadType::I32(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsI32(const FEnumWithPayloadType& InValue) { return InValue.IsI32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static int32 GetAsI32(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsI32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType I64(const int64& InValue)
    {
        return FEnumWithPayloadType::I64(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsI64(const FEnumWithPayloadType& InValue) { return InValue.IsI64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static int64 GetAsI64(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsI64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType I128(const FSpacetimeDBInt128& InValue)
    {
        return FEnumWithPayloadType::I128(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsI128(const FEnumWithPayloadType& InValue) { return InValue.IsI128(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static FSpacetimeDBInt128 GetAsI128(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsI128();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType I256(const FSpacetimeDBInt256& InValue)
    {
        return FEnumWithPayloadType::I256(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsI256(const FEnumWithPayloadType& InValue) { return InValue.IsI256(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static FSpacetimeDBInt256 GetAsI256(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsI256();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType Bool(const bool& InValue)
    {
        return FEnumWithPayloadType::Bool(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsBool(const FEnumWithPayloadType& InValue) { return InValue.IsBool(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool GetAsBool(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsBool();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType F32(const float& InValue)
    {
        return FEnumWithPayloadType::F32(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsF32(const FEnumWithPayloadType& InValue) { return InValue.IsF32(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static float GetAsF32(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsF32();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType F64(const double& InValue)
    {
        return FEnumWithPayloadType::F64(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsF64(const FEnumWithPayloadType& InValue) { return InValue.IsF64(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static double GetAsF64(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsF64();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType Str(const FString& InValue)
    {
        return FEnumWithPayloadType::Str(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsStr(const FEnumWithPayloadType& InValue) { return InValue.IsStr(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static FString GetAsStr(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsStr();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType Identity(const FSpacetimeDBIdentity& InValue)
    {
        return FEnumWithPayloadType::Identity(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsIdentity(const FEnumWithPayloadType& InValue) { return InValue.IsIdentity(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static FSpacetimeDBIdentity GetAsIdentity(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsIdentity();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType ConnectionId(const FSpacetimeDBConnectionId& InValue)
    {
        return FEnumWithPayloadType::ConnectionId(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsConnectionId(const FEnumWithPayloadType& InValue) { return InValue.IsConnectionId(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static FSpacetimeDBConnectionId GetAsConnectionId(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsConnectionId();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType Timestamp(const FSpacetimeDBTimestamp& InValue)
    {
        return FEnumWithPayloadType::Timestamp(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsTimestamp(const FEnumWithPayloadType& InValue) { return InValue.IsTimestamp(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static FSpacetimeDBTimestamp GetAsTimestamp(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsTimestamp();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType Bytes(const TArray<uint8>& InValue)
    {
        return FEnumWithPayloadType::Bytes(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsBytes(const FEnumWithPayloadType& InValue) { return InValue.IsBytes(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static TArray<uint8> GetAsBytes(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsBytes();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType Ints(const TArray<int32>& InValue)
    {
        return FEnumWithPayloadType::Ints(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsInts(const FEnumWithPayloadType& InValue) { return InValue.IsInts(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static TArray<int32> GetAsInts(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsInts();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType Strings(const TArray<FString>& InValue)
    {
        return FEnumWithPayloadType::Strings(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsStrings(const FEnumWithPayloadType& InValue) { return InValue.IsStrings(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static TArray<FString> GetAsStrings(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsStrings();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EnumWithPayload")
    static FEnumWithPayloadType SimpleEnums(const TArray<ESimpleEnumType>& InValue)
    {
        return FEnumWithPayloadType::SimpleEnums(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static bool IsSimpleEnums(const FEnumWithPayloadType& InValue) { return InValue.IsSimpleEnums(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|EnumWithPayload")
    static TArray<ESimpleEnumType> GetAsSimpleEnums(const FEnumWithPayloadType& InValue)
    {
        return InValue.GetAsSimpleEnums();
    }

};
