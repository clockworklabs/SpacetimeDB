// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Types/Builtins.h"
#include "ModuleBindings/Types/UserType.g.h"
#include "Tables/RemoteTable.h"
#include "DBCache/WithBsatn.h"
#include "DBCache/TableHandle.h"
#include "DBCache/TableCache.h"
#include "UserTable.g.generated.h"

UCLASS(Blueprintable)
class QUICKSTARTCHAT_API UUserIdentityUniqueIndex : public UObject
{
    GENERATED_BODY()

private:
    // Declare an instance of your templated helper.
    // It's private because the UObject wrapper will expose its functionality.
    FUniqueIndexHelper<FUserType, FSpacetimeDBIdentity, FTableCache<FUserType>> IdentityIndexHelper;

public:
    UUserIdentityUniqueIndex()
        // Initialize the helper with the specific unique index name
        : IdentityIndexHelper("Identity") {
    }

    /**
     * Finds a User by their unique identity.
     * @param Key The identity to search for.
     * @return The found FUserType, or a default-constructed FUserType if not found.
     */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|UserIndex")
    FUserType Find(FSpacetimeDBIdentity Key)
    {
        // Simply delegate the call to the internal helper
        return IdentityIndexHelper.FindUniqueIndex(Key);
    }

    // A public setter to provide the cache to the helper after construction
    // This is a common pattern when the cache might be created or provided by another system.
    void SetCache(TSharedPtr<const FTableCache<FUserType>> InUserCache)
    {
        IdentityIndexHelper.Cache = InUserCache;
    }
};
/***/

UCLASS(BlueprintType)
class QUICKSTARTCHAT_API UUserTable : public URemoteTable
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly)
    UUserIdentityUniqueIndex* Identity;

    void PostInitialize();

    /** Update function for user table*/
    FTableAppliedDiff<FUserType> Update(TArray<FWithBsatn<FUserType>> InsertsRef, TArray<FWithBsatn<FUserType>> DeletesRef);

    /** Number of subscribed rows currently in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    int32 Count() const;

    /** Return all subscribed rows in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    TArray<FUserType> Iter() const;

    // Table Events
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnUserInsert,
        const FEventContext&, Context,
        const FUserType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams( 
        FOnUserUpdate,
        const FEventContext&, Context,
        const FUserType&, OldRow,
        const FUserType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnUserDelete,
        const FEventContext&, Context,
        const FUserType&, DeletedRow);

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnUserInsert OnInsert;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnUserUpdate OnUpdate;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnUserDelete OnDelete;

private:
    const FString TableName = TEXT("user");

    TSharedPtr<UClientCache<FUserType>> Data;
};
