// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.4.0 (commit dc59211c1453848981aeb2efce2249c9a07947b2).

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Connection/Callback.h"
#include "Connection/DbConnectionBase.h"
#include "Connection/DbConnectionBuilder.h"
#include "Connection/SetReducerFlags.h"
#include "Connection/Subscription.h"
#include "Kismet/BlueprintFunctionLibrary.h"
#include "ModuleBindings/ReducerBase.g.h"
#include "ModuleBindings/Reducers/ClientConnected.g.h"
#include "ModuleBindings/Reducers/ClientDisconnected.g.h"
#include "ModuleBindings/Reducers/SendMessage.g.h"
#include "ModuleBindings/Reducers/SetName.g.h"
#include "Types/Builtins.h"
#include "SpacetimeDBClient.g.generated.h"

// Forward declarations
class UDbConnection;
class URemoteTables;
class URemoteReducers;
class USubscriptionBuilder;
class USubscriptionHandle;

/** Forward declaration for tables */
class UMessageTable;
class UUserTable;
/***/

// Delegates using the generated connection type. These wrap the base
// delegates defined in the SDK so that projects can work directly with
// UDbConnection without manual casting in user code.
DECLARE_DYNAMIC_DELEGATE_ThreeParams(
	FOnConnectDelegate,
	UDbConnection*, Connection,
	FSpacetimeDBIdentity, Identity,
	const FString&, Token);

DECLARE_DYNAMIC_DELEGATE_TwoParams(
	FOnDisconnectDelegate,
	UDbConnection*, Connection,
	const FString&, Error);


// Context classes for event handling

USTRUCT(BlueprintType)
struct QUICKSTARTCHAT_API FContextBase
{
	GENERATED_BODY()

	FContextBase() = default;
	FContextBase(UDbConnection* InConn);

	UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
	URemoteTables* Db;

	UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
	URemoteReducers* Reducers;

	UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
	USetReducerFlags* SetReducerFlags;

	bool IsActive() const;
	void Disconnect();
	bool TryGetIdentity(FSpacetimeDBIdentity& OutIdentity) const;
	FSpacetimeDBConnectionId GetConnectionId() const;
	USubscriptionBuilder* SubscriptionBuilder();

protected:
	UPROPERTY()
	UDbConnection* Conn;

};

UENUM(BlueprintType, Category = "SpacetimeDB")
enum class EReducerTag : uint8
{
    ClientConnected,
    ClientDisconnected,
    SendMessage,
    SetName
};

USTRUCT(BlueprintType)
struct QUICKSTARTCHAT_API FReducer
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
    EReducerTag Tag;

    TVariant<FClientConnectedArgs, FClientDisconnectedArgs, FSendMessageArgs, FSetNameArgs> Data;

    // Optional metadata
    UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
    FString ReducerName;
    uint32 ReducerId = 0;
    uint32 RequestId = 0;

    static FReducer ClientConnected(const FClientConnectedArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::ClientConnected;
        Out.Data.Set<FClientConnectedArgs>(Value);
        Out.ReducerName = TEXT("ClientConnected");
        return Out;
    }

    FORCEINLINE bool IsClientConnected() const { return Tag == EReducerTag::ClientConnected; }
    FORCEINLINE FClientConnectedArgs GetAsClientConnected() const
    {
        ensureMsgf(IsClientConnected(), TEXT("Reducer does not hold ClientConnected!"));
        return Data.Get<FClientConnectedArgs>();
    }

    static FReducer ClientDisconnected(const FClientDisconnectedArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::ClientDisconnected;
        Out.Data.Set<FClientDisconnectedArgs>(Value);
        Out.ReducerName = TEXT("ClientDisconnected");
        return Out;
    }

    FORCEINLINE bool IsClientDisconnected() const { return Tag == EReducerTag::ClientDisconnected; }
    FORCEINLINE FClientDisconnectedArgs GetAsClientDisconnected() const
    {
        ensureMsgf(IsClientDisconnected(), TEXT("Reducer does not hold ClientDisconnected!"));
        return Data.Get<FClientDisconnectedArgs>();
    }

    static FReducer SendMessage(const FSendMessageArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::SendMessage;
        Out.Data.Set<FSendMessageArgs>(Value);
        Out.ReducerName = TEXT("SendMessage");
        return Out;
    }

    FORCEINLINE bool IsSendMessage() const { return Tag == EReducerTag::SendMessage; }
    FORCEINLINE FSendMessageArgs GetAsSendMessage() const
    {
        ensureMsgf(IsSendMessage(), TEXT("Reducer does not hold SendMessage!"));
        return Data.Get<FSendMessageArgs>();
    }

    static FReducer SetName(const FSetNameArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::SetName;
        Out.Data.Set<FSetNameArgs>(Value);
        Out.ReducerName = TEXT("SetName");
        return Out;
    }

    FORCEINLINE bool IsSetName() const { return Tag == EReducerTag::SetName; }
    FORCEINLINE FSetNameArgs GetAsSetName() const
    {
        ensureMsgf(IsSetName(), TEXT("Reducer does not hold SetName!"));
        return Data.Get<FSetNameArgs>();
    }

    FORCEINLINE bool operator==(const FReducer& Other) const
    {
        if (Tag != Other.Tag || ReducerId != Other.ReducerId || RequestId != Other.RequestId || ReducerName != Other.ReducerName) return false;
        switch (Tag)
        {
        case EReducerTag::ClientConnected:
            return GetAsClientConnected() == Other.GetAsClientConnected();
        case EReducerTag::ClientDisconnected:
            return GetAsClientDisconnected() == Other.GetAsClientDisconnected();
        case EReducerTag::SendMessage:
            return GetAsSendMessage() == Other.GetAsSendMessage();
        case EReducerTag::SetName:
            return GetAsSetName() == Other.GetAsSetName();
        default: return false;
        }
    }
    FORCEINLINE bool operator!=(const FReducer& Other) const { return !(*this == Other); }
};

UCLASS()
class QUICKSTARTCHAT_API UReducerBpLib : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

private:

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer ClientConnected(const FClientConnectedArgs& Value) {
        return FReducer::ClientConnected(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsClientConnected(const FReducer& Reducer) { return Reducer.IsClientConnected(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FClientConnectedArgs GetAsClientConnected(const FReducer& Reducer) {
        return Reducer.GetAsClientConnected();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer ClientDisconnected(const FClientDisconnectedArgs& Value) {
        return FReducer::ClientDisconnected(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsClientDisconnected(const FReducer& Reducer) { return Reducer.IsClientDisconnected(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FClientDisconnectedArgs GetAsClientDisconnected(const FReducer& Reducer) {
        return Reducer.GetAsClientDisconnected();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer SendMessage(const FSendMessageArgs& Value) {
        return FReducer::SendMessage(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsSendMessage(const FReducer& Reducer) { return Reducer.IsSendMessage(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FSendMessageArgs GetAsSendMessage(const FReducer& Reducer) {
        return Reducer.GetAsSendMessage();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer SetName(const FSetNameArgs& Value) {
        return FReducer::SetName(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsSetName(const FReducer& Reducer) { return Reducer.IsSetName(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FSetNameArgs GetAsSetName(const FReducer& Reducer) {
        return Reducer.GetAsSetName();
    }
};

/** Metadata describing a reducer run. */
USTRUCT(BlueprintType)
struct QUICKSTARTCHAT_API FQuickstartChatReducerEvent
{
	GENERATED_BODY()

	/** Timestamp for when the reducer executed */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBTimestamp Timestamp;

	/** Result status of the reducer */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBStatus Status;

	/** Identity that initiated the call */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBIdentity CallerIdentity;

	/** Connection ID for the caller */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBConnectionId CallerConnectionId;

	/** Energy consumed while executing */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FEnergyQuantaType EnergyConsumed;

	/** Detailed call information */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FReducer Reducer;

	FORCEINLINE bool operator==(const FQuickstartChatReducerEvent& Other) const
	{
		return Status == Other.Status && Timestamp == Other.Timestamp && CallerIdentity == Other.CallerIdentity &&
			CallerConnectionId == Other.CallerConnectionId && EnergyConsumed == Other.EnergyConsumed &&
			Reducer == Other.Reducer;
	}

	FORCEINLINE bool operator!=(const FQuickstartChatReducerEvent& Other) const
	{
		return !(*this == Other);
	}
};

/** Represents event with variant message data. */
USTRUCT(BlueprintType)
struct QUICKSTARTCHAT_API FQuickstartChatEvent
{
	GENERATED_BODY()

	/** Tagged union holding reducer call, unit events, or error string */
	TVariant<FReducer, FSpacetimeDBUnit, FString> MessageData;

	/** Type tag indicating what this event represents */
	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
	ESpacetimeDBEventTag Tag = ESpacetimeDBEventTag::UnknownTransaction;

	/** === Static factory methods ===*/
	static FQuickstartChatEvent Reducer(const FReducer& Value)
	{
		FQuickstartChatEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::Reducer;
		Obj.MessageData.Set<FReducer>(Value);
		return Obj;
	}

	static FQuickstartChatEvent SubscribeApplied(const FSpacetimeDBUnit& Value)
	{
		FQuickstartChatEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::SubscribeApplied;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	static FQuickstartChatEvent UnsubscribeApplied(const FSpacetimeDBUnit& Value)
	{
		FQuickstartChatEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::UnsubscribeApplied;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	static FQuickstartChatEvent Disconnected(const FSpacetimeDBUnit& Value)
	{
		FQuickstartChatEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::Disconnected;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	static FQuickstartChatEvent SubscribeError(const FString& Value)
	{
		FQuickstartChatEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::SubscribeError;
		Obj.MessageData.Set<FString>(Value);
		return Obj;
	}

	static FQuickstartChatEvent UnknownTransaction(const FSpacetimeDBUnit& Value)
	{
		FQuickstartChatEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::UnknownTransaction;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	FORCEINLINE bool IsReducer() const { return Tag == ESpacetimeDBEventTag::Reducer; }
	FORCEINLINE FReducer GetAsReducer() const
	{
		ensureMsgf(IsReducer(), TEXT("MessageData does not hold Reducer!"));
		return MessageData.Get<FReducer>();
	}

	FORCEINLINE bool IsSubscribeApplied() const { return Tag == ESpacetimeDBEventTag::SubscribeApplied; }
	FORCEINLINE FSpacetimeDBUnit GetAsSubscribeApplied() const
	{
		ensureMsgf(IsSubscribeApplied(), TEXT("MessageData does not hold SubscribeApplied!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool IsUnsubscribeApplied() const { return Tag == ESpacetimeDBEventTag::UnsubscribeApplied; }
	FORCEINLINE FSpacetimeDBUnit GetAsUnsubscribeApplied() const
	{
		ensureMsgf(IsUnsubscribeApplied(), TEXT("MessageData does not hold UnsubscribeApplied!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool IsDisconnected() const { return Tag == ESpacetimeDBEventTag::Disconnected; }
	FORCEINLINE FSpacetimeDBUnit GetAsDisconnected() const
	{
		ensureMsgf(IsDisconnected(), TEXT("MessageData does not hold Disconnected!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool IsSubscribeError() const { return Tag == ESpacetimeDBEventTag::SubscribeError; }
	FORCEINLINE FString GetAsSubscribeError() const
	{
		ensureMsgf(IsSubscribeError(), TEXT("MessageData does not hold SubscribeError!"));
		return MessageData.Get<FString>();
	}

	FORCEINLINE bool IsUnknownTransaction() const { return Tag == ESpacetimeDBEventTag::UnknownTransaction; }
	FORCEINLINE FSpacetimeDBUnit GetAsUnknownTransaction() const
	{
		ensureMsgf(IsUnknownTransaction(), TEXT("MessageData does not hold UnknownTransaction!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool operator==(const FQuickstartChatEvent& Other) const
	{
		if (Tag != Other.Tag) return false;
		switch (Tag)
		{
		case ESpacetimeDBEventTag::Reducer: return GetAsReducer() == Other.GetAsReducer();
		case ESpacetimeDBEventTag::SubscribeApplied: return GetAsSubscribeApplied() == Other.GetAsSubscribeApplied();
		case ESpacetimeDBEventTag::UnsubscribeApplied: return GetAsUnsubscribeApplied() == Other.GetAsUnsubscribeApplied();
		case ESpacetimeDBEventTag::Disconnected: return GetAsDisconnected() == Other.GetAsDisconnected();
		case ESpacetimeDBEventTag::SubscribeError: return GetAsSubscribeError() == Other.GetAsSubscribeError();
		case ESpacetimeDBEventTag::UnknownTransaction: return GetAsUnknownTransaction() == Other.GetAsUnknownTransaction();
		default: return false;
		}
	}

	FORCEINLINE bool operator!=(const FQuickstartChatEvent& Other) const
	{
		return !(*this == Other);
	}
};

UCLASS()
class QUICKSTARTCHAT_API UQuickstartChatEventBpLib : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

private:
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|QuickstartChatEvent")
    static FQuickstartChatEvent Reducer(const FReducer& InValue)
    {
        return FQuickstartChatEvent::Reducer(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|QuickstartChatEvent")
    static FQuickstartChatEvent SubscribeApplied(const FSpacetimeDBUnit& InValue)
    {
        return FQuickstartChatEvent::SubscribeApplied(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|QuickstartChatEvent")
    static FQuickstartChatEvent UnsubscribeApplied(const FSpacetimeDBUnit& InValue)
    {
        return FQuickstartChatEvent::UnsubscribeApplied(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|QuickstartChatEvent")
    static FQuickstartChatEvent Disconnected(const FSpacetimeDBUnit& InValue)
    {
        return FQuickstartChatEvent::Disconnected(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|QuickstartChatEvent")
    static FQuickstartChatEvent SubscribeError(const FString& InValue)
    {
        return FQuickstartChatEvent::SubscribeError(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|QuickstartChatEvent")
    static FQuickstartChatEvent UnknownTransaction(const FSpacetimeDBUnit& InValue)
    {
        return FQuickstartChatEvent::UnknownTransaction(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static bool IsReducer(const FQuickstartChatEvent& Event) { return Event.IsReducer(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static bool IsSubscribeApplied(const FQuickstartChatEvent& Event) { return Event.IsSubscribeApplied(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static bool IsUnsubscribeApplied(const FQuickstartChatEvent& Event) { return Event.IsUnsubscribeApplied(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static bool IsDisconnected(const FQuickstartChatEvent& Event) { return Event.IsDisconnected(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static bool IsSubscribeError(const FQuickstartChatEvent& Event) { return Event.IsSubscribeError(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static bool IsUnknownTransaction(const FQuickstartChatEvent& Event) { return Event.IsUnknownTransaction(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static FReducer GetAsReducer(const FQuickstartChatEvent& Event)
    {
        return Event.GetAsReducer();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static FSpacetimeDBUnit GetAsSubscribeApplied(const FQuickstartChatEvent& Event)
    {
        return Event.GetAsSubscribeApplied();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static FSpacetimeDBUnit GetAsUnsubscribeApplied(const FQuickstartChatEvent& Event)
    {
        return Event.GetAsUnsubscribeApplied();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static FSpacetimeDBUnit GetAsDisconnected(const FQuickstartChatEvent& Event)
    {
        return Event.GetAsDisconnected();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static FString GetAsSubscribeError(const FQuickstartChatEvent& Event)
    {
        return Event.GetAsSubscribeError();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|QuickstartChatEvent")
    static FSpacetimeDBUnit GetAsUnknownTransaction(const FQuickstartChatEvent& Event)
    {
        return Event.GetAsUnknownTransaction();
    }

};


USTRUCT(BlueprintType)
struct QUICKSTARTCHAT_API FEventContext : public FContextBase
{
	GENERATED_BODY()

	FEventContext() = default;
	FEventContext(UDbConnection* InConn, const FQuickstartChatEvent& InEvent) : FContextBase(InConn), Event(InEvent) {}

	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
	FQuickstartChatEvent Event;
};

USTRUCT(BlueprintType)
struct QUICKSTARTCHAT_API FReducerEventContext : public FContextBase
{
	GENERATED_BODY()

	FReducerEventContext() = default;
	FReducerEventContext(UDbConnection* InConn, FQuickstartChatReducerEvent InEvent) : FContextBase(InConn), Event(InEvent) {}
	
	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB") 
	FQuickstartChatReducerEvent Event;
};

USTRUCT(BlueprintType)
struct QUICKSTARTCHAT_API FErrorContext : public FContextBase
{
	GENERATED_BODY()

	FErrorContext() = default;
	FErrorContext(UDbConnection* InConn, const FString& InError) : FContextBase(InConn), Error(InError) {}

	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
	FString Error;

};

USTRUCT(BlueprintType)
struct QUICKSTARTCHAT_API FSubscriptionEventContext : public FContextBase
{
	GENERATED_BODY()

	FSubscriptionEventContext() = default;
	FSubscriptionEventContext(UDbConnection* InConn) : FContextBase(InConn) {}

};

DECLARE_DYNAMIC_DELEGATE_OneParam(
	FOnSubscriptionApplied,
	FSubscriptionEventContext, Context);

DECLARE_DYNAMIC_DELEGATE_OneParam(
	FOnSubscriptionError,
	FErrorContext, Context);

UCLASS(BlueprintType)
class QUICKSTARTCHAT_API USetReducerFlags : public USetReducerFlagsBase
{
	GENERATED_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void ClientConnected(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void ClientDisconnected(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void SendMessage(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void SetName(ECallReducerFlags Flag);

};

// RemoteTables class
UCLASS(BlueprintType)
class QUICKSTARTCHAT_API URemoteTables : public UObject
{
    GENERATED_BODY()

public:
    void Initialize();

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UUserTable* User;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UMessageTable* Message;

};

// RemoteReducers class
UCLASS(BlueprintType)
class QUICKSTARTCHAT_API URemoteReducers : public UObject
{
    GENERATED_BODY()

public:

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FClientConnectedHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FClientConnectedHandler OnClientConnected;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void ClientConnected();

    bool InvokeClientConnected(const FReducerEventContext& Context, const UClientConnectedReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FClientDisconnectedHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FClientDisconnectedHandler OnClientDisconnected;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void ClientDisconnected();

    bool InvokeClientDisconnected(const FReducerEventContext& Context, const UClientDisconnectedReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FSendMessageHandler,
        const FReducerEventContext&, Context,
        const FString&, Text
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FSendMessageHandler OnSendMessage;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void SendMessage(const FString& Text);

    bool InvokeSendMessage(const FReducerEventContext& Context, const USendMessageReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(
        FSetNameHandler,
        const FReducerEventContext&, Context,
        const FString&, Name
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FSetNameHandler OnSetName;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void SetName(const FString& Name);

    bool InvokeSetName(const FReducerEventContext& Context, const USetNameReducer* Args);

    // Internal error handling
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FInternalOnUnhandledReducerError, const FReducerEventContext&, Context, const FString&, Error);
    FInternalOnUnhandledReducerError InternalOnUnhandledReducerError;

private:

    friend UDbConnection;

    UPROPERTY()
    class UDbConnection* Conn;

    UPROPERTY()
    USetReducerFlags* SetCallReducerFlags;
};

// SubscriptionBuilder class
UCLASS(BlueprintType)
class QUICKSTARTCHAT_API USubscriptionBuilder : public USubscriptionBuilderBase
{
    GENERATED_BODY()

public:

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    USubscriptionBuilder* OnApplied(FOnSubscriptionApplied Callback);

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    USubscriptionBuilder* OnError(FOnSubscriptionError Callback);

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    USubscriptionHandle* Subscribe(const TArray<FString>& SQL);

    /** Convenience for subscribing to all rows from all tables */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    USubscriptionHandle* SubscribeToAllTables();


    friend class UDbConnection;
    friend class UDbConnectionBase;

protected:
    UPROPERTY()
    class UDbConnection* Conn;

    // Delegates stored so Subscribe() can bind forwarding callbacks
    FOnSubscriptionApplied OnAppliedDelegateInternal;
    FOnSubscriptionError OnErrorDelegateInternal;
};

// SubscriptionHandle class
UCLASS(BlueprintType)
class QUICKSTARTCHAT_API USubscriptionHandle : public USubscriptionHandleBase
{
    GENERATED_BODY()

public:

    USubscriptionHandle() {};

    explicit USubscriptionHandle(UDbConnection* InConn);

    friend class USubscriptionBuilder;

private:
    UPROPERTY()
    class UDbConnection* Conn;

    // Delegates that expose subscription events with connection aware contexts
    FOnSubscriptionApplied OnAppliedDelegate;
    FOnSubscriptionError OnErrorDelegate;

    UFUNCTION()
    void ForwardOnApplied(const FSubscriptionEventContextBase& BaseCtx);

    UFUNCTION()
    void ForwardOnError(const FErrorContextBase& BaseCtx);
};

/*
    @Note: Child class of UDbConnectionBuilderBase.
*/
UCLASS(BlueprintType)
class QUICKSTARTCHAT_API UDbConnectionBuilder : public UDbConnectionBuilderBase
{
    GENERATED_BODY()
public:

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithUri(const FString& InUri);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithModuleName(const FString& InName);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithToken(const FString& InToken);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithCompression(const ESpacetimeDBCompression& InCompression);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* OnConnect(FOnConnectDelegate Callback);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* OnConnectError(FOnConnectErrorDelegate Callback);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* OnDisconnect(FOnDisconnectDelegate Callback);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnection* Build();

private:

    // Stored delegates which will be forwarded when the connection events occur.
    FOnConnectDelegate OnConnectDelegateInternal;
    FOnDisconnectDelegate OnDisconnectDelegateInternal;
};

// Main DbConnection class
UCLASS(BlueprintType)
class QUICKSTARTCHAT_API UDbConnection : public UDbConnectionBase
{
    GENERATED_BODY()

public:
    explicit UDbConnection(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get());


    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    URemoteTables* Db;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    URemoteReducers* Reducers;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    USetReducerFlags* SetReducerFlags;

    // Delegates that allow users to bind with the concrete connection type.
    FOnConnectDelegate OnConnectDelegate;
    FOnDisconnectDelegate OnDisconnectDelegate;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    USubscriptionBuilder* SubscriptionBuilder();

    /** Static entry point for constructing a connection. */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB", DisplayName = "SpacetimeDB Builder")
    static UDbConnectionBuilder* Builder();

    // Error handling
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnUnhandledReducerError, const FReducerEventContext&, Context, const FString&, Error);
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FOnUnhandledReducerError OnUnhandledReducerError;


protected:

    // Hook up error handling to reducers
    virtual void PostInitProperties() override;

    UFUNCTION()
    void ForwardOnConnect(UDbConnectionBase* BaseConnection, FSpacetimeDBIdentity InIdentity, const FString& InToken);
    UFUNCTION()
    void ForwardOnDisconnect(UDbConnectionBase* BaseConnection, const FString& Error);

    UFUNCTION()
    void OnUnhandledReducerErrorHandler(const FReducerEventContext& Context, const FString& Error);

    // Override the DbConnectionBase methods to handle updates and events
    virtual void DbUpdate(const FDatabaseUpdateType& Update, const FSpacetimeDBEvent& Event) override;
    
    // Override the reducer event handler to dispatch events to the appropriate reducers
    virtual void ReducerEvent(const FReducerEvent& Event) override;
    
    // Override the reducer event failed handler
    virtual void ReducerEventFailed(const FReducerEvent& Event, const FString ErrorMessage) override;
};

