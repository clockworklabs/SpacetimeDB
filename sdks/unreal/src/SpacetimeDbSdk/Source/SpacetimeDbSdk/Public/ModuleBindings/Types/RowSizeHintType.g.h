// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Kismet/BlueprintFunctionLibrary.h"
#include "RowSizeHintType.g.generated.h"

UENUM(BlueprintType)
enum class ERowSizeHintTag : uint8
{
    FixedSize,
    RowOffsets
};

USTRUCT(BlueprintType)
struct SPACETIMEDBSDK_API FRowSizeHintType
{
    GENERATED_BODY()

public:
    FRowSizeHintType() = default;

    TVariant<TArray<uint64>, uint16> MessageData;

    UPROPERTY(BlueprintReadOnly)
    ERowSizeHintTag Tag = static_cast<ERowSizeHintTag>(0);

    static FRowSizeHintType FixedSize(const uint16& Value)
    {
        FRowSizeHintType Obj;
        Obj.Tag = ERowSizeHintTag::FixedSize;
        Obj.MessageData.Set<uint16>(Value);
        return Obj;
    }

    static FRowSizeHintType RowOffsets(const TArray<uint64>& Value)
    {
        FRowSizeHintType Obj;
        Obj.Tag = ERowSizeHintTag::RowOffsets;
        Obj.MessageData.Set<TArray<uint64>>(Value);
        return Obj;
    }

    FORCEINLINE bool IsFixedSize() const { return Tag == ERowSizeHintTag::FixedSize; }

    FORCEINLINE uint16 GetAsFixedSize() const
    {
        ensureMsgf(IsFixedSize(), TEXT("MessageData does not hold FixedSize!"));
        return MessageData.Get<uint16>();
    }

    FORCEINLINE bool IsRowOffsets() const { return Tag == ERowSizeHintTag::RowOffsets; }

    FORCEINLINE TArray<uint64> GetAsRowOffsets() const
    {
        ensureMsgf(IsRowOffsets(), TEXT("MessageData does not hold RowOffsets!"));
        return MessageData.Get<TArray<uint64>>();
    }

    // Inline equality operators
    FORCEINLINE bool operator==(const FRowSizeHintType& Other) const
    {
        if (Tag != Other.Tag) return false;

        switch (Tag)
        {
            case ERowSizeHintTag::FixedSize:
                return GetAsFixedSize() == Other.GetAsFixedSize();
            case ERowSizeHintTag::RowOffsets:
                return GetAsRowOffsets() == Other.GetAsRowOffsets();
            default:
                return false;
        }
    }

    FORCEINLINE bool operator!=(const FRowSizeHintType& Other) const
    {
        return !(*this == Other);
    }
};

/**
 * Custom hash function for FRowSizeHintType.
 * Combines the hashes of all fields that are compared in operator==.
 * @param RowSizeHintType The FRowSizeHintType instance to hash.
 * @return The combined hash value.
 */
FORCEINLINE uint32 GetTypeHash(const FRowSizeHintType& RowSizeHint)
{
    const uint32 TagHash = GetTypeHash(static_cast<uint8>(RowSizeHint.Tag));
    switch (RowSizeHint.Tag)
    {
        case ERowSizeHintTag::FixedSize: return HashCombine(TagHash, GetTypeHash(RowSizeHint.GetAsFixedSize()));
        case ERowSizeHintTag::RowOffsets: return HashCombine(TagHash, ::GetTypeHash(RowSizeHint.GetAsRowOffsets()));
        default: return TagHash;
    }
}

namespace UE::SpacetimeDB
{
    UE_SPACETIMEDB_ENABLE_TARRAY(FRowSizeHintType);

    UE_SPACETIMEDB_TAGGED_ENUM(
        FRowSizeHintType,
        ERowSizeHintTag,
        MessageData,
        FixedSize, uint16,
        RowOffsets, TArray<uint64>
    );
}

UCLASS()
class SPACETIMEDBSDK_API URowSizeHintBpLib : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

private:
    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    static FRowSizeHintType FixedSize(const uint16& InValue)
    {
        return FRowSizeHintType::FixedSize(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|RowSizeHint")
    static bool IsFixedSize(const FRowSizeHintType& InValue) { return InValue.IsFixedSize(); }

    // NOTE: Not exposed to Blueprint because uint16 types are not Blueprint-compatible
    static uint16 GetAsFixedSize(const FRowSizeHintType& InValue)
    {
        return InValue.GetAsFixedSize();
    }

    // NOTE: Not exposed to Blueprint because TArray<uint64> types are not Blueprint-compatible
    static FRowSizeHintType RowOffsets(const TArray<uint64>& InValue)
    {
        return FRowSizeHintType::RowOffsets(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|RowSizeHint")
    static bool IsRowOffsets(const FRowSizeHintType& InValue) { return InValue.IsRowOffsets(); }

    // NOTE: Not exposed to Blueprint because TArray<uint64> types are not Blueprint-compatible
    static TArray<uint64> GetAsRowOffsets(const FRowSizeHintType& InValue)
    {
        return InValue.GetAsRowOffsets();
    }

};
