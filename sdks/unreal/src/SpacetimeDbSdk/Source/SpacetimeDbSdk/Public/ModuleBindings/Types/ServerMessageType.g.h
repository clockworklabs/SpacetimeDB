// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "ModuleBindings/Types/UnsubscribeAppliedType.g.h"
#include "ModuleBindings/Types/UnsubscribeMultiAppliedType.g.h"
#include "ModuleBindings/Types/SubscribeAppliedType.g.h"
#include "ModuleBindings/Types/TransactionUpdateLightType.g.h"
#include "Kismet/BlueprintFunctionLibrary.h"
#include "ModuleBindings/Types/SubscribeMultiAppliedType.g.h"
#include "ModuleBindings/Types/IdentityTokenType.g.h"
#include "ModuleBindings/Types/OneOffQueryResponseType.g.h"
#include "ModuleBindings/Types/InitialSubscriptionType.g.h"
#include "ModuleBindings/Types/TransactionUpdateType.g.h"
#include "ModuleBindings/Types/SubscriptionErrorType.g.h"
#include "ServerMessageType.g.generated.h"

UENUM(BlueprintType)
enum class EServerMessageTag : uint8
{
    InitialSubscription,
    TransactionUpdate,
    TransactionUpdateLight,
    IdentityToken,
    OneOffQueryResponse,
    SubscribeApplied,
    UnsubscribeApplied,
    SubscriptionError,
    SubscribeMultiApplied,
    UnsubscribeMultiApplied
};

USTRUCT(BlueprintType)
struct SPACETIMEDBSDK_API FServerMessageType
{
    GENERATED_BODY()

public:
    FServerMessageType() = default;

    TVariant<FIdentityTokenType, FUnsubscribeMultiAppliedType, FTransactionUpdateLightType, FOneOffQueryResponseType, FSubscribeAppliedType, FTransactionUpdateType, FSubscriptionErrorType, FSubscribeMultiAppliedType, FUnsubscribeAppliedType, FInitialSubscriptionType> MessageData;

    UPROPERTY(BlueprintReadOnly)
    EServerMessageTag Tag = static_cast<EServerMessageTag>(0);

    static FServerMessageType InitialSubscription(const FInitialSubscriptionType& Value)
    {
        FServerMessageType Obj;
        Obj.Tag = EServerMessageTag::InitialSubscription;
        Obj.MessageData.Set<FInitialSubscriptionType>(Value);
        return Obj;
    }

    static FServerMessageType TransactionUpdate(const FTransactionUpdateType& Value)
    {
        FServerMessageType Obj;
        Obj.Tag = EServerMessageTag::TransactionUpdate;
        Obj.MessageData.Set<FTransactionUpdateType>(Value);
        return Obj;
    }

    static FServerMessageType TransactionUpdateLight(const FTransactionUpdateLightType& Value)
    {
        FServerMessageType Obj;
        Obj.Tag = EServerMessageTag::TransactionUpdateLight;
        Obj.MessageData.Set<FTransactionUpdateLightType>(Value);
        return Obj;
    }

    static FServerMessageType IdentityToken(const FIdentityTokenType& Value)
    {
        FServerMessageType Obj;
        Obj.Tag = EServerMessageTag::IdentityToken;
        Obj.MessageData.Set<FIdentityTokenType>(Value);
        return Obj;
    }

    static FServerMessageType OneOffQueryResponse(const FOneOffQueryResponseType& Value)
    {
        FServerMessageType Obj;
        Obj.Tag = EServerMessageTag::OneOffQueryResponse;
        Obj.MessageData.Set<FOneOffQueryResponseType>(Value);
        return Obj;
    }

    static FServerMessageType SubscribeApplied(const FSubscribeAppliedType& Value)
    {
        FServerMessageType Obj;
        Obj.Tag = EServerMessageTag::SubscribeApplied;
        Obj.MessageData.Set<FSubscribeAppliedType>(Value);
        return Obj;
    }

    static FServerMessageType UnsubscribeApplied(const FUnsubscribeAppliedType& Value)
    {
        FServerMessageType Obj;
        Obj.Tag = EServerMessageTag::UnsubscribeApplied;
        Obj.MessageData.Set<FUnsubscribeAppliedType>(Value);
        return Obj;
    }

    static FServerMessageType SubscriptionError(const FSubscriptionErrorType& Value)
    {
        FServerMessageType Obj;
        Obj.Tag = EServerMessageTag::SubscriptionError;
        Obj.MessageData.Set<FSubscriptionErrorType>(Value);
        return Obj;
    }

    static FServerMessageType SubscribeMultiApplied(const FSubscribeMultiAppliedType& Value)
    {
        FServerMessageType Obj;
        Obj.Tag = EServerMessageTag::SubscribeMultiApplied;
        Obj.MessageData.Set<FSubscribeMultiAppliedType>(Value);
        return Obj;
    }

    static FServerMessageType UnsubscribeMultiApplied(const FUnsubscribeMultiAppliedType& Value)
    {
        FServerMessageType Obj;
        Obj.Tag = EServerMessageTag::UnsubscribeMultiApplied;
        Obj.MessageData.Set<FUnsubscribeMultiAppliedType>(Value);
        return Obj;
    }

    FORCEINLINE bool IsInitialSubscription() const { return Tag == EServerMessageTag::InitialSubscription; }

    FORCEINLINE FInitialSubscriptionType GetAsInitialSubscription() const
    {
        ensureMsgf(IsInitialSubscription(), TEXT("MessageData does not hold InitialSubscription!"));
        return MessageData.Get<FInitialSubscriptionType>();
    }

    FORCEINLINE bool IsTransactionUpdate() const { return Tag == EServerMessageTag::TransactionUpdate; }

    FORCEINLINE FTransactionUpdateType GetAsTransactionUpdate() const
    {
        ensureMsgf(IsTransactionUpdate(), TEXT("MessageData does not hold TransactionUpdate!"));
        return MessageData.Get<FTransactionUpdateType>();
    }

    FORCEINLINE bool IsTransactionUpdateLight() const { return Tag == EServerMessageTag::TransactionUpdateLight; }

    FORCEINLINE FTransactionUpdateLightType GetAsTransactionUpdateLight() const
    {
        ensureMsgf(IsTransactionUpdateLight(), TEXT("MessageData does not hold TransactionUpdateLight!"));
        return MessageData.Get<FTransactionUpdateLightType>();
    }

    FORCEINLINE bool IsIdentityToken() const { return Tag == EServerMessageTag::IdentityToken; }

    FORCEINLINE FIdentityTokenType GetAsIdentityToken() const
    {
        ensureMsgf(IsIdentityToken(), TEXT("MessageData does not hold IdentityToken!"));
        return MessageData.Get<FIdentityTokenType>();
    }

    FORCEINLINE bool IsOneOffQueryResponse() const { return Tag == EServerMessageTag::OneOffQueryResponse; }

    FORCEINLINE FOneOffQueryResponseType GetAsOneOffQueryResponse() const
    {
        ensureMsgf(IsOneOffQueryResponse(), TEXT("MessageData does not hold OneOffQueryResponse!"));
        return MessageData.Get<FOneOffQueryResponseType>();
    }

    FORCEINLINE bool IsSubscribeApplied() const { return Tag == EServerMessageTag::SubscribeApplied; }

    FORCEINLINE FSubscribeAppliedType GetAsSubscribeApplied() const
    {
        ensureMsgf(IsSubscribeApplied(), TEXT("MessageData does not hold SubscribeApplied!"));
        return MessageData.Get<FSubscribeAppliedType>();
    }

    FORCEINLINE bool IsUnsubscribeApplied() const { return Tag == EServerMessageTag::UnsubscribeApplied; }

    FORCEINLINE FUnsubscribeAppliedType GetAsUnsubscribeApplied() const
    {
        ensureMsgf(IsUnsubscribeApplied(), TEXT("MessageData does not hold UnsubscribeApplied!"));
        return MessageData.Get<FUnsubscribeAppliedType>();
    }

    FORCEINLINE bool IsSubscriptionError() const { return Tag == EServerMessageTag::SubscriptionError; }

    FORCEINLINE FSubscriptionErrorType GetAsSubscriptionError() const
    {
        ensureMsgf(IsSubscriptionError(), TEXT("MessageData does not hold SubscriptionError!"));
        return MessageData.Get<FSubscriptionErrorType>();
    }

    FORCEINLINE bool IsSubscribeMultiApplied() const { return Tag == EServerMessageTag::SubscribeMultiApplied; }

    FORCEINLINE FSubscribeMultiAppliedType GetAsSubscribeMultiApplied() const
    {
        ensureMsgf(IsSubscribeMultiApplied(), TEXT("MessageData does not hold SubscribeMultiApplied!"));
        return MessageData.Get<FSubscribeMultiAppliedType>();
    }

    FORCEINLINE bool IsUnsubscribeMultiApplied() const { return Tag == EServerMessageTag::UnsubscribeMultiApplied; }

    FORCEINLINE FUnsubscribeMultiAppliedType GetAsUnsubscribeMultiApplied() const
    {
        ensureMsgf(IsUnsubscribeMultiApplied(), TEXT("MessageData does not hold UnsubscribeMultiApplied!"));
        return MessageData.Get<FUnsubscribeMultiAppliedType>();
    }

    // Inline equality operators
    FORCEINLINE bool operator==(const FServerMessageType& Other) const
    {
        if (Tag != Other.Tag) return false;

        switch (Tag)
        {
            case EServerMessageTag::InitialSubscription:
                return GetAsInitialSubscription() == Other.GetAsInitialSubscription();
            case EServerMessageTag::TransactionUpdate:
                return GetAsTransactionUpdate() == Other.GetAsTransactionUpdate();
            case EServerMessageTag::TransactionUpdateLight:
                return GetAsTransactionUpdateLight() == Other.GetAsTransactionUpdateLight();
            case EServerMessageTag::IdentityToken:
                return GetAsIdentityToken() == Other.GetAsIdentityToken();
            case EServerMessageTag::OneOffQueryResponse:
                return GetAsOneOffQueryResponse() == Other.GetAsOneOffQueryResponse();
            case EServerMessageTag::SubscribeApplied:
                return GetAsSubscribeApplied() == Other.GetAsSubscribeApplied();
            case EServerMessageTag::UnsubscribeApplied:
                return GetAsUnsubscribeApplied() == Other.GetAsUnsubscribeApplied();
            case EServerMessageTag::SubscriptionError:
                return GetAsSubscriptionError() == Other.GetAsSubscriptionError();
            case EServerMessageTag::SubscribeMultiApplied:
                return GetAsSubscribeMultiApplied() == Other.GetAsSubscribeMultiApplied();
            case EServerMessageTag::UnsubscribeMultiApplied:
                return GetAsUnsubscribeMultiApplied() == Other.GetAsUnsubscribeMultiApplied();
            default:
                return false;
        }
    }

    FORCEINLINE bool operator!=(const FServerMessageType& Other) const
    {
        return !(*this == Other);
    }
};

/**
 * Custom hash function for FServerMessageType.
 * Combines the hashes of all fields that are compared in operator==.
 * @param ServerMessageType The FServerMessageType instance to hash.
 * @return The combined hash value.
 */
FORCEINLINE uint32 GetTypeHash(const FServerMessageType& ServerMessage)
{
    const uint32 TagHash = GetTypeHash(static_cast<uint8>(ServerMessage.Tag));
    switch (ServerMessage.Tag)
    {
        case EServerMessageTag::InitialSubscription: return HashCombine(TagHash, ::GetTypeHash(ServerMessage.GetAsInitialSubscription()));
        case EServerMessageTag::TransactionUpdate: return HashCombine(TagHash, ::GetTypeHash(ServerMessage.GetAsTransactionUpdate()));
        case EServerMessageTag::TransactionUpdateLight: return HashCombine(TagHash, ::GetTypeHash(ServerMessage.GetAsTransactionUpdateLight()));
        case EServerMessageTag::IdentityToken: return HashCombine(TagHash, ::GetTypeHash(ServerMessage.GetAsIdentityToken()));
        case EServerMessageTag::OneOffQueryResponse: return HashCombine(TagHash, ::GetTypeHash(ServerMessage.GetAsOneOffQueryResponse()));
        case EServerMessageTag::SubscribeApplied: return HashCombine(TagHash, ::GetTypeHash(ServerMessage.GetAsSubscribeApplied()));
        case EServerMessageTag::UnsubscribeApplied: return HashCombine(TagHash, ::GetTypeHash(ServerMessage.GetAsUnsubscribeApplied()));
        case EServerMessageTag::SubscriptionError: return HashCombine(TagHash, ::GetTypeHash(ServerMessage.GetAsSubscriptionError()));
        case EServerMessageTag::SubscribeMultiApplied: return HashCombine(TagHash, ::GetTypeHash(ServerMessage.GetAsSubscribeMultiApplied()));
        case EServerMessageTag::UnsubscribeMultiApplied: return HashCombine(TagHash, ::GetTypeHash(ServerMessage.GetAsUnsubscribeMultiApplied()));
        default: return TagHash;
    }
}

namespace UE::SpacetimeDB
{
    UE_SPACETIMEDB_ENABLE_TARRAY(FServerMessageType);

    UE_SPACETIMEDB_TAGGED_ENUM(
        FServerMessageType,
        EServerMessageTag,
        MessageData,
        InitialSubscription, FInitialSubscriptionType,
        TransactionUpdate, FTransactionUpdateType,
        TransactionUpdateLight, FTransactionUpdateLightType,
        IdentityToken, FIdentityTokenType,
        OneOffQueryResponse, FOneOffQueryResponseType,
        SubscribeApplied, FSubscribeAppliedType,
        UnsubscribeApplied, FUnsubscribeAppliedType,
        SubscriptionError, FSubscriptionErrorType,
        SubscribeMultiApplied, FSubscribeMultiAppliedType,
        UnsubscribeMultiApplied, FUnsubscribeMultiAppliedType
    );
}

UCLASS()
class SPACETIMEDBSDK_API UServerMessageBpLib : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

private:
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ServerMessage")
    static FServerMessageType InitialSubscription(const FInitialSubscriptionType& InValue)
    {
        return FServerMessageType::InitialSubscription(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static bool IsInitialSubscription(const FServerMessageType& InValue) { return InValue.IsInitialSubscription(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static FInitialSubscriptionType GetAsInitialSubscription(const FServerMessageType& InValue)
    {
        return InValue.GetAsInitialSubscription();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ServerMessage")
    static FServerMessageType TransactionUpdate(const FTransactionUpdateType& InValue)
    {
        return FServerMessageType::TransactionUpdate(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static bool IsTransactionUpdate(const FServerMessageType& InValue) { return InValue.IsTransactionUpdate(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static FTransactionUpdateType GetAsTransactionUpdate(const FServerMessageType& InValue)
    {
        return InValue.GetAsTransactionUpdate();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ServerMessage")
    static FServerMessageType TransactionUpdateLight(const FTransactionUpdateLightType& InValue)
    {
        return FServerMessageType::TransactionUpdateLight(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static bool IsTransactionUpdateLight(const FServerMessageType& InValue) { return InValue.IsTransactionUpdateLight(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static FTransactionUpdateLightType GetAsTransactionUpdateLight(const FServerMessageType& InValue)
    {
        return InValue.GetAsTransactionUpdateLight();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ServerMessage")
    static FServerMessageType IdentityToken(const FIdentityTokenType& InValue)
    {
        return FServerMessageType::IdentityToken(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static bool IsIdentityToken(const FServerMessageType& InValue) { return InValue.IsIdentityToken(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static FIdentityTokenType GetAsIdentityToken(const FServerMessageType& InValue)
    {
        return InValue.GetAsIdentityToken();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ServerMessage")
    static FServerMessageType OneOffQueryResponse(const FOneOffQueryResponseType& InValue)
    {
        return FServerMessageType::OneOffQueryResponse(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static bool IsOneOffQueryResponse(const FServerMessageType& InValue) { return InValue.IsOneOffQueryResponse(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static FOneOffQueryResponseType GetAsOneOffQueryResponse(const FServerMessageType& InValue)
    {
        return InValue.GetAsOneOffQueryResponse();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ServerMessage")
    static FServerMessageType SubscribeApplied(const FSubscribeAppliedType& InValue)
    {
        return FServerMessageType::SubscribeApplied(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static bool IsSubscribeApplied(const FServerMessageType& InValue) { return InValue.IsSubscribeApplied(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static FSubscribeAppliedType GetAsSubscribeApplied(const FServerMessageType& InValue)
    {
        return InValue.GetAsSubscribeApplied();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ServerMessage")
    static FServerMessageType UnsubscribeApplied(const FUnsubscribeAppliedType& InValue)
    {
        return FServerMessageType::UnsubscribeApplied(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static bool IsUnsubscribeApplied(const FServerMessageType& InValue) { return InValue.IsUnsubscribeApplied(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static FUnsubscribeAppliedType GetAsUnsubscribeApplied(const FServerMessageType& InValue)
    {
        return InValue.GetAsUnsubscribeApplied();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ServerMessage")
    static FServerMessageType SubscriptionError(const FSubscriptionErrorType& InValue)
    {
        return FServerMessageType::SubscriptionError(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static bool IsSubscriptionError(const FServerMessageType& InValue) { return InValue.IsSubscriptionError(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static FSubscriptionErrorType GetAsSubscriptionError(const FServerMessageType& InValue)
    {
        return InValue.GetAsSubscriptionError();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ServerMessage")
    static FServerMessageType SubscribeMultiApplied(const FSubscribeMultiAppliedType& InValue)
    {
        return FServerMessageType::SubscribeMultiApplied(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static bool IsSubscribeMultiApplied(const FServerMessageType& InValue) { return InValue.IsSubscribeMultiApplied(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static FSubscribeMultiAppliedType GetAsSubscribeMultiApplied(const FServerMessageType& InValue)
    {
        return InValue.GetAsSubscribeMultiApplied();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ServerMessage")
    static FServerMessageType UnsubscribeMultiApplied(const FUnsubscribeMultiAppliedType& InValue)
    {
        return FServerMessageType::UnsubscribeMultiApplied(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static bool IsUnsubscribeMultiApplied(const FServerMessageType& InValue) { return InValue.IsUnsubscribeMultiApplied(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ServerMessage")
    static FUnsubscribeMultiAppliedType GetAsUnsubscribeMultiApplied(const FServerMessageType& InValue)
    {
        return InValue.GetAsUnsubscribeMultiApplied();
    }

};
