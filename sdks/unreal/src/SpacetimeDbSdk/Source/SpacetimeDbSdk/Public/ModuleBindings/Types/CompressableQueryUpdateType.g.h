// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "ModuleBindings/Types/QueryUpdateType.g.h"
#include "Kismet/BlueprintFunctionLibrary.h"
#include "CompressableQueryUpdateType.g.generated.h"

UENUM(BlueprintType)
enum class ECompressableQueryUpdateTag : uint8
{
    Uncompressed,
    Brotli,
    Gzip
};

USTRUCT(BlueprintType)
struct SPACETIMEDBSDK_API FCompressableQueryUpdateType
{
    GENERATED_BODY()

public:
    FCompressableQueryUpdateType() = default;

    TVariant<FQueryUpdateType, TArray<uint8>> MessageData;

    UPROPERTY(BlueprintReadOnly)
    ECompressableQueryUpdateTag Tag = static_cast<ECompressableQueryUpdateTag>(0);

    static FCompressableQueryUpdateType Uncompressed(const FQueryUpdateType& Value)
    {
        FCompressableQueryUpdateType Obj;
        Obj.Tag = ECompressableQueryUpdateTag::Uncompressed;
        Obj.MessageData.Set<FQueryUpdateType>(Value);
        return Obj;
    }

    static FCompressableQueryUpdateType Brotli(const TArray<uint8>& Value)
    {
        FCompressableQueryUpdateType Obj;
        Obj.Tag = ECompressableQueryUpdateTag::Brotli;
        Obj.MessageData.Set<TArray<uint8>>(Value);
        return Obj;
    }

    static FCompressableQueryUpdateType Gzip(const TArray<uint8>& Value)
    {
        FCompressableQueryUpdateType Obj;
        Obj.Tag = ECompressableQueryUpdateTag::Gzip;
        Obj.MessageData.Set<TArray<uint8>>(Value);
        return Obj;
    }

    FORCEINLINE bool IsUncompressed() const { return Tag == ECompressableQueryUpdateTag::Uncompressed; }

    FORCEINLINE FQueryUpdateType GetAsUncompressed() const
    {
        ensureMsgf(IsUncompressed(), TEXT("MessageData does not hold Uncompressed!"));
        return MessageData.Get<FQueryUpdateType>();
    }

    FORCEINLINE bool IsBrotli() const { return Tag == ECompressableQueryUpdateTag::Brotli; }

    FORCEINLINE TArray<uint8> GetAsBrotli() const
    {
        ensureMsgf(IsBrotli(), TEXT("MessageData does not hold Brotli!"));
        return MessageData.Get<TArray<uint8>>();
    }

    FORCEINLINE bool IsGzip() const { return Tag == ECompressableQueryUpdateTag::Gzip; }

    FORCEINLINE TArray<uint8> GetAsGzip() const
    {
        ensureMsgf(IsGzip(), TEXT("MessageData does not hold Gzip!"));
        return MessageData.Get<TArray<uint8>>();
    }

    // Inline equality operators
    FORCEINLINE bool operator==(const FCompressableQueryUpdateType& Other) const
    {
        if (Tag != Other.Tag) return false;

        switch (Tag)
        {
            case ECompressableQueryUpdateTag::Uncompressed:
                return GetAsUncompressed() == Other.GetAsUncompressed();
            case ECompressableQueryUpdateTag::Brotli:
                return GetAsBrotli() == Other.GetAsBrotli();
            case ECompressableQueryUpdateTag::Gzip:
                return GetAsGzip() == Other.GetAsGzip();
            default:
                return false;
        }
    }

    FORCEINLINE bool operator!=(const FCompressableQueryUpdateType& Other) const
    {
        return !(*this == Other);
    }
};

/**
 * Custom hash function for FCompressableQueryUpdateType.
 * Combines the hashes of all fields that are compared in operator==.
 * @param CompressableQueryUpdateType The FCompressableQueryUpdateType instance to hash.
 * @return The combined hash value.
 */
FORCEINLINE uint32 GetTypeHash(const FCompressableQueryUpdateType& CompressableQueryUpdate)
{
    const uint32 TagHash = GetTypeHash(static_cast<uint8>(CompressableQueryUpdate.Tag));
    switch (CompressableQueryUpdate.Tag)
    {
        case ECompressableQueryUpdateTag::Uncompressed: return HashCombine(TagHash, ::GetTypeHash(CompressableQueryUpdate.GetAsUncompressed()));
        case ECompressableQueryUpdateTag::Brotli: return HashCombine(TagHash, ::GetTypeHash(CompressableQueryUpdate.GetAsBrotli()));
        case ECompressableQueryUpdateTag::Gzip: return HashCombine(TagHash, ::GetTypeHash(CompressableQueryUpdate.GetAsGzip()));
        default: return TagHash;
    }
}

namespace UE::SpacetimeDB
{
    UE_SPACETIMEDB_ENABLE_TARRAY(FCompressableQueryUpdateType);

    UE_SPACETIMEDB_TAGGED_ENUM(
        FCompressableQueryUpdateType,
        ECompressableQueryUpdateTag,
        MessageData,
        Uncompressed, FQueryUpdateType,
        Brotli, TArray<uint8>,
        Gzip, TArray<uint8>
    );
}

UCLASS()
class SPACETIMEDBSDK_API UCompressableQueryUpdateBpLib : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

private:
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|CompressableQueryUpdate")
    static FCompressableQueryUpdateType Uncompressed(const FQueryUpdateType& InValue)
    {
        return FCompressableQueryUpdateType::Uncompressed(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|CompressableQueryUpdate")
    static bool IsUncompressed(const FCompressableQueryUpdateType& InValue) { return InValue.IsUncompressed(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|CompressableQueryUpdate")
    static FQueryUpdateType GetAsUncompressed(const FCompressableQueryUpdateType& InValue)
    {
        return InValue.GetAsUncompressed();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|CompressableQueryUpdate")
    static FCompressableQueryUpdateType Brotli(const TArray<uint8>& InValue)
    {
        return FCompressableQueryUpdateType::Brotli(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|CompressableQueryUpdate")
    static bool IsBrotli(const FCompressableQueryUpdateType& InValue) { return InValue.IsBrotli(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|CompressableQueryUpdate")
    static TArray<uint8> GetAsBrotli(const FCompressableQueryUpdateType& InValue)
    {
        return InValue.GetAsBrotli();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|CompressableQueryUpdate")
    static FCompressableQueryUpdateType Gzip(const TArray<uint8>& InValue)
    {
        return FCompressableQueryUpdateType::Gzip(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|CompressableQueryUpdate")
    static bool IsGzip(const FCompressableQueryUpdateType& InValue) { return InValue.IsGzip(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|CompressableQueryUpdate")
    static TArray<uint8> GetAsGzip(const FCompressableQueryUpdateType& InValue)
    {
        return InValue.GetAsGzip();
    }

};
