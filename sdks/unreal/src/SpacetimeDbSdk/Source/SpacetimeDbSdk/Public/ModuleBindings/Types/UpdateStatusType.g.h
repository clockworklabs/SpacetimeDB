// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Kismet/BlueprintFunctionLibrary.h"
#include "Types/UnitType.h"
#include "ModuleBindings/Types/DatabaseUpdateType.g.h"
#include "UpdateStatusType.g.generated.h"

UENUM(BlueprintType)
enum class EUpdateStatusTag : uint8
{
    Committed,
    Failed,
    OutOfEnergy
};

USTRUCT(BlueprintType)
struct SPACETIMEDBSDK_API FUpdateStatusType
{
    GENERATED_BODY()

public:
    FUpdateStatusType() = default;

    TVariant<FString, FDatabaseUpdateType, FSpacetimeDBUnit> MessageData;

    UPROPERTY(BlueprintReadOnly)
    EUpdateStatusTag Tag;

    static FUpdateStatusType Committed(const FDatabaseUpdateType& Value)
    {
        FUpdateStatusType Obj;
        Obj.Tag = EUpdateStatusTag::Committed;
        Obj.MessageData.Set<FDatabaseUpdateType>(Value);
        return Obj;
    }

    static FUpdateStatusType Failed(const FString& Value)
    {
        FUpdateStatusType Obj;
        Obj.Tag = EUpdateStatusTag::Failed;
        Obj.MessageData.Set<FString>(Value);
        return Obj;
    }

    static FUpdateStatusType OutOfEnergy(const FSpacetimeDBUnit& Value)
    {
        FUpdateStatusType Obj;
        Obj.Tag = EUpdateStatusTag::OutOfEnergy;
        Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
        return Obj;
    }

    FORCEINLINE bool IsCommitted() const { return Tag == EUpdateStatusTag::Committed; }

    FORCEINLINE FDatabaseUpdateType GetAsCommitted() const
    {
        ensureMsgf(IsCommitted(), TEXT("MessageData does not hold Committed!"));
        return MessageData.Get<FDatabaseUpdateType>();
    }

    FORCEINLINE bool IsFailed() const { return Tag == EUpdateStatusTag::Failed; }

    FORCEINLINE FString GetAsFailed() const
    {
        ensureMsgf(IsFailed(), TEXT("MessageData does not hold Failed!"));
        return MessageData.Get<FString>();
    }

    FORCEINLINE bool IsOutOfEnergy() const { return Tag == EUpdateStatusTag::OutOfEnergy; }

    FORCEINLINE FSpacetimeDBUnit GetAsOutOfEnergy() const
    {
        ensureMsgf(IsOutOfEnergy(), TEXT("MessageData does not hold OutOfEnergy!"));
        return MessageData.Get<FSpacetimeDBUnit>();
    }

    // Inline equality operators
    FORCEINLINE bool operator==(const FUpdateStatusType& Other) const
    {
        if (Tag != Other.Tag) return false;

        switch (Tag)
        {
            case EUpdateStatusTag::Committed:
                return GetAsCommitted() == Other.GetAsCommitted();
            case EUpdateStatusTag::Failed:
                return GetAsFailed() == Other.GetAsFailed();
            case EUpdateStatusTag::OutOfEnergy:
                return GetAsOutOfEnergy() == Other.GetAsOutOfEnergy();
            default:
                return false;
        }
    }

    FORCEINLINE bool operator!=(const FUpdateStatusType& Other) const
    {
        return !(*this == Other);
    }
};

/**
 * Custom hash function for FUpdateStatusType.
 * Combines the hashes of all fields that are compared in operator==.
 * @param UpdateStatusType The FUpdateStatusType instance to hash.
 * @return The combined hash value.
 */
FORCEINLINE uint32 GetTypeHash(const FUpdateStatusType& UpdateStatus)
{
    const uint32 TagHash = GetTypeHash(static_cast<uint8>(UpdateStatus.Tag));
    switch (UpdateStatus.Tag)
    {
        case EUpdateStatusTag::Committed: return HashCombine(TagHash, ::GetTypeHash(UpdateStatus.GetAsCommitted()));
        case EUpdateStatusTag::Failed: return HashCombine(TagHash, GetTypeHash(UpdateStatus.GetAsFailed()));
        case EUpdateStatusTag::OutOfEnergy: return HashCombine(TagHash, ::GetTypeHash(UpdateStatus.GetAsOutOfEnergy()));
        default: return TagHash;
    }
}

namespace UE::SpacetimeDB
{
    UE_SPACETIMEDB_ENABLE_TARRAY(FUpdateStatusType);

    UE_SPACETIMEDB_TAGGED_ENUM(
        FUpdateStatusType,
        EUpdateStatusTag,
        MessageData,
        Committed, FDatabaseUpdateType,
        Failed, FString,
        OutOfEnergy, FSpacetimeDBUnit
    );
}

UCLASS()
class SPACETIMEDBSDK_API UUpdateStatusBpLib : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

private:
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|UpdateStatus")
    static FUpdateStatusType Committed(const FDatabaseUpdateType& InValue)
    {
        return FUpdateStatusType::Committed(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|UpdateStatus")
    static bool IsCommitted(const FUpdateStatusType& InValue) { return InValue.IsCommitted(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|UpdateStatus")
    static FDatabaseUpdateType GetAsCommitted(const FUpdateStatusType& InValue)
    {
        return InValue.GetAsCommitted();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|UpdateStatus")
    static FUpdateStatusType Failed(const FString& InValue)
    {
        return FUpdateStatusType::Failed(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|UpdateStatus")
    static bool IsFailed(const FUpdateStatusType& InValue) { return InValue.IsFailed(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|UpdateStatus")
    static FString GetAsFailed(const FUpdateStatusType& InValue)
    {
        return InValue.GetAsFailed();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|UpdateStatus")
    static FUpdateStatusType OutOfEnergy(const FSpacetimeDBUnit& InValue)
    {
        return FUpdateStatusType::OutOfEnergy(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|UpdateStatus")
    static bool IsOutOfEnergy(const FUpdateStatusType& InValue) { return InValue.IsOutOfEnergy(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|UpdateStatus")
    static FSpacetimeDBUnit GetAsOutOfEnergy(const FUpdateStatusType& InValue)
    {
        return InValue.GetAsOutOfEnergy();
    }

};
