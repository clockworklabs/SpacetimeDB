// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/ConsumeEntityTimerTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UConsumeEntityTimerTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FConsumeEntityTimerType>>();

    TSharedPtr<FTableCache<FConsumeEntityTimerType>> ConsumeEntityTimerTable = Data->GetOrAdd(TableName);
    ConsumeEntityTimerTable->AddUniqueConstraint<uint64>("scheduled_id", [](const FConsumeEntityTimerType& Row) -> const uint64& {
        return Row.ScheduledId; });

    ScheduledId = NewObject<UConsumeEntityTimerScheduledIdUniqueIndex>(this);
    ScheduledId->SetCache(ConsumeEntityTimerTable);

    /***/
}

FTableAppliedDiff<FConsumeEntityTimerType> UConsumeEntityTimerTable::Update(TArray<FWithBsatn<FConsumeEntityTimerType>> InsertsRef, TArray<FWithBsatn<FConsumeEntityTimerType>> DeletesRef)
{
    FTableAppliedDiff<FConsumeEntityTimerType> Diff = BaseUpdate<FConsumeEntityTimerType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<uint64>(
        [](const FConsumeEntityTimerType& Row) 
        {
            return Row.ScheduledId; 
        }
    );

    return Diff;
}

int32 UConsumeEntityTimerTable::Count() const
{
    return GetRowCountFromTable<FConsumeEntityTimerType>(Data, TableName);
}

TArray<FConsumeEntityTimerType> UConsumeEntityTimerTable::Iter() const
{
    return GetAllRowsFromTable<FConsumeEntityTimerType>(Data, TableName);
}
