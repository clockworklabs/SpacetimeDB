// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/SpawnFoodTimerTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void USpawnFoodTimerTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FSpawnFoodTimerType>>();

    TSharedPtr<FTableCache<FSpawnFoodTimerType>> SpawnFoodTimerTable = Data->GetOrAdd(TableName);
    SpawnFoodTimerTable->AddUniqueConstraint<uint64>("scheduled_id", [](const FSpawnFoodTimerType& Row) -> const uint64& {
        return Row.ScheduledId; });

    ScheduledId = NewObject<USpawnFoodTimerScheduledIdUniqueIndex>(this);
    ScheduledId->SetCache(SpawnFoodTimerTable);

    /***/
}

FTableAppliedDiff<FSpawnFoodTimerType> USpawnFoodTimerTable::Update(TArray<FWithBsatn<FSpawnFoodTimerType>> InsertsRef, TArray<FWithBsatn<FSpawnFoodTimerType>> DeletesRef)
{
    FTableAppliedDiff<FSpawnFoodTimerType> Diff = BaseUpdate<FSpawnFoodTimerType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<uint64>(
        [](const FSpawnFoodTimerType& Row) 
        {
            return Row.ScheduledId; 
        }
    );

    return Diff;
}

int32 USpawnFoodTimerTable::Count() const
{
    return GetRowCountFromTable<FSpawnFoodTimerType>(Data, TableName);
}

TArray<FSpawnFoodTimerType> USpawnFoodTimerTable::Iter() const
{
    return GetAllRowsFromTable<FSpawnFoodTimerType>(Data, TableName);
}
