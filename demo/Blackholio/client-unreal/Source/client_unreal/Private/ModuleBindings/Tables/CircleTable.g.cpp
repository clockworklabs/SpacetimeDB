// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/CircleTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UCircleTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FCircleType>>();

    TSharedPtr<FTableCache<FCircleType>> CircleTable = Data->GetOrAdd(TableName);
    CircleTable->AddUniqueConstraint<int32>("entity_id", [](const FCircleType& Row) -> const int32& {
        return Row.EntityId; });

    EntityId = NewObject<UCircleEntityIdUniqueIndex>(this);
    EntityId->SetCache(CircleTable);

    // Register a new multi-key B-Tree index named "player_id" on the CircleTable.
    CircleTable->AddMultiKeyBTreeIndex<TTuple<int32>>(
        TEXT("player_id"),
        [](const FCircleType& Row)
        {
            // This tuple is stored in the B-Tree index for fast composite key lookups.
            return MakeTuple(Row.PlayerId);
        }
    );

    PlayerId = NewObject<UCirclePlayerIdIndex>(this);
    PlayerId->SetCache(CircleTable);

    /***/
}

FTableAppliedDiff<FCircleType> UCircleTable::Update(TArray<FWithBsatn<FCircleType>> InsertsRef, TArray<FWithBsatn<FCircleType>> DeletesRef)
{
    FTableAppliedDiff<FCircleType> Diff = BaseUpdate<FCircleType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<int32>(
        [](const FCircleType& Row) 
        {
            return Row.EntityId; 
        }
    );

    return Diff;
}

int32 UCircleTable::Count() const
{
    return GetRowCountFromTable<FCircleType>(Data, TableName);
}

TArray<FCircleType> UCircleTable::Iter() const
{
    return GetAllRowsFromTable<FCircleType>(Data, TableName);
}
