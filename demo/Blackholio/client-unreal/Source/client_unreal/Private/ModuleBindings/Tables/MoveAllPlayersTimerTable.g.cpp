// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/MoveAllPlayersTimerTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UMoveAllPlayersTimerTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FMoveAllPlayersTimerType>>();

    TSharedPtr<FTableCache<FMoveAllPlayersTimerType>> MoveAllPlayersTimerTable = Data->GetOrAdd(TableName);
    MoveAllPlayersTimerTable->AddUniqueConstraint<uint64>("scheduled_id", [](const FMoveAllPlayersTimerType& Row) -> const uint64& {
        return Row.ScheduledId; });

    ScheduledId = NewObject<UMoveAllPlayersTimerScheduledIdUniqueIndex>(this);
    ScheduledId->SetCache(MoveAllPlayersTimerTable);

    /***/
}

FTableAppliedDiff<FMoveAllPlayersTimerType> UMoveAllPlayersTimerTable::Update(TArray<FWithBsatn<FMoveAllPlayersTimerType>> InsertsRef, TArray<FWithBsatn<FMoveAllPlayersTimerType>> DeletesRef)
{
    FTableAppliedDiff<FMoveAllPlayersTimerType> Diff = BaseUpdate<FMoveAllPlayersTimerType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<uint64>(
        [](const FMoveAllPlayersTimerType& Row) 
        {
            return Row.ScheduledId; 
        }
    );

    return Diff;
}

int32 UMoveAllPlayersTimerTable::Count() const
{
    return GetRowCountFromTable<FMoveAllPlayersTimerType>(Data, TableName);
}

TArray<FMoveAllPlayersTimerType> UMoveAllPlayersTimerTable::Iter() const
{
    return GetAllRowsFromTable<FMoveAllPlayersTimerType>(Data, TableName);
}
