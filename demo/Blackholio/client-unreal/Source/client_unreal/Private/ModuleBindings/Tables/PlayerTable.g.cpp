// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/PlayerTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UPlayerTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FPlayerType>>();

    TSharedPtr<FTableCache<FPlayerType>> PlayerTable = Data->GetOrAdd(TableName);
    PlayerTable->AddUniqueConstraint<FSpacetimeDBIdentity>("identity", [](const FPlayerType& Row) -> const FSpacetimeDBIdentity& {
        return Row.Identity; });
    PlayerTable->AddUniqueConstraint<uint32>("player_id", [](const FPlayerType& Row) -> const uint32& {
        return Row.PlayerId; });

    Identity = NewObject<UPlayerIdentityUniqueIndex>(this);
    Identity->SetCache(PlayerTable);

    PlayerId = NewObject<UPlayerPlayerIdUniqueIndex>(this);
    PlayerId->SetCache(PlayerTable);

    /***/
}

FTableAppliedDiff<FPlayerType> UPlayerTable::Update(TArray<FWithBsatn<FPlayerType>> InsertsRef, TArray<FWithBsatn<FPlayerType>> DeletesRef)
{
    FTableAppliedDiff<FPlayerType> Diff = BaseUpdate<FPlayerType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<FSpacetimeDBIdentity>(
        [](const FPlayerType& Row) 
        {
            return Row.Identity; 
        }
    );

    return Diff;
}

int32 UPlayerTable::Count() const
{
    return GetRowCountFromTable<FPlayerType>(Data, TableName);
}

TArray<FPlayerType> UPlayerTable::Iter() const
{
    return GetAllRowsFromTable<FPlayerType>(Data, TableName);
}
