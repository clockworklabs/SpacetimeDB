// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/EntityTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UEntityTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FEntityType>>();

    TSharedPtr<FTableCache<FEntityType>> EntityTable = Data->GetOrAdd(TableName);
    EntityTable->AddUniqueConstraint<uint32>("entity_id", [](const FEntityType& Row) -> const uint32& {
        return Row.EntityId; });

    EntityId = NewObject<UEntityEntityIdUniqueIndex>(this);
    EntityId->SetCache(EntityTable);

    /***/
}

FTableAppliedDiff<FEntityType> UEntityTable::Update(TArray<FWithBsatn<FEntityType>> InsertsRef, TArray<FWithBsatn<FEntityType>> DeletesRef)
{
    FTableAppliedDiff<FEntityType> Diff = BaseUpdate<FEntityType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<uint32>(
        [](const FEntityType& Row) 
        {
            return Row.EntityId; 
        }
    );

    return Diff;
}

int32 UEntityTable::Count() const
{
    return GetRowCountFromTable<FEntityType>(Data, TableName);
}

TArray<FEntityType> UEntityTable::Iter() const
{
    return GetAllRowsFromTable<FEntityType>(Data, TableName);
}
