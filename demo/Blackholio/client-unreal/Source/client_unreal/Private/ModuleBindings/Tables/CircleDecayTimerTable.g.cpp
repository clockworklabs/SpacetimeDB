// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#include "ModuleBindings/Tables/CircleDecayTimerTable.g.h"
#include "DBCache/UniqueIndex.h"
#include "DBCache/BTreeUniqueIndex.h"
#include "DBCache/ClientCache.h"
#include "DBCache/TableCache.h"

void UCircleDecayTimerTable::PostInitialize()
{
    /** Client cache init and setting up indexes*/
    Data = MakeShared<UClientCache<FCircleDecayTimerType>>();

    TSharedPtr<FTableCache<FCircleDecayTimerType>> CircleDecayTimerTable = Data->GetOrAdd(TableName);
    CircleDecayTimerTable->AddUniqueConstraint<uint64>("scheduled_id", [](const FCircleDecayTimerType& Row) -> const uint64& {
        return Row.ScheduledId; });

    ScheduledId = NewObject<UCircleDecayTimerScheduledIdUniqueIndex>(this);
    ScheduledId->SetCache(CircleDecayTimerTable);

    /***/
}

FTableAppliedDiff<FCircleDecayTimerType> UCircleDecayTimerTable::Update(TArray<FWithBsatn<FCircleDecayTimerType>> InsertsRef, TArray<FWithBsatn<FCircleDecayTimerType>> DeletesRef)
{
    FTableAppliedDiff<FCircleDecayTimerType> Diff = BaseUpdate<FCircleDecayTimerType>(InsertsRef, DeletesRef, Data, TableName);

    Diff.DeriveUpdatesByPrimaryKey<uint64>(
        [](const FCircleDecayTimerType& Row) 
        {
            return Row.ScheduledId; 
        }
    );

    return Diff;
}

int32 UCircleDecayTimerTable::Count() const
{
    return GetRowCountFromTable<FCircleDecayTimerType>(Data, TableName);
}

TArray<FCircleDecayTimerType> UCircleDecayTimerTable::Iter() const
{
    return GetAllRowsFromTable<FCircleDecayTimerType>(Data, TableName);
}
