// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Types/Builtins.h"
#include "ModuleBindings/Types/EntityType.g.h"
#include "Tables/RemoteTable.h"
#include "DBCache/WithBsatn.h"
#include "DBCache/TableHandle.h"
#include "DBCache/TableCache.h"
#include "EntityTable.g.generated.h"

UCLASS(Blueprintable)
class CLIENT_UNREAL_API UEntityEntityIdUniqueIndex : public UObject
{
    GENERATED_BODY()

private:
    // Declare an instance of your templated helper.
    // It's private because the UObject wrapper will expose its functionality.
    FUniqueIndexHelper<FEntityType, int32, FTableCache<FEntityType>> EntityIdIndexHelper;

public:
    UEntityEntityIdUniqueIndex()
        // Initialize the helper with the specific unique index name
        : EntityIdIndexHelper("entity_id") {
    }

    /**
     * Finds a Entity by their unique entityid.
     * @param Key The entityid to search for.
     * @return The found FEntityType, or a default-constructed FEntityType if not found.
     */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|EntityIndex")
    FEntityType Find(int32 Key)
    {
        // Simply delegate the call to the internal helper
        return EntityIdIndexHelper.FindUniqueIndex(Key);
    }

    // A public setter to provide the cache to the helper after construction
    // This is a common pattern when the cache might be created or provided by another system.
    void SetCache(TSharedPtr<const FTableCache<FEntityType>> InEntityCache)
    {
        EntityIdIndexHelper.Cache = InEntityCache;
    }
};
/***/

UCLASS(BlueprintType)
class CLIENT_UNREAL_API UEntityTable : public URemoteTable
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly)
    UEntityEntityIdUniqueIndex* EntityId;

    void PostInitialize();

    /** Update function for entity table*/
    FTableAppliedDiff<FEntityType> Update(TArray<FWithBsatn<FEntityType>> InsertsRef, TArray<FWithBsatn<FEntityType>> DeletesRef);

    /** Number of subscribed rows currently in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    int32 Count() const;

    /** Return all subscribed rows in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    TArray<FEntityType> Iter() const;

    // Table Events
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnEntityInsert,
        const FEventContext&, Context,
        const FEntityType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams( 
        FOnEntityUpdate,
        const FEventContext&, Context,
        const FEntityType&, OldRow,
        const FEntityType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnEntityDelete,
        const FEventContext&, Context,
        const FEntityType&, DeletedRow);

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnEntityInsert OnInsert;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnEntityUpdate OnUpdate;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnEntityDelete OnDelete;

private:
    const FString TableName = TEXT("entity");

    TSharedPtr<UClientCache<FEntityType>> Data;
};
