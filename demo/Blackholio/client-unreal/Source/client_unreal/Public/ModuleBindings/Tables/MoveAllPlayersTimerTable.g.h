// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Types/Builtins.h"
#include "ModuleBindings/Types/MoveAllPlayersTimerType.g.h"
#include "Tables/RemoteTable.h"
#include "DBCache/WithBsatn.h"
#include "DBCache/TableHandle.h"
#include "DBCache/TableCache.h"
#include "MoveAllPlayersTimerTable.g.generated.h"

UCLASS(Blueprintable)
class CLIENT_UNREAL_API UMoveAllPlayersTimerScheduledIdUniqueIndex : public UObject
{
    GENERATED_BODY()

private:
    // Declare an instance of your templated helper.
    // It's private because the UObject wrapper will expose its functionality.
    FUniqueIndexHelper<FMoveAllPlayersTimerType, uint64, FTableCache<FMoveAllPlayersTimerType>> ScheduledIdIndexHelper;

public:
    UMoveAllPlayersTimerScheduledIdUniqueIndex()
        // Initialize the helper with the specific unique index name
        : ScheduledIdIndexHelper("scheduled_id") {
    }

    /**
     * Finds a MoveAllPlayersTimer by their unique scheduledid.
     * @param Key The scheduledid to search for.
     * @return The found FMoveAllPlayersTimerType, or a default-constructed FMoveAllPlayersTimerType if not found.
     */
    // NOTE: Not exposed to Blueprint because uint64 types are not Blueprint-compatible
    FMoveAllPlayersTimerType Find(uint64 Key)
    {
        // Simply delegate the call to the internal helper
        return ScheduledIdIndexHelper.FindUniqueIndex(Key);
    }

    // A public setter to provide the cache to the helper after construction
    // This is a common pattern when the cache might be created or provided by another system.
    void SetCache(TSharedPtr<const FTableCache<FMoveAllPlayersTimerType>> InMoveAllPlayersTimerCache)
    {
        ScheduledIdIndexHelper.Cache = InMoveAllPlayersTimerCache;
    }
};
/***/

UCLASS(BlueprintType)
class CLIENT_UNREAL_API UMoveAllPlayersTimerTable : public URemoteTable
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly)
    UMoveAllPlayersTimerScheduledIdUniqueIndex* ScheduledId;

    void PostInitialize();

    /** Update function for move_all_players_timer table*/
    FTableAppliedDiff<FMoveAllPlayersTimerType> Update(TArray<FWithBsatn<FMoveAllPlayersTimerType>> InsertsRef, TArray<FWithBsatn<FMoveAllPlayersTimerType>> DeletesRef);

    /** Number of subscribed rows currently in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    int32 Count() const;

    /** Return all subscribed rows in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    TArray<FMoveAllPlayersTimerType> Iter() const;

    // Table Events
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnMoveAllPlayersTimerInsert,
        const FEventContext&, Context,
        const FMoveAllPlayersTimerType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams( 
        FOnMoveAllPlayersTimerUpdate,
        const FEventContext&, Context,
        const FMoveAllPlayersTimerType&, OldRow,
        const FMoveAllPlayersTimerType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnMoveAllPlayersTimerDelete,
        const FEventContext&, Context,
        const FMoveAllPlayersTimerType&, DeletedRow);

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnMoveAllPlayersTimerInsert OnInsert;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnMoveAllPlayersTimerUpdate OnUpdate;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnMoveAllPlayersTimerDelete OnDelete;

private:
    const FString TableName = TEXT("move_all_players_timer");

    TSharedPtr<UClientCache<FMoveAllPlayersTimerType>> Data;
};
