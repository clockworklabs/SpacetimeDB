// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Types/Builtins.h"
#include "ModuleBindings/Types/CircleType.g.h"
#include "Tables/RemoteTable.h"
#include "DBCache/WithBsatn.h"
#include "DBCache/TableHandle.h"
#include "DBCache/TableCache.h"
#include "CircleTable.g.generated.h"

UCLASS(Blueprintable)
class CLIENT_UNREAL_API UCircleEntityIdUniqueIndex : public UObject
{
    GENERATED_BODY()

private:
    // Declare an instance of your templated helper.
    // It's private because the UObject wrapper will expose its functionality.
    FUniqueIndexHelper<FCircleType, uint32, FTableCache<FCircleType>> EntityIdIndexHelper;

public:
    UCircleEntityIdUniqueIndex()
        // Initialize the helper with the specific unique index name
        : EntityIdIndexHelper("entity_id") {
    }

    /**
     * Finds a Circle by their unique entityid.
     * @param Key The entityid to search for.
     * @return The found FCircleType, or a default-constructed FCircleType if not found.
     */
    // NOTE: Not exposed to Blueprint because uint32 types are not Blueprint-compatible
    FCircleType Find(uint32 Key)
    {
        // Simply delegate the call to the internal helper
        return EntityIdIndexHelper.FindUniqueIndex(Key);
    }

    // A public setter to provide the cache to the helper after construction
    // This is a common pattern when the cache might be created or provided by another system.
    void SetCache(TSharedPtr<const FTableCache<FCircleType>> InCircleCache)
    {
        EntityIdIndexHelper.Cache = InCircleCache;
    }
};
/***/

UCLASS(Blueprintable)
class UCirclePlayerIdIndex : public UObject
{
    GENERATED_BODY()

public:
    TArray<FCircleType> Filter(const uint32& PlayerId) const
    {
        TArray<FCircleType> OutResults;

        LocalCache->FindByMultiKeyBTreeIndex<TTuple<uint32>>(
            OutResults,
            TEXT("player_id"),
            MakeTuple(PlayerId)
        );

        return OutResults;
    }

    void SetCache(TSharedPtr<FTableCache<FCircleType>> InCache)
    {
        LocalCache = InCache;
    }

private:
    // NOTE: Not exposed to Blueprint because some parameter types are not Blueprint-compatible
    void FilterPlayerId(TArray<FCircleType>& OutResults, const uint32& PlayerId)
    {
        OutResults = Filter(PlayerId);
    }

    TSharedPtr<FTableCache<FCircleType>> LocalCache;
};

UCLASS(BlueprintType)
class CLIENT_UNREAL_API UCircleTable : public URemoteTable
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly)
    UCircleEntityIdUniqueIndex* EntityId;

    UPROPERTY(BlueprintReadOnly)
    UCirclePlayerIdIndex* PlayerId;

    void PostInitialize();

    /** Update function for logged_out_circle table*/
    FTableAppliedDiff<FCircleType> Update(TArray<FWithBsatn<FCircleType>> InsertsRef, TArray<FWithBsatn<FCircleType>> DeletesRef);

    /** Number of subscribed rows currently in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    int32 Count() const;

    /** Return all subscribed rows in the cache */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    TArray<FCircleType> Iter() const;

    // Table Events
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnCircleInsert,
        const FEventContext&, Context,
        const FCircleType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams( 
        FOnCircleUpdate,
        const FEventContext&, Context,
        const FCircleType&, OldRow,
        const FCircleType&, NewRow);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams( 
        FOnCircleDelete,
        const FEventContext&, Context,
        const FCircleType&, DeletedRow);

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnCircleInsert OnInsert;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnCircleUpdate OnUpdate;

    UPROPERTY(BlueprintAssignable, Category = "SpacetimeDB Events")
    FOnCircleDelete OnDelete;

private:
    const FString TableName = TEXT("logged_out_circle");

    TSharedPtr<UClientCache<FCircleType>> Data;
};
