// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "ModuleBindings/Types/DbVector2Type.g.h"
#include "Types/Builtins.h"
#include "CircleType.g.generated.h"

USTRUCT(BlueprintType)
struct CLIENT_UNREAL_API FCircleType
{
    GENERATED_BODY()

    // NOTE: uint32 field not exposed to Blueprint due to non-blueprintable elements
    uint32 EntityId;

    // NOTE: uint32 field not exposed to Blueprint due to non-blueprintable elements
    uint32 PlayerId;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FDbVector2Type Direction;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    float Speed;

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "SpacetimeDB")
    FSpacetimeDBTimestamp LastSplitTime;

    FORCEINLINE bool operator==(const FCircleType& Other) const
    {
        return EntityId == Other.EntityId && PlayerId == Other.PlayerId && Direction == Other.Direction && Speed == Other.Speed && LastSplitTime == Other.LastSplitTime;
    }

    FORCEINLINE bool operator!=(const FCircleType& Other) const
    {
        return !(*this == Other);
    }
};

/**
 * Custom hash function for FCircleType.
 * Combines the hashes of all fields that are compared in operator==.
 * @param CircleType The FCircleType instance to hash.
 * @return The combined hash value.
 */
FORCEINLINE uint32 GetTypeHash(const FCircleType& CircleType)
{
    uint32 Hash = GetTypeHash(CircleType.EntityId);
    Hash = HashCombine(Hash, GetTypeHash(CircleType.PlayerId));
    Hash = HashCombine(Hash, GetTypeHash(CircleType.Direction));
    Hash = HashCombine(Hash, GetTypeHash(CircleType.Speed));
    Hash = HashCombine(Hash, GetTypeHash(CircleType.LastSplitTime));
    return Hash;
}

namespace UE::SpacetimeDB
{
    UE_SPACETIMEDB_ENABLE_TARRAY(FCircleType);

    UE_SPACETIMEDB_STRUCT(FCircleType, EntityId, PlayerId, Direction, Speed, LastSplitTime);
}
