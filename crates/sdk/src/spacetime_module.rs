use std::sync::Arc;

use crate::{
    callbacks::{DbCallbacks, ReducerCallbacks},
    client_api_messages,
    client_cache::{ClientCache, ClientCacheView, RowCallbackReminders},
    reducer::AnyReducerEvent,
};

pub trait SpacetimeModule: Send + Sync {
    /// The `handle_event` function autogenerated by the CLI, which dispatches on
    /// reducer name to call `get_callback` and `invoke_callback` with an appropriate type
    /// arg.
    fn handle_event(
        &self,
        event: client_api_messages::Event,
        callbacks: &mut ReducerCallbacks,
        state: ClientCacheView,
    ) -> Option<Arc<AnyReducerEvent>>;

    /// The `handle_table_update` function autogenerated by the CLI, which dispatches on
    /// `table_name` to call `find_table` with an appropriate type arg, and then either
    /// `handle_table_update_no_primary_key` or `handle_table_update_with_primary_key`
    /// that `TableCache`.
    fn handle_table_update(
        &self,
        table_update: client_api_messages::TableUpdate,
        cache: &mut ClientCache,
        callbacks: &mut RowCallbackReminders,
    );

    /// The `handle_resubscribe` function autogenerated by the CLI, which dispatches on
    /// `table_name` to call `find_table` with an appropriate type arg, and then
    /// `reinitialize_for_new_subscribed_set` that `TableCache`.
    fn handle_resubscribe(
        &self,
        table_update: client_api_messages::TableUpdate,
        cache: &mut ClientCache,
        callbacks: &mut RowCallbackReminders,
    );

    /// The `invoke_row_callbacks` function autogenerated by the CLI,
    /// which calls `RowCallbackReminders::invoke_callbacks` for each `T: TableType`
    /// in order to invoke all callbacks generated by a transaction.
    fn invoke_row_callbacks(
        &self,
        callback_reminders: &mut RowCallbackReminders,
        callbacks: &mut DbCallbacks,
        reducer_event: Option<Arc<AnyReducerEvent>>,
        state: &ClientCacheView,
    );
}
