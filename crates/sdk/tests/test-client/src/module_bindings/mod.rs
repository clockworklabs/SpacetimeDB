// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

pub mod b_tree_u_32_type;
pub mod btree_u_32_table;
pub mod byte_struct_type;
pub mod delete_from_btree_u_32_reducer;
pub mod delete_large_table_reducer;
pub mod delete_pk_bool_reducer;
pub mod delete_pk_connection_id_reducer;
pub mod delete_pk_i_128_reducer;
pub mod delete_pk_i_16_reducer;
pub mod delete_pk_i_256_reducer;
pub mod delete_pk_i_32_reducer;
pub mod delete_pk_i_64_reducer;
pub mod delete_pk_i_8_reducer;
pub mod delete_pk_identity_reducer;
pub mod delete_pk_string_reducer;
pub mod delete_pk_u_128_reducer;
pub mod delete_pk_u_16_reducer;
pub mod delete_pk_u_256_reducer;
pub mod delete_pk_u_32_insert_pk_u_32_two_reducer;
pub mod delete_pk_u_32_reducer;
pub mod delete_pk_u_32_two_reducer;
pub mod delete_pk_u_64_reducer;
pub mod delete_pk_u_8_reducer;
pub mod delete_unique_bool_reducer;
pub mod delete_unique_connection_id_reducer;
pub mod delete_unique_i_128_reducer;
pub mod delete_unique_i_16_reducer;
pub mod delete_unique_i_256_reducer;
pub mod delete_unique_i_32_reducer;
pub mod delete_unique_i_64_reducer;
pub mod delete_unique_i_8_reducer;
pub mod delete_unique_identity_reducer;
pub mod delete_unique_string_reducer;
pub mod delete_unique_u_128_reducer;
pub mod delete_unique_u_16_reducer;
pub mod delete_unique_u_256_reducer;
pub mod delete_unique_u_32_reducer;
pub mod delete_unique_u_64_reducer;
pub mod delete_unique_u_8_reducer;
pub mod enum_with_payload_type;
pub mod every_primitive_struct_type;
pub mod every_vec_struct_type;
pub mod indexed_table_2_table;
pub mod indexed_table_2_type;
pub mod indexed_table_table;
pub mod indexed_table_type;
pub mod insert_call_timestamp_reducer;
pub mod insert_caller_one_connection_id_reducer;
pub mod insert_caller_one_identity_reducer;
pub mod insert_caller_pk_connection_id_reducer;
pub mod insert_caller_pk_identity_reducer;
pub mod insert_caller_unique_connection_id_reducer;
pub mod insert_caller_unique_identity_reducer;
pub mod insert_caller_vec_connection_id_reducer;
pub mod insert_caller_vec_identity_reducer;
pub mod insert_into_btree_u_32_reducer;
pub mod insert_into_pk_btree_u_32_reducer;
pub mod insert_large_table_reducer;
pub mod insert_one_bool_reducer;
pub mod insert_one_byte_struct_reducer;
pub mod insert_one_connection_id_reducer;
pub mod insert_one_enum_with_payload_reducer;
pub mod insert_one_every_primitive_struct_reducer;
pub mod insert_one_every_vec_struct_reducer;
pub mod insert_one_f_32_reducer;
pub mod insert_one_f_64_reducer;
pub mod insert_one_i_128_reducer;
pub mod insert_one_i_16_reducer;
pub mod insert_one_i_256_reducer;
pub mod insert_one_i_32_reducer;
pub mod insert_one_i_64_reducer;
pub mod insert_one_i_8_reducer;
pub mod insert_one_identity_reducer;
pub mod insert_one_simple_enum_reducer;
pub mod insert_one_string_reducer;
pub mod insert_one_timestamp_reducer;
pub mod insert_one_u_128_reducer;
pub mod insert_one_u_16_reducer;
pub mod insert_one_u_256_reducer;
pub mod insert_one_u_32_reducer;
pub mod insert_one_u_64_reducer;
pub mod insert_one_u_8_reducer;
pub mod insert_one_unit_struct_reducer;
pub mod insert_option_every_primitive_struct_reducer;
pub mod insert_option_i_32_reducer;
pub mod insert_option_identity_reducer;
pub mod insert_option_simple_enum_reducer;
pub mod insert_option_string_reducer;
pub mod insert_option_vec_option_i_32_reducer;
pub mod insert_pk_bool_reducer;
pub mod insert_pk_connection_id_reducer;
pub mod insert_pk_i_128_reducer;
pub mod insert_pk_i_16_reducer;
pub mod insert_pk_i_256_reducer;
pub mod insert_pk_i_32_reducer;
pub mod insert_pk_i_64_reducer;
pub mod insert_pk_i_8_reducer;
pub mod insert_pk_identity_reducer;
pub mod insert_pk_string_reducer;
pub mod insert_pk_u_128_reducer;
pub mod insert_pk_u_16_reducer;
pub mod insert_pk_u_256_reducer;
pub mod insert_pk_u_32_reducer;
pub mod insert_pk_u_32_two_reducer;
pub mod insert_pk_u_64_reducer;
pub mod insert_pk_u_8_reducer;
pub mod insert_primitives_as_strings_reducer;
pub mod insert_table_holds_table_reducer;
pub mod insert_unique_bool_reducer;
pub mod insert_unique_connection_id_reducer;
pub mod insert_unique_i_128_reducer;
pub mod insert_unique_i_16_reducer;
pub mod insert_unique_i_256_reducer;
pub mod insert_unique_i_32_reducer;
pub mod insert_unique_i_64_reducer;
pub mod insert_unique_i_8_reducer;
pub mod insert_unique_identity_reducer;
pub mod insert_unique_string_reducer;
pub mod insert_unique_u_128_reducer;
pub mod insert_unique_u_16_reducer;
pub mod insert_unique_u_256_reducer;
pub mod insert_unique_u_32_reducer;
pub mod insert_unique_u_32_update_pk_u_32_reducer;
pub mod insert_unique_u_64_reducer;
pub mod insert_unique_u_8_reducer;
pub mod insert_user_reducer;
pub mod insert_vec_bool_reducer;
pub mod insert_vec_byte_struct_reducer;
pub mod insert_vec_connection_id_reducer;
pub mod insert_vec_enum_with_payload_reducer;
pub mod insert_vec_every_primitive_struct_reducer;
pub mod insert_vec_every_vec_struct_reducer;
pub mod insert_vec_f_32_reducer;
pub mod insert_vec_f_64_reducer;
pub mod insert_vec_i_128_reducer;
pub mod insert_vec_i_16_reducer;
pub mod insert_vec_i_256_reducer;
pub mod insert_vec_i_32_reducer;
pub mod insert_vec_i_64_reducer;
pub mod insert_vec_i_8_reducer;
pub mod insert_vec_identity_reducer;
pub mod insert_vec_simple_enum_reducer;
pub mod insert_vec_string_reducer;
pub mod insert_vec_timestamp_reducer;
pub mod insert_vec_u_128_reducer;
pub mod insert_vec_u_16_reducer;
pub mod insert_vec_u_256_reducer;
pub mod insert_vec_u_32_reducer;
pub mod insert_vec_u_64_reducer;
pub mod insert_vec_u_8_reducer;
pub mod insert_vec_unit_struct_reducer;
pub mod large_table_table;
pub mod large_table_type;
pub mod no_op_succeeds_reducer;
pub mod one_bool_table;
pub mod one_bool_type;
pub mod one_byte_struct_table;
pub mod one_byte_struct_type;
pub mod one_connection_id_table;
pub mod one_connection_id_type;
pub mod one_enum_with_payload_table;
pub mod one_enum_with_payload_type;
pub mod one_every_primitive_struct_table;
pub mod one_every_primitive_struct_type;
pub mod one_every_vec_struct_table;
pub mod one_every_vec_struct_type;
pub mod one_f_32_table;
pub mod one_f_32_type;
pub mod one_f_64_table;
pub mod one_f_64_type;
pub mod one_i_128_table;
pub mod one_i_128_type;
pub mod one_i_16_table;
pub mod one_i_16_type;
pub mod one_i_256_table;
pub mod one_i_256_type;
pub mod one_i_32_table;
pub mod one_i_32_type;
pub mod one_i_64_table;
pub mod one_i_64_type;
pub mod one_i_8_table;
pub mod one_i_8_type;
pub mod one_identity_table;
pub mod one_identity_type;
pub mod one_simple_enum_table;
pub mod one_simple_enum_type;
pub mod one_string_table;
pub mod one_string_type;
pub mod one_timestamp_table;
pub mod one_timestamp_type;
pub mod one_u_128_table;
pub mod one_u_128_type;
pub mod one_u_16_table;
pub mod one_u_16_type;
pub mod one_u_256_table;
pub mod one_u_256_type;
pub mod one_u_32_table;
pub mod one_u_32_type;
pub mod one_u_64_table;
pub mod one_u_64_type;
pub mod one_u_8_table;
pub mod one_u_8_type;
pub mod one_unit_struct_table;
pub mod one_unit_struct_type;
pub mod option_every_primitive_struct_table;
pub mod option_every_primitive_struct_type;
pub mod option_i_32_table;
pub mod option_i_32_type;
pub mod option_identity_table;
pub mod option_identity_type;
pub mod option_simple_enum_table;
pub mod option_simple_enum_type;
pub mod option_string_table;
pub mod option_string_type;
pub mod option_vec_option_i_32_table;
pub mod option_vec_option_i_32_type;
pub mod pk_bool_table;
pub mod pk_bool_type;
pub mod pk_connection_id_table;
pub mod pk_connection_id_type;
pub mod pk_i_128_table;
pub mod pk_i_128_type;
pub mod pk_i_16_table;
pub mod pk_i_16_type;
pub mod pk_i_256_table;
pub mod pk_i_256_type;
pub mod pk_i_32_table;
pub mod pk_i_32_type;
pub mod pk_i_64_table;
pub mod pk_i_64_type;
pub mod pk_i_8_table;
pub mod pk_i_8_type;
pub mod pk_identity_table;
pub mod pk_identity_type;
pub mod pk_string_table;
pub mod pk_string_type;
pub mod pk_u_128_table;
pub mod pk_u_128_type;
pub mod pk_u_16_table;
pub mod pk_u_16_type;
pub mod pk_u_256_table;
pub mod pk_u_256_type;
pub mod pk_u_32_table;
pub mod pk_u_32_two_table;
pub mod pk_u_32_two_type;
pub mod pk_u_32_type;
pub mod pk_u_64_table;
pub mod pk_u_64_type;
pub mod pk_u_8_table;
pub mod pk_u_8_type;
pub mod scheduled_table_table;
pub mod scheduled_table_type;
pub mod send_scheduled_message_reducer;
pub mod simple_enum_type;
pub mod table_holds_table_table;
pub mod table_holds_table_type;
pub mod unique_bool_table;
pub mod unique_bool_type;
pub mod unique_connection_id_table;
pub mod unique_connection_id_type;
pub mod unique_i_128_table;
pub mod unique_i_128_type;
pub mod unique_i_16_table;
pub mod unique_i_16_type;
pub mod unique_i_256_table;
pub mod unique_i_256_type;
pub mod unique_i_32_table;
pub mod unique_i_32_type;
pub mod unique_i_64_table;
pub mod unique_i_64_type;
pub mod unique_i_8_table;
pub mod unique_i_8_type;
pub mod unique_identity_table;
pub mod unique_identity_type;
pub mod unique_string_table;
pub mod unique_string_type;
pub mod unique_u_128_table;
pub mod unique_u_128_type;
pub mod unique_u_16_table;
pub mod unique_u_16_type;
pub mod unique_u_256_table;
pub mod unique_u_256_type;
pub mod unique_u_32_table;
pub mod unique_u_32_type;
pub mod unique_u_64_table;
pub mod unique_u_64_type;
pub mod unique_u_8_table;
pub mod unique_u_8_type;
pub mod unit_struct_type;
pub mod update_pk_bool_reducer;
pub mod update_pk_connection_id_reducer;
pub mod update_pk_i_128_reducer;
pub mod update_pk_i_16_reducer;
pub mod update_pk_i_256_reducer;
pub mod update_pk_i_32_reducer;
pub mod update_pk_i_64_reducer;
pub mod update_pk_i_8_reducer;
pub mod update_pk_identity_reducer;
pub mod update_pk_string_reducer;
pub mod update_pk_u_128_reducer;
pub mod update_pk_u_16_reducer;
pub mod update_pk_u_256_reducer;
pub mod update_pk_u_32_reducer;
pub mod update_pk_u_32_two_reducer;
pub mod update_pk_u_64_reducer;
pub mod update_pk_u_8_reducer;
pub mod update_unique_bool_reducer;
pub mod update_unique_connection_id_reducer;
pub mod update_unique_i_128_reducer;
pub mod update_unique_i_16_reducer;
pub mod update_unique_i_256_reducer;
pub mod update_unique_i_32_reducer;
pub mod update_unique_i_64_reducer;
pub mod update_unique_i_8_reducer;
pub mod update_unique_identity_reducer;
pub mod update_unique_string_reducer;
pub mod update_unique_u_128_reducer;
pub mod update_unique_u_16_reducer;
pub mod update_unique_u_256_reducer;
pub mod update_unique_u_32_reducer;
pub mod update_unique_u_64_reducer;
pub mod update_unique_u_8_reducer;
pub mod users_table;
pub mod users_type;
pub mod vec_bool_table;
pub mod vec_bool_type;
pub mod vec_byte_struct_table;
pub mod vec_byte_struct_type;
pub mod vec_connection_id_table;
pub mod vec_connection_id_type;
pub mod vec_enum_with_payload_table;
pub mod vec_enum_with_payload_type;
pub mod vec_every_primitive_struct_table;
pub mod vec_every_primitive_struct_type;
pub mod vec_every_vec_struct_table;
pub mod vec_every_vec_struct_type;
pub mod vec_f_32_table;
pub mod vec_f_32_type;
pub mod vec_f_64_table;
pub mod vec_f_64_type;
pub mod vec_i_128_table;
pub mod vec_i_128_type;
pub mod vec_i_16_table;
pub mod vec_i_16_type;
pub mod vec_i_256_table;
pub mod vec_i_256_type;
pub mod vec_i_32_table;
pub mod vec_i_32_type;
pub mod vec_i_64_table;
pub mod vec_i_64_type;
pub mod vec_i_8_table;
pub mod vec_i_8_type;
pub mod vec_identity_table;
pub mod vec_identity_type;
pub mod vec_simple_enum_table;
pub mod vec_simple_enum_type;
pub mod vec_string_table;
pub mod vec_string_type;
pub mod vec_timestamp_table;
pub mod vec_timestamp_type;
pub mod vec_u_128_table;
pub mod vec_u_128_type;
pub mod vec_u_16_table;
pub mod vec_u_16_type;
pub mod vec_u_256_table;
pub mod vec_u_256_type;
pub mod vec_u_32_table;
pub mod vec_u_32_type;
pub mod vec_u_64_table;
pub mod vec_u_64_type;
pub mod vec_u_8_table;
pub mod vec_u_8_type;
pub mod vec_unit_struct_table;
pub mod vec_unit_struct_type;

pub use b_tree_u_32_type::BTreeU32;
pub use btree_u_32_table::*;
pub use byte_struct_type::ByteStruct;
pub use delete_from_btree_u_32_reducer::{
    delete_from_btree_u_32, set_flags_for_delete_from_btree_u_32, DeleteFromBtreeU32CallbackId,
};
pub use delete_large_table_reducer::{
    delete_large_table, set_flags_for_delete_large_table, DeleteLargeTableCallbackId,
};
pub use delete_pk_bool_reducer::{delete_pk_bool, set_flags_for_delete_pk_bool, DeletePkBoolCallbackId};
pub use delete_pk_connection_id_reducer::{
    delete_pk_connection_id, set_flags_for_delete_pk_connection_id, DeletePkConnectionIdCallbackId,
};
pub use delete_pk_i_128_reducer::{delete_pk_i_128, set_flags_for_delete_pk_i_128, DeletePkI128CallbackId};
pub use delete_pk_i_16_reducer::{delete_pk_i_16, set_flags_for_delete_pk_i_16, DeletePkI16CallbackId};
pub use delete_pk_i_256_reducer::{delete_pk_i_256, set_flags_for_delete_pk_i_256, DeletePkI256CallbackId};
pub use delete_pk_i_32_reducer::{delete_pk_i_32, set_flags_for_delete_pk_i_32, DeletePkI32CallbackId};
pub use delete_pk_i_64_reducer::{delete_pk_i_64, set_flags_for_delete_pk_i_64, DeletePkI64CallbackId};
pub use delete_pk_i_8_reducer::{delete_pk_i_8, set_flags_for_delete_pk_i_8, DeletePkI8CallbackId};
pub use delete_pk_identity_reducer::{
    delete_pk_identity, set_flags_for_delete_pk_identity, DeletePkIdentityCallbackId,
};
pub use delete_pk_string_reducer::{delete_pk_string, set_flags_for_delete_pk_string, DeletePkStringCallbackId};
pub use delete_pk_u_128_reducer::{delete_pk_u_128, set_flags_for_delete_pk_u_128, DeletePkU128CallbackId};
pub use delete_pk_u_16_reducer::{delete_pk_u_16, set_flags_for_delete_pk_u_16, DeletePkU16CallbackId};
pub use delete_pk_u_256_reducer::{delete_pk_u_256, set_flags_for_delete_pk_u_256, DeletePkU256CallbackId};
pub use delete_pk_u_32_insert_pk_u_32_two_reducer::{
    delete_pk_u_32_insert_pk_u_32_two, set_flags_for_delete_pk_u_32_insert_pk_u_32_two,
    DeletePkU32InsertPkU32TwoCallbackId,
};
pub use delete_pk_u_32_reducer::{delete_pk_u_32, set_flags_for_delete_pk_u_32, DeletePkU32CallbackId};
pub use delete_pk_u_32_two_reducer::{delete_pk_u_32_two, set_flags_for_delete_pk_u_32_two, DeletePkU32TwoCallbackId};
pub use delete_pk_u_64_reducer::{delete_pk_u_64, set_flags_for_delete_pk_u_64, DeletePkU64CallbackId};
pub use delete_pk_u_8_reducer::{delete_pk_u_8, set_flags_for_delete_pk_u_8, DeletePkU8CallbackId};
pub use delete_unique_bool_reducer::{
    delete_unique_bool, set_flags_for_delete_unique_bool, DeleteUniqueBoolCallbackId,
};
pub use delete_unique_connection_id_reducer::{
    delete_unique_connection_id, set_flags_for_delete_unique_connection_id, DeleteUniqueConnectionIdCallbackId,
};
pub use delete_unique_i_128_reducer::{
    delete_unique_i_128, set_flags_for_delete_unique_i_128, DeleteUniqueI128CallbackId,
};
pub use delete_unique_i_16_reducer::{delete_unique_i_16, set_flags_for_delete_unique_i_16, DeleteUniqueI16CallbackId};
pub use delete_unique_i_256_reducer::{
    delete_unique_i_256, set_flags_for_delete_unique_i_256, DeleteUniqueI256CallbackId,
};
pub use delete_unique_i_32_reducer::{delete_unique_i_32, set_flags_for_delete_unique_i_32, DeleteUniqueI32CallbackId};
pub use delete_unique_i_64_reducer::{delete_unique_i_64, set_flags_for_delete_unique_i_64, DeleteUniqueI64CallbackId};
pub use delete_unique_i_8_reducer::{delete_unique_i_8, set_flags_for_delete_unique_i_8, DeleteUniqueI8CallbackId};
pub use delete_unique_identity_reducer::{
    delete_unique_identity, set_flags_for_delete_unique_identity, DeleteUniqueIdentityCallbackId,
};
pub use delete_unique_string_reducer::{
    delete_unique_string, set_flags_for_delete_unique_string, DeleteUniqueStringCallbackId,
};
pub use delete_unique_u_128_reducer::{
    delete_unique_u_128, set_flags_for_delete_unique_u_128, DeleteUniqueU128CallbackId,
};
pub use delete_unique_u_16_reducer::{delete_unique_u_16, set_flags_for_delete_unique_u_16, DeleteUniqueU16CallbackId};
pub use delete_unique_u_256_reducer::{
    delete_unique_u_256, set_flags_for_delete_unique_u_256, DeleteUniqueU256CallbackId,
};
pub use delete_unique_u_32_reducer::{delete_unique_u_32, set_flags_for_delete_unique_u_32, DeleteUniqueU32CallbackId};
pub use delete_unique_u_64_reducer::{delete_unique_u_64, set_flags_for_delete_unique_u_64, DeleteUniqueU64CallbackId};
pub use delete_unique_u_8_reducer::{delete_unique_u_8, set_flags_for_delete_unique_u_8, DeleteUniqueU8CallbackId};
pub use enum_with_payload_type::EnumWithPayload;
pub use every_primitive_struct_type::EveryPrimitiveStruct;
pub use every_vec_struct_type::EveryVecStruct;
pub use indexed_table_2_table::*;
pub use indexed_table_2_type::IndexedTable2;
pub use indexed_table_table::*;
pub use indexed_table_type::IndexedTable;
pub use insert_call_timestamp_reducer::{
    insert_call_timestamp, set_flags_for_insert_call_timestamp, InsertCallTimestampCallbackId,
};
pub use insert_caller_one_connection_id_reducer::{
    insert_caller_one_connection_id, set_flags_for_insert_caller_one_connection_id,
    InsertCallerOneConnectionIdCallbackId,
};
pub use insert_caller_one_identity_reducer::{
    insert_caller_one_identity, set_flags_for_insert_caller_one_identity, InsertCallerOneIdentityCallbackId,
};
pub use insert_caller_pk_connection_id_reducer::{
    insert_caller_pk_connection_id, set_flags_for_insert_caller_pk_connection_id, InsertCallerPkConnectionIdCallbackId,
};
pub use insert_caller_pk_identity_reducer::{
    insert_caller_pk_identity, set_flags_for_insert_caller_pk_identity, InsertCallerPkIdentityCallbackId,
};
pub use insert_caller_unique_connection_id_reducer::{
    insert_caller_unique_connection_id, set_flags_for_insert_caller_unique_connection_id,
    InsertCallerUniqueConnectionIdCallbackId,
};
pub use insert_caller_unique_identity_reducer::{
    insert_caller_unique_identity, set_flags_for_insert_caller_unique_identity, InsertCallerUniqueIdentityCallbackId,
};
pub use insert_caller_vec_connection_id_reducer::{
    insert_caller_vec_connection_id, set_flags_for_insert_caller_vec_connection_id,
    InsertCallerVecConnectionIdCallbackId,
};
pub use insert_caller_vec_identity_reducer::{
    insert_caller_vec_identity, set_flags_for_insert_caller_vec_identity, InsertCallerVecIdentityCallbackId,
};
pub use insert_into_btree_u_32_reducer::{
    insert_into_btree_u_32, set_flags_for_insert_into_btree_u_32, InsertIntoBtreeU32CallbackId,
};
pub use insert_into_pk_btree_u_32_reducer::{
    insert_into_pk_btree_u_32, set_flags_for_insert_into_pk_btree_u_32, InsertIntoPkBtreeU32CallbackId,
};
pub use insert_large_table_reducer::{
    insert_large_table, set_flags_for_insert_large_table, InsertLargeTableCallbackId,
};
pub use insert_one_bool_reducer::{insert_one_bool, set_flags_for_insert_one_bool, InsertOneBoolCallbackId};
pub use insert_one_byte_struct_reducer::{
    insert_one_byte_struct, set_flags_for_insert_one_byte_struct, InsertOneByteStructCallbackId,
};
pub use insert_one_connection_id_reducer::{
    insert_one_connection_id, set_flags_for_insert_one_connection_id, InsertOneConnectionIdCallbackId,
};
pub use insert_one_enum_with_payload_reducer::{
    insert_one_enum_with_payload, set_flags_for_insert_one_enum_with_payload, InsertOneEnumWithPayloadCallbackId,
};
pub use insert_one_every_primitive_struct_reducer::{
    insert_one_every_primitive_struct, set_flags_for_insert_one_every_primitive_struct,
    InsertOneEveryPrimitiveStructCallbackId,
};
pub use insert_one_every_vec_struct_reducer::{
    insert_one_every_vec_struct, set_flags_for_insert_one_every_vec_struct, InsertOneEveryVecStructCallbackId,
};
pub use insert_one_f_32_reducer::{insert_one_f_32, set_flags_for_insert_one_f_32, InsertOneF32CallbackId};
pub use insert_one_f_64_reducer::{insert_one_f_64, set_flags_for_insert_one_f_64, InsertOneF64CallbackId};
pub use insert_one_i_128_reducer::{insert_one_i_128, set_flags_for_insert_one_i_128, InsertOneI128CallbackId};
pub use insert_one_i_16_reducer::{insert_one_i_16, set_flags_for_insert_one_i_16, InsertOneI16CallbackId};
pub use insert_one_i_256_reducer::{insert_one_i_256, set_flags_for_insert_one_i_256, InsertOneI256CallbackId};
pub use insert_one_i_32_reducer::{insert_one_i_32, set_flags_for_insert_one_i_32, InsertOneI32CallbackId};
pub use insert_one_i_64_reducer::{insert_one_i_64, set_flags_for_insert_one_i_64, InsertOneI64CallbackId};
pub use insert_one_i_8_reducer::{insert_one_i_8, set_flags_for_insert_one_i_8, InsertOneI8CallbackId};
pub use insert_one_identity_reducer::{
    insert_one_identity, set_flags_for_insert_one_identity, InsertOneIdentityCallbackId,
};
pub use insert_one_simple_enum_reducer::{
    insert_one_simple_enum, set_flags_for_insert_one_simple_enum, InsertOneSimpleEnumCallbackId,
};
pub use insert_one_string_reducer::{insert_one_string, set_flags_for_insert_one_string, InsertOneStringCallbackId};
pub use insert_one_timestamp_reducer::{
    insert_one_timestamp, set_flags_for_insert_one_timestamp, InsertOneTimestampCallbackId,
};
pub use insert_one_u_128_reducer::{insert_one_u_128, set_flags_for_insert_one_u_128, InsertOneU128CallbackId};
pub use insert_one_u_16_reducer::{insert_one_u_16, set_flags_for_insert_one_u_16, InsertOneU16CallbackId};
pub use insert_one_u_256_reducer::{insert_one_u_256, set_flags_for_insert_one_u_256, InsertOneU256CallbackId};
pub use insert_one_u_32_reducer::{insert_one_u_32, set_flags_for_insert_one_u_32, InsertOneU32CallbackId};
pub use insert_one_u_64_reducer::{insert_one_u_64, set_flags_for_insert_one_u_64, InsertOneU64CallbackId};
pub use insert_one_u_8_reducer::{insert_one_u_8, set_flags_for_insert_one_u_8, InsertOneU8CallbackId};
pub use insert_one_unit_struct_reducer::{
    insert_one_unit_struct, set_flags_for_insert_one_unit_struct, InsertOneUnitStructCallbackId,
};
pub use insert_option_every_primitive_struct_reducer::{
    insert_option_every_primitive_struct, set_flags_for_insert_option_every_primitive_struct,
    InsertOptionEveryPrimitiveStructCallbackId,
};
pub use insert_option_i_32_reducer::{insert_option_i_32, set_flags_for_insert_option_i_32, InsertOptionI32CallbackId};
pub use insert_option_identity_reducer::{
    insert_option_identity, set_flags_for_insert_option_identity, InsertOptionIdentityCallbackId,
};
pub use insert_option_simple_enum_reducer::{
    insert_option_simple_enum, set_flags_for_insert_option_simple_enum, InsertOptionSimpleEnumCallbackId,
};
pub use insert_option_string_reducer::{
    insert_option_string, set_flags_for_insert_option_string, InsertOptionStringCallbackId,
};
pub use insert_option_vec_option_i_32_reducer::{
    insert_option_vec_option_i_32, set_flags_for_insert_option_vec_option_i_32, InsertOptionVecOptionI32CallbackId,
};
pub use insert_pk_bool_reducer::{insert_pk_bool, set_flags_for_insert_pk_bool, InsertPkBoolCallbackId};
pub use insert_pk_connection_id_reducer::{
    insert_pk_connection_id, set_flags_for_insert_pk_connection_id, InsertPkConnectionIdCallbackId,
};
pub use insert_pk_i_128_reducer::{insert_pk_i_128, set_flags_for_insert_pk_i_128, InsertPkI128CallbackId};
pub use insert_pk_i_16_reducer::{insert_pk_i_16, set_flags_for_insert_pk_i_16, InsertPkI16CallbackId};
pub use insert_pk_i_256_reducer::{insert_pk_i_256, set_flags_for_insert_pk_i_256, InsertPkI256CallbackId};
pub use insert_pk_i_32_reducer::{insert_pk_i_32, set_flags_for_insert_pk_i_32, InsertPkI32CallbackId};
pub use insert_pk_i_64_reducer::{insert_pk_i_64, set_flags_for_insert_pk_i_64, InsertPkI64CallbackId};
pub use insert_pk_i_8_reducer::{insert_pk_i_8, set_flags_for_insert_pk_i_8, InsertPkI8CallbackId};
pub use insert_pk_identity_reducer::{
    insert_pk_identity, set_flags_for_insert_pk_identity, InsertPkIdentityCallbackId,
};
pub use insert_pk_string_reducer::{insert_pk_string, set_flags_for_insert_pk_string, InsertPkStringCallbackId};
pub use insert_pk_u_128_reducer::{insert_pk_u_128, set_flags_for_insert_pk_u_128, InsertPkU128CallbackId};
pub use insert_pk_u_16_reducer::{insert_pk_u_16, set_flags_for_insert_pk_u_16, InsertPkU16CallbackId};
pub use insert_pk_u_256_reducer::{insert_pk_u_256, set_flags_for_insert_pk_u_256, InsertPkU256CallbackId};
pub use insert_pk_u_32_reducer::{insert_pk_u_32, set_flags_for_insert_pk_u_32, InsertPkU32CallbackId};
pub use insert_pk_u_32_two_reducer::{insert_pk_u_32_two, set_flags_for_insert_pk_u_32_two, InsertPkU32TwoCallbackId};
pub use insert_pk_u_64_reducer::{insert_pk_u_64, set_flags_for_insert_pk_u_64, InsertPkU64CallbackId};
pub use insert_pk_u_8_reducer::{insert_pk_u_8, set_flags_for_insert_pk_u_8, InsertPkU8CallbackId};
pub use insert_primitives_as_strings_reducer::{
    insert_primitives_as_strings, set_flags_for_insert_primitives_as_strings, InsertPrimitivesAsStringsCallbackId,
};
pub use insert_table_holds_table_reducer::{
    insert_table_holds_table, set_flags_for_insert_table_holds_table, InsertTableHoldsTableCallbackId,
};
pub use insert_unique_bool_reducer::{
    insert_unique_bool, set_flags_for_insert_unique_bool, InsertUniqueBoolCallbackId,
};
pub use insert_unique_connection_id_reducer::{
    insert_unique_connection_id, set_flags_for_insert_unique_connection_id, InsertUniqueConnectionIdCallbackId,
};
pub use insert_unique_i_128_reducer::{
    insert_unique_i_128, set_flags_for_insert_unique_i_128, InsertUniqueI128CallbackId,
};
pub use insert_unique_i_16_reducer::{insert_unique_i_16, set_flags_for_insert_unique_i_16, InsertUniqueI16CallbackId};
pub use insert_unique_i_256_reducer::{
    insert_unique_i_256, set_flags_for_insert_unique_i_256, InsertUniqueI256CallbackId,
};
pub use insert_unique_i_32_reducer::{insert_unique_i_32, set_flags_for_insert_unique_i_32, InsertUniqueI32CallbackId};
pub use insert_unique_i_64_reducer::{insert_unique_i_64, set_flags_for_insert_unique_i_64, InsertUniqueI64CallbackId};
pub use insert_unique_i_8_reducer::{insert_unique_i_8, set_flags_for_insert_unique_i_8, InsertUniqueI8CallbackId};
pub use insert_unique_identity_reducer::{
    insert_unique_identity, set_flags_for_insert_unique_identity, InsertUniqueIdentityCallbackId,
};
pub use insert_unique_string_reducer::{
    insert_unique_string, set_flags_for_insert_unique_string, InsertUniqueStringCallbackId,
};
pub use insert_unique_u_128_reducer::{
    insert_unique_u_128, set_flags_for_insert_unique_u_128, InsertUniqueU128CallbackId,
};
pub use insert_unique_u_16_reducer::{insert_unique_u_16, set_flags_for_insert_unique_u_16, InsertUniqueU16CallbackId};
pub use insert_unique_u_256_reducer::{
    insert_unique_u_256, set_flags_for_insert_unique_u_256, InsertUniqueU256CallbackId,
};
pub use insert_unique_u_32_reducer::{insert_unique_u_32, set_flags_for_insert_unique_u_32, InsertUniqueU32CallbackId};
pub use insert_unique_u_32_update_pk_u_32_reducer::{
    insert_unique_u_32_update_pk_u_32, set_flags_for_insert_unique_u_32_update_pk_u_32,
    InsertUniqueU32UpdatePkU32CallbackId,
};
pub use insert_unique_u_64_reducer::{insert_unique_u_64, set_flags_for_insert_unique_u_64, InsertUniqueU64CallbackId};
pub use insert_unique_u_8_reducer::{insert_unique_u_8, set_flags_for_insert_unique_u_8, InsertUniqueU8CallbackId};
pub use insert_user_reducer::{insert_user, set_flags_for_insert_user, InsertUserCallbackId};
pub use insert_vec_bool_reducer::{insert_vec_bool, set_flags_for_insert_vec_bool, InsertVecBoolCallbackId};
pub use insert_vec_byte_struct_reducer::{
    insert_vec_byte_struct, set_flags_for_insert_vec_byte_struct, InsertVecByteStructCallbackId,
};
pub use insert_vec_connection_id_reducer::{
    insert_vec_connection_id, set_flags_for_insert_vec_connection_id, InsertVecConnectionIdCallbackId,
};
pub use insert_vec_enum_with_payload_reducer::{
    insert_vec_enum_with_payload, set_flags_for_insert_vec_enum_with_payload, InsertVecEnumWithPayloadCallbackId,
};
pub use insert_vec_every_primitive_struct_reducer::{
    insert_vec_every_primitive_struct, set_flags_for_insert_vec_every_primitive_struct,
    InsertVecEveryPrimitiveStructCallbackId,
};
pub use insert_vec_every_vec_struct_reducer::{
    insert_vec_every_vec_struct, set_flags_for_insert_vec_every_vec_struct, InsertVecEveryVecStructCallbackId,
};
pub use insert_vec_f_32_reducer::{insert_vec_f_32, set_flags_for_insert_vec_f_32, InsertVecF32CallbackId};
pub use insert_vec_f_64_reducer::{insert_vec_f_64, set_flags_for_insert_vec_f_64, InsertVecF64CallbackId};
pub use insert_vec_i_128_reducer::{insert_vec_i_128, set_flags_for_insert_vec_i_128, InsertVecI128CallbackId};
pub use insert_vec_i_16_reducer::{insert_vec_i_16, set_flags_for_insert_vec_i_16, InsertVecI16CallbackId};
pub use insert_vec_i_256_reducer::{insert_vec_i_256, set_flags_for_insert_vec_i_256, InsertVecI256CallbackId};
pub use insert_vec_i_32_reducer::{insert_vec_i_32, set_flags_for_insert_vec_i_32, InsertVecI32CallbackId};
pub use insert_vec_i_64_reducer::{insert_vec_i_64, set_flags_for_insert_vec_i_64, InsertVecI64CallbackId};
pub use insert_vec_i_8_reducer::{insert_vec_i_8, set_flags_for_insert_vec_i_8, InsertVecI8CallbackId};
pub use insert_vec_identity_reducer::{
    insert_vec_identity, set_flags_for_insert_vec_identity, InsertVecIdentityCallbackId,
};
pub use insert_vec_simple_enum_reducer::{
    insert_vec_simple_enum, set_flags_for_insert_vec_simple_enum, InsertVecSimpleEnumCallbackId,
};
pub use insert_vec_string_reducer::{insert_vec_string, set_flags_for_insert_vec_string, InsertVecStringCallbackId};
pub use insert_vec_timestamp_reducer::{
    insert_vec_timestamp, set_flags_for_insert_vec_timestamp, InsertVecTimestampCallbackId,
};
pub use insert_vec_u_128_reducer::{insert_vec_u_128, set_flags_for_insert_vec_u_128, InsertVecU128CallbackId};
pub use insert_vec_u_16_reducer::{insert_vec_u_16, set_flags_for_insert_vec_u_16, InsertVecU16CallbackId};
pub use insert_vec_u_256_reducer::{insert_vec_u_256, set_flags_for_insert_vec_u_256, InsertVecU256CallbackId};
pub use insert_vec_u_32_reducer::{insert_vec_u_32, set_flags_for_insert_vec_u_32, InsertVecU32CallbackId};
pub use insert_vec_u_64_reducer::{insert_vec_u_64, set_flags_for_insert_vec_u_64, InsertVecU64CallbackId};
pub use insert_vec_u_8_reducer::{insert_vec_u_8, set_flags_for_insert_vec_u_8, InsertVecU8CallbackId};
pub use insert_vec_unit_struct_reducer::{
    insert_vec_unit_struct, set_flags_for_insert_vec_unit_struct, InsertVecUnitStructCallbackId,
};
pub use large_table_table::*;
pub use large_table_type::LargeTable;
pub use no_op_succeeds_reducer::{no_op_succeeds, set_flags_for_no_op_succeeds, NoOpSucceedsCallbackId};
pub use one_bool_table::*;
pub use one_bool_type::OneBool;
pub use one_byte_struct_table::*;
pub use one_byte_struct_type::OneByteStruct;
pub use one_connection_id_table::*;
pub use one_connection_id_type::OneConnectionId;
pub use one_enum_with_payload_table::*;
pub use one_enum_with_payload_type::OneEnumWithPayload;
pub use one_every_primitive_struct_table::*;
pub use one_every_primitive_struct_type::OneEveryPrimitiveStruct;
pub use one_every_vec_struct_table::*;
pub use one_every_vec_struct_type::OneEveryVecStruct;
pub use one_f_32_table::*;
pub use one_f_32_type::OneF32;
pub use one_f_64_table::*;
pub use one_f_64_type::OneF64;
pub use one_i_128_table::*;
pub use one_i_128_type::OneI128;
pub use one_i_16_table::*;
pub use one_i_16_type::OneI16;
pub use one_i_256_table::*;
pub use one_i_256_type::OneI256;
pub use one_i_32_table::*;
pub use one_i_32_type::OneI32;
pub use one_i_64_table::*;
pub use one_i_64_type::OneI64;
pub use one_i_8_table::*;
pub use one_i_8_type::OneI8;
pub use one_identity_table::*;
pub use one_identity_type::OneIdentity;
pub use one_simple_enum_table::*;
pub use one_simple_enum_type::OneSimpleEnum;
pub use one_string_table::*;
pub use one_string_type::OneString;
pub use one_timestamp_table::*;
pub use one_timestamp_type::OneTimestamp;
pub use one_u_128_table::*;
pub use one_u_128_type::OneU128;
pub use one_u_16_table::*;
pub use one_u_16_type::OneU16;
pub use one_u_256_table::*;
pub use one_u_256_type::OneU256;
pub use one_u_32_table::*;
pub use one_u_32_type::OneU32;
pub use one_u_64_table::*;
pub use one_u_64_type::OneU64;
pub use one_u_8_table::*;
pub use one_u_8_type::OneU8;
pub use one_unit_struct_table::*;
pub use one_unit_struct_type::OneUnitStruct;
pub use option_every_primitive_struct_table::*;
pub use option_every_primitive_struct_type::OptionEveryPrimitiveStruct;
pub use option_i_32_table::*;
pub use option_i_32_type::OptionI32;
pub use option_identity_table::*;
pub use option_identity_type::OptionIdentity;
pub use option_simple_enum_table::*;
pub use option_simple_enum_type::OptionSimpleEnum;
pub use option_string_table::*;
pub use option_string_type::OptionString;
pub use option_vec_option_i_32_table::*;
pub use option_vec_option_i_32_type::OptionVecOptionI32;
pub use pk_bool_table::*;
pub use pk_bool_type::PkBool;
pub use pk_connection_id_table::*;
pub use pk_connection_id_type::PkConnectionId;
pub use pk_i_128_table::*;
pub use pk_i_128_type::PkI128;
pub use pk_i_16_table::*;
pub use pk_i_16_type::PkI16;
pub use pk_i_256_table::*;
pub use pk_i_256_type::PkI256;
pub use pk_i_32_table::*;
pub use pk_i_32_type::PkI32;
pub use pk_i_64_table::*;
pub use pk_i_64_type::PkI64;
pub use pk_i_8_table::*;
pub use pk_i_8_type::PkI8;
pub use pk_identity_table::*;
pub use pk_identity_type::PkIdentity;
pub use pk_string_table::*;
pub use pk_string_type::PkString;
pub use pk_u_128_table::*;
pub use pk_u_128_type::PkU128;
pub use pk_u_16_table::*;
pub use pk_u_16_type::PkU16;
pub use pk_u_256_table::*;
pub use pk_u_256_type::PkU256;
pub use pk_u_32_table::*;
pub use pk_u_32_two_table::*;
pub use pk_u_32_two_type::PkU32Two;
pub use pk_u_32_type::PkU32;
pub use pk_u_64_table::*;
pub use pk_u_64_type::PkU64;
pub use pk_u_8_table::*;
pub use pk_u_8_type::PkU8;
pub use scheduled_table_table::*;
pub use scheduled_table_type::ScheduledTable;
pub use send_scheduled_message_reducer::{
    send_scheduled_message, set_flags_for_send_scheduled_message, SendScheduledMessageCallbackId,
};
pub use simple_enum_type::SimpleEnum;
pub use table_holds_table_table::*;
pub use table_holds_table_type::TableHoldsTable;
pub use unique_bool_table::*;
pub use unique_bool_type::UniqueBool;
pub use unique_connection_id_table::*;
pub use unique_connection_id_type::UniqueConnectionId;
pub use unique_i_128_table::*;
pub use unique_i_128_type::UniqueI128;
pub use unique_i_16_table::*;
pub use unique_i_16_type::UniqueI16;
pub use unique_i_256_table::*;
pub use unique_i_256_type::UniqueI256;
pub use unique_i_32_table::*;
pub use unique_i_32_type::UniqueI32;
pub use unique_i_64_table::*;
pub use unique_i_64_type::UniqueI64;
pub use unique_i_8_table::*;
pub use unique_i_8_type::UniqueI8;
pub use unique_identity_table::*;
pub use unique_identity_type::UniqueIdentity;
pub use unique_string_table::*;
pub use unique_string_type::UniqueString;
pub use unique_u_128_table::*;
pub use unique_u_128_type::UniqueU128;
pub use unique_u_16_table::*;
pub use unique_u_16_type::UniqueU16;
pub use unique_u_256_table::*;
pub use unique_u_256_type::UniqueU256;
pub use unique_u_32_table::*;
pub use unique_u_32_type::UniqueU32;
pub use unique_u_64_table::*;
pub use unique_u_64_type::UniqueU64;
pub use unique_u_8_table::*;
pub use unique_u_8_type::UniqueU8;
pub use unit_struct_type::UnitStruct;
pub use update_pk_bool_reducer::{set_flags_for_update_pk_bool, update_pk_bool, UpdatePkBoolCallbackId};
pub use update_pk_connection_id_reducer::{
    set_flags_for_update_pk_connection_id, update_pk_connection_id, UpdatePkConnectionIdCallbackId,
};
pub use update_pk_i_128_reducer::{set_flags_for_update_pk_i_128, update_pk_i_128, UpdatePkI128CallbackId};
pub use update_pk_i_16_reducer::{set_flags_for_update_pk_i_16, update_pk_i_16, UpdatePkI16CallbackId};
pub use update_pk_i_256_reducer::{set_flags_for_update_pk_i_256, update_pk_i_256, UpdatePkI256CallbackId};
pub use update_pk_i_32_reducer::{set_flags_for_update_pk_i_32, update_pk_i_32, UpdatePkI32CallbackId};
pub use update_pk_i_64_reducer::{set_flags_for_update_pk_i_64, update_pk_i_64, UpdatePkI64CallbackId};
pub use update_pk_i_8_reducer::{set_flags_for_update_pk_i_8, update_pk_i_8, UpdatePkI8CallbackId};
pub use update_pk_identity_reducer::{
    set_flags_for_update_pk_identity, update_pk_identity, UpdatePkIdentityCallbackId,
};
pub use update_pk_string_reducer::{set_flags_for_update_pk_string, update_pk_string, UpdatePkStringCallbackId};
pub use update_pk_u_128_reducer::{set_flags_for_update_pk_u_128, update_pk_u_128, UpdatePkU128CallbackId};
pub use update_pk_u_16_reducer::{set_flags_for_update_pk_u_16, update_pk_u_16, UpdatePkU16CallbackId};
pub use update_pk_u_256_reducer::{set_flags_for_update_pk_u_256, update_pk_u_256, UpdatePkU256CallbackId};
pub use update_pk_u_32_reducer::{set_flags_for_update_pk_u_32, update_pk_u_32, UpdatePkU32CallbackId};
pub use update_pk_u_32_two_reducer::{set_flags_for_update_pk_u_32_two, update_pk_u_32_two, UpdatePkU32TwoCallbackId};
pub use update_pk_u_64_reducer::{set_flags_for_update_pk_u_64, update_pk_u_64, UpdatePkU64CallbackId};
pub use update_pk_u_8_reducer::{set_flags_for_update_pk_u_8, update_pk_u_8, UpdatePkU8CallbackId};
pub use update_unique_bool_reducer::{
    set_flags_for_update_unique_bool, update_unique_bool, UpdateUniqueBoolCallbackId,
};
pub use update_unique_connection_id_reducer::{
    set_flags_for_update_unique_connection_id, update_unique_connection_id, UpdateUniqueConnectionIdCallbackId,
};
pub use update_unique_i_128_reducer::{
    set_flags_for_update_unique_i_128, update_unique_i_128, UpdateUniqueI128CallbackId,
};
pub use update_unique_i_16_reducer::{set_flags_for_update_unique_i_16, update_unique_i_16, UpdateUniqueI16CallbackId};
pub use update_unique_i_256_reducer::{
    set_flags_for_update_unique_i_256, update_unique_i_256, UpdateUniqueI256CallbackId,
};
pub use update_unique_i_32_reducer::{set_flags_for_update_unique_i_32, update_unique_i_32, UpdateUniqueI32CallbackId};
pub use update_unique_i_64_reducer::{set_flags_for_update_unique_i_64, update_unique_i_64, UpdateUniqueI64CallbackId};
pub use update_unique_i_8_reducer::{set_flags_for_update_unique_i_8, update_unique_i_8, UpdateUniqueI8CallbackId};
pub use update_unique_identity_reducer::{
    set_flags_for_update_unique_identity, update_unique_identity, UpdateUniqueIdentityCallbackId,
};
pub use update_unique_string_reducer::{
    set_flags_for_update_unique_string, update_unique_string, UpdateUniqueStringCallbackId,
};
pub use update_unique_u_128_reducer::{
    set_flags_for_update_unique_u_128, update_unique_u_128, UpdateUniqueU128CallbackId,
};
pub use update_unique_u_16_reducer::{set_flags_for_update_unique_u_16, update_unique_u_16, UpdateUniqueU16CallbackId};
pub use update_unique_u_256_reducer::{
    set_flags_for_update_unique_u_256, update_unique_u_256, UpdateUniqueU256CallbackId,
};
pub use update_unique_u_32_reducer::{set_flags_for_update_unique_u_32, update_unique_u_32, UpdateUniqueU32CallbackId};
pub use update_unique_u_64_reducer::{set_flags_for_update_unique_u_64, update_unique_u_64, UpdateUniqueU64CallbackId};
pub use update_unique_u_8_reducer::{set_flags_for_update_unique_u_8, update_unique_u_8, UpdateUniqueU8CallbackId};
pub use users_table::*;
pub use users_type::Users;
pub use vec_bool_table::*;
pub use vec_bool_type::VecBool;
pub use vec_byte_struct_table::*;
pub use vec_byte_struct_type::VecByteStruct;
pub use vec_connection_id_table::*;
pub use vec_connection_id_type::VecConnectionId;
pub use vec_enum_with_payload_table::*;
pub use vec_enum_with_payload_type::VecEnumWithPayload;
pub use vec_every_primitive_struct_table::*;
pub use vec_every_primitive_struct_type::VecEveryPrimitiveStruct;
pub use vec_every_vec_struct_table::*;
pub use vec_every_vec_struct_type::VecEveryVecStruct;
pub use vec_f_32_table::*;
pub use vec_f_32_type::VecF32;
pub use vec_f_64_table::*;
pub use vec_f_64_type::VecF64;
pub use vec_i_128_table::*;
pub use vec_i_128_type::VecI128;
pub use vec_i_16_table::*;
pub use vec_i_16_type::VecI16;
pub use vec_i_256_table::*;
pub use vec_i_256_type::VecI256;
pub use vec_i_32_table::*;
pub use vec_i_32_type::VecI32;
pub use vec_i_64_table::*;
pub use vec_i_64_type::VecI64;
pub use vec_i_8_table::*;
pub use vec_i_8_type::VecI8;
pub use vec_identity_table::*;
pub use vec_identity_type::VecIdentity;
pub use vec_simple_enum_table::*;
pub use vec_simple_enum_type::VecSimpleEnum;
pub use vec_string_table::*;
pub use vec_string_type::VecString;
pub use vec_timestamp_table::*;
pub use vec_timestamp_type::VecTimestamp;
pub use vec_u_128_table::*;
pub use vec_u_128_type::VecU128;
pub use vec_u_16_table::*;
pub use vec_u_16_type::VecU16;
pub use vec_u_256_table::*;
pub use vec_u_256_type::VecU256;
pub use vec_u_32_table::*;
pub use vec_u_32_type::VecU32;
pub use vec_u_64_table::*;
pub use vec_u_64_type::VecU64;
pub use vec_u_8_table::*;
pub use vec_u_8_type::VecU8;
pub use vec_unit_struct_table::*;
pub use vec_unit_struct_type::VecUnitStruct;

#[derive(Clone, PartialEq, Debug)]

/// One of the reducers defined by this module.
///
/// Contained within a [`__sdk::ReducerEvent`] in [`EventContext`]s for reducer events
/// to indicate which reducer caused the event.

pub enum Reducer {
    DeleteFromBtreeU32 {
        rows: Vec<BTreeU32>,
    },
    DeleteLargeTable {
        a: u8,
        b: u16,
        c: u32,
        d: u64,
        e: u128,
        f: __sats::u256,
        g: i8,
        h: i16,
        i: i32,
        j: i64,
        k: i128,
        l: __sats::i256,
        m: bool,
        n: f32,
        o: f64,
        p: String,
        q: SimpleEnum,
        r: EnumWithPayload,
        s: UnitStruct,
        t: ByteStruct,
        u: EveryPrimitiveStruct,
        v: EveryVecStruct,
    },
    DeletePkBool {
        b: bool,
    },
    DeletePkConnectionId {
        a: __sdk::ConnectionId,
    },
    DeletePkI128 {
        n: i128,
    },
    DeletePkI16 {
        n: i16,
    },
    DeletePkI256 {
        n: __sats::i256,
    },
    DeletePkI32 {
        n: i32,
    },
    DeletePkI64 {
        n: i64,
    },
    DeletePkI8 {
        n: i8,
    },
    DeletePkIdentity {
        i: __sdk::Identity,
    },
    DeletePkString {
        s: String,
    },
    DeletePkU128 {
        n: u128,
    },
    DeletePkU16 {
        n: u16,
    },
    DeletePkU256 {
        n: __sats::u256,
    },
    DeletePkU32 {
        n: u32,
    },
    DeletePkU32InsertPkU32Two {
        n: u32,
        data: i32,
    },
    DeletePkU32Two {
        n: u32,
    },
    DeletePkU64 {
        n: u64,
    },
    DeletePkU8 {
        n: u8,
    },
    DeleteUniqueBool {
        b: bool,
    },
    DeleteUniqueConnectionId {
        a: __sdk::ConnectionId,
    },
    DeleteUniqueI128 {
        n: i128,
    },
    DeleteUniqueI16 {
        n: i16,
    },
    DeleteUniqueI256 {
        n: __sats::i256,
    },
    DeleteUniqueI32 {
        n: i32,
    },
    DeleteUniqueI64 {
        n: i64,
    },
    DeleteUniqueI8 {
        n: i8,
    },
    DeleteUniqueIdentity {
        i: __sdk::Identity,
    },
    DeleteUniqueString {
        s: String,
    },
    DeleteUniqueU128 {
        n: u128,
    },
    DeleteUniqueU16 {
        n: u16,
    },
    DeleteUniqueU256 {
        n: __sats::u256,
    },
    DeleteUniqueU32 {
        n: u32,
    },
    DeleteUniqueU64 {
        n: u64,
    },
    DeleteUniqueU8 {
        n: u8,
    },
    InsertCallTimestamp,
    InsertCallerOneConnectionId,
    InsertCallerOneIdentity,
    InsertCallerPkConnectionId {
        data: i32,
    },
    InsertCallerPkIdentity {
        data: i32,
    },
    InsertCallerUniqueConnectionId {
        data: i32,
    },
    InsertCallerUniqueIdentity {
        data: i32,
    },
    InsertCallerVecConnectionId,
    InsertCallerVecIdentity,
    InsertIntoBtreeU32 {
        rows: Vec<BTreeU32>,
    },
    InsertIntoPkBtreeU32 {
        pk_u_32: Vec<PkU32>,
        bt_u_32: Vec<BTreeU32>,
    },
    InsertLargeTable {
        a: u8,
        b: u16,
        c: u32,
        d: u64,
        e: u128,
        f: __sats::u256,
        g: i8,
        h: i16,
        i: i32,
        j: i64,
        k: i128,
        l: __sats::i256,
        m: bool,
        n: f32,
        o: f64,
        p: String,
        q: SimpleEnum,
        r: EnumWithPayload,
        s: UnitStruct,
        t: ByteStruct,
        u: EveryPrimitiveStruct,
        v: EveryVecStruct,
    },
    InsertOneBool {
        b: bool,
    },
    InsertOneByteStruct {
        s: ByteStruct,
    },
    InsertOneConnectionId {
        a: __sdk::ConnectionId,
    },
    InsertOneEnumWithPayload {
        e: EnumWithPayload,
    },
    InsertOneEveryPrimitiveStruct {
        s: EveryPrimitiveStruct,
    },
    InsertOneEveryVecStruct {
        s: EveryVecStruct,
    },
    InsertOneF32 {
        f: f32,
    },
    InsertOneF64 {
        f: f64,
    },
    InsertOneI128 {
        n: i128,
    },
    InsertOneI16 {
        n: i16,
    },
    InsertOneI256 {
        n: __sats::i256,
    },
    InsertOneI32 {
        n: i32,
    },
    InsertOneI64 {
        n: i64,
    },
    InsertOneI8 {
        n: i8,
    },
    InsertOneIdentity {
        i: __sdk::Identity,
    },
    InsertOneSimpleEnum {
        e: SimpleEnum,
    },
    InsertOneString {
        s: String,
    },
    InsertOneTimestamp {
        t: __sdk::Timestamp,
    },
    InsertOneU128 {
        n: u128,
    },
    InsertOneU16 {
        n: u16,
    },
    InsertOneU256 {
        n: __sats::u256,
    },
    InsertOneU32 {
        n: u32,
    },
    InsertOneU64 {
        n: u64,
    },
    InsertOneU8 {
        n: u8,
    },
    InsertOneUnitStruct {
        s: UnitStruct,
    },
    InsertOptionEveryPrimitiveStruct {
        s: Option<EveryPrimitiveStruct>,
    },
    InsertOptionI32 {
        n: Option<i32>,
    },
    InsertOptionIdentity {
        i: Option<__sdk::Identity>,
    },
    InsertOptionSimpleEnum {
        e: Option<SimpleEnum>,
    },
    InsertOptionString {
        s: Option<String>,
    },
    InsertOptionVecOptionI32 {
        v: Option<Vec<Option<i32>>>,
    },
    InsertPkBool {
        b: bool,
        data: i32,
    },
    InsertPkConnectionId {
        a: __sdk::ConnectionId,
        data: i32,
    },
    InsertPkI128 {
        n: i128,
        data: i32,
    },
    InsertPkI16 {
        n: i16,
        data: i32,
    },
    InsertPkI256 {
        n: __sats::i256,
        data: i32,
    },
    InsertPkI32 {
        n: i32,
        data: i32,
    },
    InsertPkI64 {
        n: i64,
        data: i32,
    },
    InsertPkI8 {
        n: i8,
        data: i32,
    },
    InsertPkIdentity {
        i: __sdk::Identity,
        data: i32,
    },
    InsertPkString {
        s: String,
        data: i32,
    },
    InsertPkU128 {
        n: u128,
        data: i32,
    },
    InsertPkU16 {
        n: u16,
        data: i32,
    },
    InsertPkU256 {
        n: __sats::u256,
        data: i32,
    },
    InsertPkU32 {
        n: u32,
        data: i32,
    },
    InsertPkU32Two {
        n: u32,
        data: i32,
    },
    InsertPkU64 {
        n: u64,
        data: i32,
    },
    InsertPkU8 {
        n: u8,
        data: i32,
    },
    InsertPrimitivesAsStrings {
        s: EveryPrimitiveStruct,
    },
    InsertTableHoldsTable {
        a: OneU8,
        b: VecU8,
    },
    InsertUniqueBool {
        b: bool,
        data: i32,
    },
    InsertUniqueConnectionId {
        a: __sdk::ConnectionId,
        data: i32,
    },
    InsertUniqueI128 {
        n: i128,
        data: i32,
    },
    InsertUniqueI16 {
        n: i16,
        data: i32,
    },
    InsertUniqueI256 {
        n: __sats::i256,
        data: i32,
    },
    InsertUniqueI32 {
        n: i32,
        data: i32,
    },
    InsertUniqueI64 {
        n: i64,
        data: i32,
    },
    InsertUniqueI8 {
        n: i8,
        data: i32,
    },
    InsertUniqueIdentity {
        i: __sdk::Identity,
        data: i32,
    },
    InsertUniqueString {
        s: String,
        data: i32,
    },
    InsertUniqueU128 {
        n: u128,
        data: i32,
    },
    InsertUniqueU16 {
        n: u16,
        data: i32,
    },
    InsertUniqueU256 {
        n: __sats::u256,
        data: i32,
    },
    InsertUniqueU32 {
        n: u32,
        data: i32,
    },
    InsertUniqueU32UpdatePkU32 {
        n: u32,
        d_unique: i32,
        d_pk: i32,
    },
    InsertUniqueU64 {
        n: u64,
        data: i32,
    },
    InsertUniqueU8 {
        n: u8,
        data: i32,
    },
    InsertUser {
        name: String,
        identity: __sdk::Identity,
    },
    InsertVecBool {
        b: Vec<bool>,
    },
    InsertVecByteStruct {
        s: Vec<ByteStruct>,
    },
    InsertVecConnectionId {
        a: Vec<__sdk::ConnectionId>,
    },
    InsertVecEnumWithPayload {
        e: Vec<EnumWithPayload>,
    },
    InsertVecEveryPrimitiveStruct {
        s: Vec<EveryPrimitiveStruct>,
    },
    InsertVecEveryVecStruct {
        s: Vec<EveryVecStruct>,
    },
    InsertVecF32 {
        f: Vec<f32>,
    },
    InsertVecF64 {
        f: Vec<f64>,
    },
    InsertVecI128 {
        n: Vec<i128>,
    },
    InsertVecI16 {
        n: Vec<i16>,
    },
    InsertVecI256 {
        n: Vec<__sats::i256>,
    },
    InsertVecI32 {
        n: Vec<i32>,
    },
    InsertVecI64 {
        n: Vec<i64>,
    },
    InsertVecI8 {
        n: Vec<i8>,
    },
    InsertVecIdentity {
        i: Vec<__sdk::Identity>,
    },
    InsertVecSimpleEnum {
        e: Vec<SimpleEnum>,
    },
    InsertVecString {
        s: Vec<String>,
    },
    InsertVecTimestamp {
        t: Vec<__sdk::Timestamp>,
    },
    InsertVecU128 {
        n: Vec<u128>,
    },
    InsertVecU16 {
        n: Vec<u16>,
    },
    InsertVecU256 {
        n: Vec<__sats::u256>,
    },
    InsertVecU32 {
        n: Vec<u32>,
    },
    InsertVecU64 {
        n: Vec<u64>,
    },
    InsertVecU8 {
        n: Vec<u8>,
    },
    InsertVecUnitStruct {
        s: Vec<UnitStruct>,
    },
    NoOpSucceeds,
    SendScheduledMessage {
        arg: ScheduledTable,
    },
    UpdatePkBool {
        b: bool,
        data: i32,
    },
    UpdatePkConnectionId {
        a: __sdk::ConnectionId,
        data: i32,
    },
    UpdatePkI128 {
        n: i128,
        data: i32,
    },
    UpdatePkI16 {
        n: i16,
        data: i32,
    },
    UpdatePkI256 {
        n: __sats::i256,
        data: i32,
    },
    UpdatePkI32 {
        n: i32,
        data: i32,
    },
    UpdatePkI64 {
        n: i64,
        data: i32,
    },
    UpdatePkI8 {
        n: i8,
        data: i32,
    },
    UpdatePkIdentity {
        i: __sdk::Identity,
        data: i32,
    },
    UpdatePkString {
        s: String,
        data: i32,
    },
    UpdatePkU128 {
        n: u128,
        data: i32,
    },
    UpdatePkU16 {
        n: u16,
        data: i32,
    },
    UpdatePkU256 {
        n: __sats::u256,
        data: i32,
    },
    UpdatePkU32 {
        n: u32,
        data: i32,
    },
    UpdatePkU32Two {
        n: u32,
        data: i32,
    },
    UpdatePkU64 {
        n: u64,
        data: i32,
    },
    UpdatePkU8 {
        n: u8,
        data: i32,
    },
    UpdateUniqueBool {
        b: bool,
        data: i32,
    },
    UpdateUniqueConnectionId {
        a: __sdk::ConnectionId,
        data: i32,
    },
    UpdateUniqueI128 {
        n: i128,
        data: i32,
    },
    UpdateUniqueI16 {
        n: i16,
        data: i32,
    },
    UpdateUniqueI256 {
        n: __sats::i256,
        data: i32,
    },
    UpdateUniqueI32 {
        n: i32,
        data: i32,
    },
    UpdateUniqueI64 {
        n: i64,
        data: i32,
    },
    UpdateUniqueI8 {
        n: i8,
        data: i32,
    },
    UpdateUniqueIdentity {
        i: __sdk::Identity,
        data: i32,
    },
    UpdateUniqueString {
        s: String,
        data: i32,
    },
    UpdateUniqueU128 {
        n: u128,
        data: i32,
    },
    UpdateUniqueU16 {
        n: u16,
        data: i32,
    },
    UpdateUniqueU256 {
        n: __sats::u256,
        data: i32,
    },
    UpdateUniqueU32 {
        n: u32,
        data: i32,
    },
    UpdateUniqueU64 {
        n: u64,
        data: i32,
    },
    UpdateUniqueU8 {
        n: u8,
        data: i32,
    },
}

impl __sdk::InModule for Reducer {
    type Module = RemoteModule;
}

impl __sdk::Reducer for Reducer {
    fn reducer_name(&self) -> &'static str {
        match self {
            Reducer::DeleteFromBtreeU32 { .. } => "delete_from_btree_u32",
            Reducer::DeleteLargeTable { .. } => "delete_large_table",
            Reducer::DeletePkBool { .. } => "delete_pk_bool",
            Reducer::DeletePkConnectionId { .. } => "delete_pk_connection_id",
            Reducer::DeletePkI128 { .. } => "delete_pk_i128",
            Reducer::DeletePkI16 { .. } => "delete_pk_i16",
            Reducer::DeletePkI256 { .. } => "delete_pk_i256",
            Reducer::DeletePkI32 { .. } => "delete_pk_i32",
            Reducer::DeletePkI64 { .. } => "delete_pk_i64",
            Reducer::DeletePkI8 { .. } => "delete_pk_i8",
            Reducer::DeletePkIdentity { .. } => "delete_pk_identity",
            Reducer::DeletePkString { .. } => "delete_pk_string",
            Reducer::DeletePkU128 { .. } => "delete_pk_u128",
            Reducer::DeletePkU16 { .. } => "delete_pk_u16",
            Reducer::DeletePkU256 { .. } => "delete_pk_u256",
            Reducer::DeletePkU32 { .. } => "delete_pk_u32",
            Reducer::DeletePkU32InsertPkU32Two { .. } => "delete_pk_u32_insert_pk_u32_two",
            Reducer::DeletePkU32Two { .. } => "delete_pk_u32_two",
            Reducer::DeletePkU64 { .. } => "delete_pk_u64",
            Reducer::DeletePkU8 { .. } => "delete_pk_u8",
            Reducer::DeleteUniqueBool { .. } => "delete_unique_bool",
            Reducer::DeleteUniqueConnectionId { .. } => "delete_unique_connection_id",
            Reducer::DeleteUniqueI128 { .. } => "delete_unique_i128",
            Reducer::DeleteUniqueI16 { .. } => "delete_unique_i16",
            Reducer::DeleteUniqueI256 { .. } => "delete_unique_i256",
            Reducer::DeleteUniqueI32 { .. } => "delete_unique_i32",
            Reducer::DeleteUniqueI64 { .. } => "delete_unique_i64",
            Reducer::DeleteUniqueI8 { .. } => "delete_unique_i8",
            Reducer::DeleteUniqueIdentity { .. } => "delete_unique_identity",
            Reducer::DeleteUniqueString { .. } => "delete_unique_string",
            Reducer::DeleteUniqueU128 { .. } => "delete_unique_u128",
            Reducer::DeleteUniqueU16 { .. } => "delete_unique_u16",
            Reducer::DeleteUniqueU256 { .. } => "delete_unique_u256",
            Reducer::DeleteUniqueU32 { .. } => "delete_unique_u32",
            Reducer::DeleteUniqueU64 { .. } => "delete_unique_u64",
            Reducer::DeleteUniqueU8 { .. } => "delete_unique_u8",
            Reducer::InsertCallTimestamp => "insert_call_timestamp",
            Reducer::InsertCallerOneConnectionId => "insert_caller_one_connection_id",
            Reducer::InsertCallerOneIdentity => "insert_caller_one_identity",
            Reducer::InsertCallerPkConnectionId { .. } => "insert_caller_pk_connection_id",
            Reducer::InsertCallerPkIdentity { .. } => "insert_caller_pk_identity",
            Reducer::InsertCallerUniqueConnectionId { .. } => "insert_caller_unique_connection_id",
            Reducer::InsertCallerUniqueIdentity { .. } => "insert_caller_unique_identity",
            Reducer::InsertCallerVecConnectionId => "insert_caller_vec_connection_id",
            Reducer::InsertCallerVecIdentity => "insert_caller_vec_identity",
            Reducer::InsertIntoBtreeU32 { .. } => "insert_into_btree_u32",
            Reducer::InsertIntoPkBtreeU32 { .. } => "insert_into_pk_btree_u32",
            Reducer::InsertLargeTable { .. } => "insert_large_table",
            Reducer::InsertOneBool { .. } => "insert_one_bool",
            Reducer::InsertOneByteStruct { .. } => "insert_one_byte_struct",
            Reducer::InsertOneConnectionId { .. } => "insert_one_connection_id",
            Reducer::InsertOneEnumWithPayload { .. } => "insert_one_enum_with_payload",
            Reducer::InsertOneEveryPrimitiveStruct { .. } => "insert_one_every_primitive_struct",
            Reducer::InsertOneEveryVecStruct { .. } => "insert_one_every_vec_struct",
            Reducer::InsertOneF32 { .. } => "insert_one_f32",
            Reducer::InsertOneF64 { .. } => "insert_one_f64",
            Reducer::InsertOneI128 { .. } => "insert_one_i128",
            Reducer::InsertOneI16 { .. } => "insert_one_i16",
            Reducer::InsertOneI256 { .. } => "insert_one_i256",
            Reducer::InsertOneI32 { .. } => "insert_one_i32",
            Reducer::InsertOneI64 { .. } => "insert_one_i64",
            Reducer::InsertOneI8 { .. } => "insert_one_i8",
            Reducer::InsertOneIdentity { .. } => "insert_one_identity",
            Reducer::InsertOneSimpleEnum { .. } => "insert_one_simple_enum",
            Reducer::InsertOneString { .. } => "insert_one_string",
            Reducer::InsertOneTimestamp { .. } => "insert_one_timestamp",
            Reducer::InsertOneU128 { .. } => "insert_one_u128",
            Reducer::InsertOneU16 { .. } => "insert_one_u16",
            Reducer::InsertOneU256 { .. } => "insert_one_u256",
            Reducer::InsertOneU32 { .. } => "insert_one_u32",
            Reducer::InsertOneU64 { .. } => "insert_one_u64",
            Reducer::InsertOneU8 { .. } => "insert_one_u8",
            Reducer::InsertOneUnitStruct { .. } => "insert_one_unit_struct",
            Reducer::InsertOptionEveryPrimitiveStruct { .. } => "insert_option_every_primitive_struct",
            Reducer::InsertOptionI32 { .. } => "insert_option_i32",
            Reducer::InsertOptionIdentity { .. } => "insert_option_identity",
            Reducer::InsertOptionSimpleEnum { .. } => "insert_option_simple_enum",
            Reducer::InsertOptionString { .. } => "insert_option_string",
            Reducer::InsertOptionVecOptionI32 { .. } => "insert_option_vec_option_i32",
            Reducer::InsertPkBool { .. } => "insert_pk_bool",
            Reducer::InsertPkConnectionId { .. } => "insert_pk_connection_id",
            Reducer::InsertPkI128 { .. } => "insert_pk_i128",
            Reducer::InsertPkI16 { .. } => "insert_pk_i16",
            Reducer::InsertPkI256 { .. } => "insert_pk_i256",
            Reducer::InsertPkI32 { .. } => "insert_pk_i32",
            Reducer::InsertPkI64 { .. } => "insert_pk_i64",
            Reducer::InsertPkI8 { .. } => "insert_pk_i8",
            Reducer::InsertPkIdentity { .. } => "insert_pk_identity",
            Reducer::InsertPkString { .. } => "insert_pk_string",
            Reducer::InsertPkU128 { .. } => "insert_pk_u128",
            Reducer::InsertPkU16 { .. } => "insert_pk_u16",
            Reducer::InsertPkU256 { .. } => "insert_pk_u256",
            Reducer::InsertPkU32 { .. } => "insert_pk_u32",
            Reducer::InsertPkU32Two { .. } => "insert_pk_u32_two",
            Reducer::InsertPkU64 { .. } => "insert_pk_u64",
            Reducer::InsertPkU8 { .. } => "insert_pk_u8",
            Reducer::InsertPrimitivesAsStrings { .. } => "insert_primitives_as_strings",
            Reducer::InsertTableHoldsTable { .. } => "insert_table_holds_table",
            Reducer::InsertUniqueBool { .. } => "insert_unique_bool",
            Reducer::InsertUniqueConnectionId { .. } => "insert_unique_connection_id",
            Reducer::InsertUniqueI128 { .. } => "insert_unique_i128",
            Reducer::InsertUniqueI16 { .. } => "insert_unique_i16",
            Reducer::InsertUniqueI256 { .. } => "insert_unique_i256",
            Reducer::InsertUniqueI32 { .. } => "insert_unique_i32",
            Reducer::InsertUniqueI64 { .. } => "insert_unique_i64",
            Reducer::InsertUniqueI8 { .. } => "insert_unique_i8",
            Reducer::InsertUniqueIdentity { .. } => "insert_unique_identity",
            Reducer::InsertUniqueString { .. } => "insert_unique_string",
            Reducer::InsertUniqueU128 { .. } => "insert_unique_u128",
            Reducer::InsertUniqueU16 { .. } => "insert_unique_u16",
            Reducer::InsertUniqueU256 { .. } => "insert_unique_u256",
            Reducer::InsertUniqueU32 { .. } => "insert_unique_u32",
            Reducer::InsertUniqueU32UpdatePkU32 { .. } => "insert_unique_u32_update_pk_u32",
            Reducer::InsertUniqueU64 { .. } => "insert_unique_u64",
            Reducer::InsertUniqueU8 { .. } => "insert_unique_u8",
            Reducer::InsertUser { .. } => "insert_user",
            Reducer::InsertVecBool { .. } => "insert_vec_bool",
            Reducer::InsertVecByteStruct { .. } => "insert_vec_byte_struct",
            Reducer::InsertVecConnectionId { .. } => "insert_vec_connection_id",
            Reducer::InsertVecEnumWithPayload { .. } => "insert_vec_enum_with_payload",
            Reducer::InsertVecEveryPrimitiveStruct { .. } => "insert_vec_every_primitive_struct",
            Reducer::InsertVecEveryVecStruct { .. } => "insert_vec_every_vec_struct",
            Reducer::InsertVecF32 { .. } => "insert_vec_f32",
            Reducer::InsertVecF64 { .. } => "insert_vec_f64",
            Reducer::InsertVecI128 { .. } => "insert_vec_i128",
            Reducer::InsertVecI16 { .. } => "insert_vec_i16",
            Reducer::InsertVecI256 { .. } => "insert_vec_i256",
            Reducer::InsertVecI32 { .. } => "insert_vec_i32",
            Reducer::InsertVecI64 { .. } => "insert_vec_i64",
            Reducer::InsertVecI8 { .. } => "insert_vec_i8",
            Reducer::InsertVecIdentity { .. } => "insert_vec_identity",
            Reducer::InsertVecSimpleEnum { .. } => "insert_vec_simple_enum",
            Reducer::InsertVecString { .. } => "insert_vec_string",
            Reducer::InsertVecTimestamp { .. } => "insert_vec_timestamp",
            Reducer::InsertVecU128 { .. } => "insert_vec_u128",
            Reducer::InsertVecU16 { .. } => "insert_vec_u16",
            Reducer::InsertVecU256 { .. } => "insert_vec_u256",
            Reducer::InsertVecU32 { .. } => "insert_vec_u32",
            Reducer::InsertVecU64 { .. } => "insert_vec_u64",
            Reducer::InsertVecU8 { .. } => "insert_vec_u8",
            Reducer::InsertVecUnitStruct { .. } => "insert_vec_unit_struct",
            Reducer::NoOpSucceeds => "no_op_succeeds",
            Reducer::SendScheduledMessage { .. } => "send_scheduled_message",
            Reducer::UpdatePkBool { .. } => "update_pk_bool",
            Reducer::UpdatePkConnectionId { .. } => "update_pk_connection_id",
            Reducer::UpdatePkI128 { .. } => "update_pk_i128",
            Reducer::UpdatePkI16 { .. } => "update_pk_i16",
            Reducer::UpdatePkI256 { .. } => "update_pk_i256",
            Reducer::UpdatePkI32 { .. } => "update_pk_i32",
            Reducer::UpdatePkI64 { .. } => "update_pk_i64",
            Reducer::UpdatePkI8 { .. } => "update_pk_i8",
            Reducer::UpdatePkIdentity { .. } => "update_pk_identity",
            Reducer::UpdatePkString { .. } => "update_pk_string",
            Reducer::UpdatePkU128 { .. } => "update_pk_u128",
            Reducer::UpdatePkU16 { .. } => "update_pk_u16",
            Reducer::UpdatePkU256 { .. } => "update_pk_u256",
            Reducer::UpdatePkU32 { .. } => "update_pk_u32",
            Reducer::UpdatePkU32Two { .. } => "update_pk_u32_two",
            Reducer::UpdatePkU64 { .. } => "update_pk_u64",
            Reducer::UpdatePkU8 { .. } => "update_pk_u8",
            Reducer::UpdateUniqueBool { .. } => "update_unique_bool",
            Reducer::UpdateUniqueConnectionId { .. } => "update_unique_connection_id",
            Reducer::UpdateUniqueI128 { .. } => "update_unique_i128",
            Reducer::UpdateUniqueI16 { .. } => "update_unique_i16",
            Reducer::UpdateUniqueI256 { .. } => "update_unique_i256",
            Reducer::UpdateUniqueI32 { .. } => "update_unique_i32",
            Reducer::UpdateUniqueI64 { .. } => "update_unique_i64",
            Reducer::UpdateUniqueI8 { .. } => "update_unique_i8",
            Reducer::UpdateUniqueIdentity { .. } => "update_unique_identity",
            Reducer::UpdateUniqueString { .. } => "update_unique_string",
            Reducer::UpdateUniqueU128 { .. } => "update_unique_u128",
            Reducer::UpdateUniqueU16 { .. } => "update_unique_u16",
            Reducer::UpdateUniqueU256 { .. } => "update_unique_u256",
            Reducer::UpdateUniqueU32 { .. } => "update_unique_u32",
            Reducer::UpdateUniqueU64 { .. } => "update_unique_u64",
            Reducer::UpdateUniqueU8 { .. } => "update_unique_u8",
        }
    }
}
impl TryFrom<__ws::ReducerCallInfo<__ws::BsatnFormat>> for Reducer {
    type Error = __sdk::Error;
    fn try_from(value: __ws::ReducerCallInfo<__ws::BsatnFormat>) -> __sdk::Result<Self> {
        match &value.reducer_name[..] {
            "delete_from_btree_u32" => Ok(__sdk::parse_reducer_args::<
                delete_from_btree_u_32_reducer::DeleteFromBtreeU32Args,
            >("delete_from_btree_u32", &value.args)?
            .into()),
            "delete_large_table" => Ok(
                __sdk::parse_reducer_args::<delete_large_table_reducer::DeleteLargeTableArgs>(
                    "delete_large_table",
                    &value.args,
                )?
                .into(),
            ),
            "delete_pk_bool" => Ok(__sdk::parse_reducer_args::<delete_pk_bool_reducer::DeletePkBoolArgs>(
                "delete_pk_bool",
                &value.args,
            )?
            .into()),
            "delete_pk_connection_id" => Ok(__sdk::parse_reducer_args::<
                delete_pk_connection_id_reducer::DeletePkConnectionIdArgs,
            >("delete_pk_connection_id", &value.args)?
            .into()),
            "delete_pk_i128" => Ok(__sdk::parse_reducer_args::<delete_pk_i_128_reducer::DeletePkI128Args>(
                "delete_pk_i128",
                &value.args,
            )?
            .into()),
            "delete_pk_i16" => Ok(__sdk::parse_reducer_args::<delete_pk_i_16_reducer::DeletePkI16Args>(
                "delete_pk_i16",
                &value.args,
            )?
            .into()),
            "delete_pk_i256" => Ok(__sdk::parse_reducer_args::<delete_pk_i_256_reducer::DeletePkI256Args>(
                "delete_pk_i256",
                &value.args,
            )?
            .into()),
            "delete_pk_i32" => Ok(__sdk::parse_reducer_args::<delete_pk_i_32_reducer::DeletePkI32Args>(
                "delete_pk_i32",
                &value.args,
            )?
            .into()),
            "delete_pk_i64" => Ok(__sdk::parse_reducer_args::<delete_pk_i_64_reducer::DeletePkI64Args>(
                "delete_pk_i64",
                &value.args,
            )?
            .into()),
            "delete_pk_i8" => Ok(__sdk::parse_reducer_args::<delete_pk_i_8_reducer::DeletePkI8Args>(
                "delete_pk_i8",
                &value.args,
            )?
            .into()),
            "delete_pk_identity" => Ok(
                __sdk::parse_reducer_args::<delete_pk_identity_reducer::DeletePkIdentityArgs>(
                    "delete_pk_identity",
                    &value.args,
                )?
                .into(),
            ),
            "delete_pk_string" => Ok(
                __sdk::parse_reducer_args::<delete_pk_string_reducer::DeletePkStringArgs>(
                    "delete_pk_string",
                    &value.args,
                )?
                .into(),
            ),
            "delete_pk_u128" => Ok(__sdk::parse_reducer_args::<delete_pk_u_128_reducer::DeletePkU128Args>(
                "delete_pk_u128",
                &value.args,
            )?
            .into()),
            "delete_pk_u16" => Ok(__sdk::parse_reducer_args::<delete_pk_u_16_reducer::DeletePkU16Args>(
                "delete_pk_u16",
                &value.args,
            )?
            .into()),
            "delete_pk_u256" => Ok(__sdk::parse_reducer_args::<delete_pk_u_256_reducer::DeletePkU256Args>(
                "delete_pk_u256",
                &value.args,
            )?
            .into()),
            "delete_pk_u32" => Ok(__sdk::parse_reducer_args::<delete_pk_u_32_reducer::DeletePkU32Args>(
                "delete_pk_u32",
                &value.args,
            )?
            .into()),
            "delete_pk_u32_insert_pk_u32_two" => Ok(__sdk::parse_reducer_args::<
                delete_pk_u_32_insert_pk_u_32_two_reducer::DeletePkU32InsertPkU32TwoArgs,
            >("delete_pk_u32_insert_pk_u32_two", &value.args)?
            .into()),
            "delete_pk_u32_two" => Ok(
                __sdk::parse_reducer_args::<delete_pk_u_32_two_reducer::DeletePkU32TwoArgs>(
                    "delete_pk_u32_two",
                    &value.args,
                )?
                .into(),
            ),
            "delete_pk_u64" => Ok(__sdk::parse_reducer_args::<delete_pk_u_64_reducer::DeletePkU64Args>(
                "delete_pk_u64",
                &value.args,
            )?
            .into()),
            "delete_pk_u8" => Ok(__sdk::parse_reducer_args::<delete_pk_u_8_reducer::DeletePkU8Args>(
                "delete_pk_u8",
                &value.args,
            )?
            .into()),
            "delete_unique_bool" => Ok(
                __sdk::parse_reducer_args::<delete_unique_bool_reducer::DeleteUniqueBoolArgs>(
                    "delete_unique_bool",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_connection_id" => Ok(__sdk::parse_reducer_args::<
                delete_unique_connection_id_reducer::DeleteUniqueConnectionIdArgs,
            >("delete_unique_connection_id", &value.args)?
            .into()),
            "delete_unique_i128" => Ok(
                __sdk::parse_reducer_args::<delete_unique_i_128_reducer::DeleteUniqueI128Args>(
                    "delete_unique_i128",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_i16" => Ok(
                __sdk::parse_reducer_args::<delete_unique_i_16_reducer::DeleteUniqueI16Args>(
                    "delete_unique_i16",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_i256" => Ok(
                __sdk::parse_reducer_args::<delete_unique_i_256_reducer::DeleteUniqueI256Args>(
                    "delete_unique_i256",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_i32" => Ok(
                __sdk::parse_reducer_args::<delete_unique_i_32_reducer::DeleteUniqueI32Args>(
                    "delete_unique_i32",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_i64" => Ok(
                __sdk::parse_reducer_args::<delete_unique_i_64_reducer::DeleteUniqueI64Args>(
                    "delete_unique_i64",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_i8" => Ok(
                __sdk::parse_reducer_args::<delete_unique_i_8_reducer::DeleteUniqueI8Args>(
                    "delete_unique_i8",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_identity" => Ok(__sdk::parse_reducer_args::<
                delete_unique_identity_reducer::DeleteUniqueIdentityArgs,
            >("delete_unique_identity", &value.args)?
            .into()),
            "delete_unique_string" => Ok(__sdk::parse_reducer_args::<
                delete_unique_string_reducer::DeleteUniqueStringArgs,
            >("delete_unique_string", &value.args)?
            .into()),
            "delete_unique_u128" => Ok(
                __sdk::parse_reducer_args::<delete_unique_u_128_reducer::DeleteUniqueU128Args>(
                    "delete_unique_u128",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_u16" => Ok(
                __sdk::parse_reducer_args::<delete_unique_u_16_reducer::DeleteUniqueU16Args>(
                    "delete_unique_u16",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_u256" => Ok(
                __sdk::parse_reducer_args::<delete_unique_u_256_reducer::DeleteUniqueU256Args>(
                    "delete_unique_u256",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_u32" => Ok(
                __sdk::parse_reducer_args::<delete_unique_u_32_reducer::DeleteUniqueU32Args>(
                    "delete_unique_u32",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_u64" => Ok(
                __sdk::parse_reducer_args::<delete_unique_u_64_reducer::DeleteUniqueU64Args>(
                    "delete_unique_u64",
                    &value.args,
                )?
                .into(),
            ),
            "delete_unique_u8" => Ok(
                __sdk::parse_reducer_args::<delete_unique_u_8_reducer::DeleteUniqueU8Args>(
                    "delete_unique_u8",
                    &value.args,
                )?
                .into(),
            ),
            "insert_call_timestamp" => Ok(__sdk::parse_reducer_args::<
                insert_call_timestamp_reducer::InsertCallTimestampArgs,
            >("insert_call_timestamp", &value.args)?
            .into()),
            "insert_caller_one_connection_id" => Ok(__sdk::parse_reducer_args::<
                insert_caller_one_connection_id_reducer::InsertCallerOneConnectionIdArgs,
            >("insert_caller_one_connection_id", &value.args)?
            .into()),
            "insert_caller_one_identity" => Ok(__sdk::parse_reducer_args::<
                insert_caller_one_identity_reducer::InsertCallerOneIdentityArgs,
            >("insert_caller_one_identity", &value.args)?
            .into()),
            "insert_caller_pk_connection_id" => Ok(__sdk::parse_reducer_args::<
                insert_caller_pk_connection_id_reducer::InsertCallerPkConnectionIdArgs,
            >("insert_caller_pk_connection_id", &value.args)?
            .into()),
            "insert_caller_pk_identity" => Ok(__sdk::parse_reducer_args::<
                insert_caller_pk_identity_reducer::InsertCallerPkIdentityArgs,
            >("insert_caller_pk_identity", &value.args)?
            .into()),
            "insert_caller_unique_connection_id" => {
                Ok(__sdk::parse_reducer_args::<
                    insert_caller_unique_connection_id_reducer::InsertCallerUniqueConnectionIdArgs,
                >("insert_caller_unique_connection_id", &value.args)?
                .into())
            }
            "insert_caller_unique_identity" => Ok(__sdk::parse_reducer_args::<
                insert_caller_unique_identity_reducer::InsertCallerUniqueIdentityArgs,
            >("insert_caller_unique_identity", &value.args)?
            .into()),
            "insert_caller_vec_connection_id" => Ok(__sdk::parse_reducer_args::<
                insert_caller_vec_connection_id_reducer::InsertCallerVecConnectionIdArgs,
            >("insert_caller_vec_connection_id", &value.args)?
            .into()),
            "insert_caller_vec_identity" => Ok(__sdk::parse_reducer_args::<
                insert_caller_vec_identity_reducer::InsertCallerVecIdentityArgs,
            >("insert_caller_vec_identity", &value.args)?
            .into()),
            "insert_into_btree_u32" => Ok(__sdk::parse_reducer_args::<
                insert_into_btree_u_32_reducer::InsertIntoBtreeU32Args,
            >("insert_into_btree_u32", &value.args)?
            .into()),
            "insert_into_pk_btree_u32" => Ok(__sdk::parse_reducer_args::<
                insert_into_pk_btree_u_32_reducer::InsertIntoPkBtreeU32Args,
            >("insert_into_pk_btree_u32", &value.args)?
            .into()),
            "insert_large_table" => Ok(
                __sdk::parse_reducer_args::<insert_large_table_reducer::InsertLargeTableArgs>(
                    "insert_large_table",
                    &value.args,
                )?
                .into(),
            ),
            "insert_one_bool" => Ok(__sdk::parse_reducer_args::<insert_one_bool_reducer::InsertOneBoolArgs>(
                "insert_one_bool",
                &value.args,
            )?
            .into()),
            "insert_one_byte_struct" => Ok(__sdk::parse_reducer_args::<
                insert_one_byte_struct_reducer::InsertOneByteStructArgs,
            >("insert_one_byte_struct", &value.args)?
            .into()),
            "insert_one_connection_id" => Ok(__sdk::parse_reducer_args::<
                insert_one_connection_id_reducer::InsertOneConnectionIdArgs,
            >("insert_one_connection_id", &value.args)?
            .into()),
            "insert_one_enum_with_payload" => Ok(__sdk::parse_reducer_args::<
                insert_one_enum_with_payload_reducer::InsertOneEnumWithPayloadArgs,
            >("insert_one_enum_with_payload", &value.args)?
            .into()),
            "insert_one_every_primitive_struct" => Ok(__sdk::parse_reducer_args::<
                insert_one_every_primitive_struct_reducer::InsertOneEveryPrimitiveStructArgs,
            >("insert_one_every_primitive_struct", &value.args)?
            .into()),
            "insert_one_every_vec_struct" => Ok(__sdk::parse_reducer_args::<
                insert_one_every_vec_struct_reducer::InsertOneEveryVecStructArgs,
            >("insert_one_every_vec_struct", &value.args)?
            .into()),
            "insert_one_f32" => Ok(__sdk::parse_reducer_args::<insert_one_f_32_reducer::InsertOneF32Args>(
                "insert_one_f32",
                &value.args,
            )?
            .into()),
            "insert_one_f64" => Ok(__sdk::parse_reducer_args::<insert_one_f_64_reducer::InsertOneF64Args>(
                "insert_one_f64",
                &value.args,
            )?
            .into()),
            "insert_one_i128" => Ok(
                __sdk::parse_reducer_args::<insert_one_i_128_reducer::InsertOneI128Args>(
                    "insert_one_i128",
                    &value.args,
                )?
                .into(),
            ),
            "insert_one_i16" => Ok(__sdk::parse_reducer_args::<insert_one_i_16_reducer::InsertOneI16Args>(
                "insert_one_i16",
                &value.args,
            )?
            .into()),
            "insert_one_i256" => Ok(
                __sdk::parse_reducer_args::<insert_one_i_256_reducer::InsertOneI256Args>(
                    "insert_one_i256",
                    &value.args,
                )?
                .into(),
            ),
            "insert_one_i32" => Ok(__sdk::parse_reducer_args::<insert_one_i_32_reducer::InsertOneI32Args>(
                "insert_one_i32",
                &value.args,
            )?
            .into()),
            "insert_one_i64" => Ok(__sdk::parse_reducer_args::<insert_one_i_64_reducer::InsertOneI64Args>(
                "insert_one_i64",
                &value.args,
            )?
            .into()),
            "insert_one_i8" => Ok(__sdk::parse_reducer_args::<insert_one_i_8_reducer::InsertOneI8Args>(
                "insert_one_i8",
                &value.args,
            )?
            .into()),
            "insert_one_identity" => Ok(
                __sdk::parse_reducer_args::<insert_one_identity_reducer::InsertOneIdentityArgs>(
                    "insert_one_identity",
                    &value.args,
                )?
                .into(),
            ),
            "insert_one_simple_enum" => Ok(__sdk::parse_reducer_args::<
                insert_one_simple_enum_reducer::InsertOneSimpleEnumArgs,
            >("insert_one_simple_enum", &value.args)?
            .into()),
            "insert_one_string" => Ok(
                __sdk::parse_reducer_args::<insert_one_string_reducer::InsertOneStringArgs>(
                    "insert_one_string",
                    &value.args,
                )?
                .into(),
            ),
            "insert_one_timestamp" => Ok(__sdk::parse_reducer_args::<
                insert_one_timestamp_reducer::InsertOneTimestampArgs,
            >("insert_one_timestamp", &value.args)?
            .into()),
            "insert_one_u128" => Ok(
                __sdk::parse_reducer_args::<insert_one_u_128_reducer::InsertOneU128Args>(
                    "insert_one_u128",
                    &value.args,
                )?
                .into(),
            ),
            "insert_one_u16" => Ok(__sdk::parse_reducer_args::<insert_one_u_16_reducer::InsertOneU16Args>(
                "insert_one_u16",
                &value.args,
            )?
            .into()),
            "insert_one_u256" => Ok(
                __sdk::parse_reducer_args::<insert_one_u_256_reducer::InsertOneU256Args>(
                    "insert_one_u256",
                    &value.args,
                )?
                .into(),
            ),
            "insert_one_u32" => Ok(__sdk::parse_reducer_args::<insert_one_u_32_reducer::InsertOneU32Args>(
                "insert_one_u32",
                &value.args,
            )?
            .into()),
            "insert_one_u64" => Ok(__sdk::parse_reducer_args::<insert_one_u_64_reducer::InsertOneU64Args>(
                "insert_one_u64",
                &value.args,
            )?
            .into()),
            "insert_one_u8" => Ok(__sdk::parse_reducer_args::<insert_one_u_8_reducer::InsertOneU8Args>(
                "insert_one_u8",
                &value.args,
            )?
            .into()),
            "insert_one_unit_struct" => Ok(__sdk::parse_reducer_args::<
                insert_one_unit_struct_reducer::InsertOneUnitStructArgs,
            >("insert_one_unit_struct", &value.args)?
            .into()),
            "insert_option_every_primitive_struct" => {
                Ok(__sdk::parse_reducer_args::<
                    insert_option_every_primitive_struct_reducer::InsertOptionEveryPrimitiveStructArgs,
                >("insert_option_every_primitive_struct", &value.args)?
                .into())
            }
            "insert_option_i32" => Ok(
                __sdk::parse_reducer_args::<insert_option_i_32_reducer::InsertOptionI32Args>(
                    "insert_option_i32",
                    &value.args,
                )?
                .into(),
            ),
            "insert_option_identity" => Ok(__sdk::parse_reducer_args::<
                insert_option_identity_reducer::InsertOptionIdentityArgs,
            >("insert_option_identity", &value.args)?
            .into()),
            "insert_option_simple_enum" => Ok(__sdk::parse_reducer_args::<
                insert_option_simple_enum_reducer::InsertOptionSimpleEnumArgs,
            >("insert_option_simple_enum", &value.args)?
            .into()),
            "insert_option_string" => Ok(__sdk::parse_reducer_args::<
                insert_option_string_reducer::InsertOptionStringArgs,
            >("insert_option_string", &value.args)?
            .into()),
            "insert_option_vec_option_i32" => Ok(__sdk::parse_reducer_args::<
                insert_option_vec_option_i_32_reducer::InsertOptionVecOptionI32Args,
            >("insert_option_vec_option_i32", &value.args)?
            .into()),
            "insert_pk_bool" => Ok(__sdk::parse_reducer_args::<insert_pk_bool_reducer::InsertPkBoolArgs>(
                "insert_pk_bool",
                &value.args,
            )?
            .into()),
            "insert_pk_connection_id" => Ok(__sdk::parse_reducer_args::<
                insert_pk_connection_id_reducer::InsertPkConnectionIdArgs,
            >("insert_pk_connection_id", &value.args)?
            .into()),
            "insert_pk_i128" => Ok(__sdk::parse_reducer_args::<insert_pk_i_128_reducer::InsertPkI128Args>(
                "insert_pk_i128",
                &value.args,
            )?
            .into()),
            "insert_pk_i16" => Ok(__sdk::parse_reducer_args::<insert_pk_i_16_reducer::InsertPkI16Args>(
                "insert_pk_i16",
                &value.args,
            )?
            .into()),
            "insert_pk_i256" => Ok(__sdk::parse_reducer_args::<insert_pk_i_256_reducer::InsertPkI256Args>(
                "insert_pk_i256",
                &value.args,
            )?
            .into()),
            "insert_pk_i32" => Ok(__sdk::parse_reducer_args::<insert_pk_i_32_reducer::InsertPkI32Args>(
                "insert_pk_i32",
                &value.args,
            )?
            .into()),
            "insert_pk_i64" => Ok(__sdk::parse_reducer_args::<insert_pk_i_64_reducer::InsertPkI64Args>(
                "insert_pk_i64",
                &value.args,
            )?
            .into()),
            "insert_pk_i8" => Ok(__sdk::parse_reducer_args::<insert_pk_i_8_reducer::InsertPkI8Args>(
                "insert_pk_i8",
                &value.args,
            )?
            .into()),
            "insert_pk_identity" => Ok(
                __sdk::parse_reducer_args::<insert_pk_identity_reducer::InsertPkIdentityArgs>(
                    "insert_pk_identity",
                    &value.args,
                )?
                .into(),
            ),
            "insert_pk_string" => Ok(
                __sdk::parse_reducer_args::<insert_pk_string_reducer::InsertPkStringArgs>(
                    "insert_pk_string",
                    &value.args,
                )?
                .into(),
            ),
            "insert_pk_u128" => Ok(__sdk::parse_reducer_args::<insert_pk_u_128_reducer::InsertPkU128Args>(
                "insert_pk_u128",
                &value.args,
            )?
            .into()),
            "insert_pk_u16" => Ok(__sdk::parse_reducer_args::<insert_pk_u_16_reducer::InsertPkU16Args>(
                "insert_pk_u16",
                &value.args,
            )?
            .into()),
            "insert_pk_u256" => Ok(__sdk::parse_reducer_args::<insert_pk_u_256_reducer::InsertPkU256Args>(
                "insert_pk_u256",
                &value.args,
            )?
            .into()),
            "insert_pk_u32" => Ok(__sdk::parse_reducer_args::<insert_pk_u_32_reducer::InsertPkU32Args>(
                "insert_pk_u32",
                &value.args,
            )?
            .into()),
            "insert_pk_u32_two" => Ok(
                __sdk::parse_reducer_args::<insert_pk_u_32_two_reducer::InsertPkU32TwoArgs>(
                    "insert_pk_u32_two",
                    &value.args,
                )?
                .into(),
            ),
            "insert_pk_u64" => Ok(__sdk::parse_reducer_args::<insert_pk_u_64_reducer::InsertPkU64Args>(
                "insert_pk_u64",
                &value.args,
            )?
            .into()),
            "insert_pk_u8" => Ok(__sdk::parse_reducer_args::<insert_pk_u_8_reducer::InsertPkU8Args>(
                "insert_pk_u8",
                &value.args,
            )?
            .into()),
            "insert_primitives_as_strings" => Ok(__sdk::parse_reducer_args::<
                insert_primitives_as_strings_reducer::InsertPrimitivesAsStringsArgs,
            >("insert_primitives_as_strings", &value.args)?
            .into()),
            "insert_table_holds_table" => Ok(__sdk::parse_reducer_args::<
                insert_table_holds_table_reducer::InsertTableHoldsTableArgs,
            >("insert_table_holds_table", &value.args)?
            .into()),
            "insert_unique_bool" => Ok(
                __sdk::parse_reducer_args::<insert_unique_bool_reducer::InsertUniqueBoolArgs>(
                    "insert_unique_bool",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_connection_id" => Ok(__sdk::parse_reducer_args::<
                insert_unique_connection_id_reducer::InsertUniqueConnectionIdArgs,
            >("insert_unique_connection_id", &value.args)?
            .into()),
            "insert_unique_i128" => Ok(
                __sdk::parse_reducer_args::<insert_unique_i_128_reducer::InsertUniqueI128Args>(
                    "insert_unique_i128",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_i16" => Ok(
                __sdk::parse_reducer_args::<insert_unique_i_16_reducer::InsertUniqueI16Args>(
                    "insert_unique_i16",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_i256" => Ok(
                __sdk::parse_reducer_args::<insert_unique_i_256_reducer::InsertUniqueI256Args>(
                    "insert_unique_i256",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_i32" => Ok(
                __sdk::parse_reducer_args::<insert_unique_i_32_reducer::InsertUniqueI32Args>(
                    "insert_unique_i32",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_i64" => Ok(
                __sdk::parse_reducer_args::<insert_unique_i_64_reducer::InsertUniqueI64Args>(
                    "insert_unique_i64",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_i8" => Ok(
                __sdk::parse_reducer_args::<insert_unique_i_8_reducer::InsertUniqueI8Args>(
                    "insert_unique_i8",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_identity" => Ok(__sdk::parse_reducer_args::<
                insert_unique_identity_reducer::InsertUniqueIdentityArgs,
            >("insert_unique_identity", &value.args)?
            .into()),
            "insert_unique_string" => Ok(__sdk::parse_reducer_args::<
                insert_unique_string_reducer::InsertUniqueStringArgs,
            >("insert_unique_string", &value.args)?
            .into()),
            "insert_unique_u128" => Ok(
                __sdk::parse_reducer_args::<insert_unique_u_128_reducer::InsertUniqueU128Args>(
                    "insert_unique_u128",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_u16" => Ok(
                __sdk::parse_reducer_args::<insert_unique_u_16_reducer::InsertUniqueU16Args>(
                    "insert_unique_u16",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_u256" => Ok(
                __sdk::parse_reducer_args::<insert_unique_u_256_reducer::InsertUniqueU256Args>(
                    "insert_unique_u256",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_u32" => Ok(
                __sdk::parse_reducer_args::<insert_unique_u_32_reducer::InsertUniqueU32Args>(
                    "insert_unique_u32",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_u32_update_pk_u32" => Ok(__sdk::parse_reducer_args::<
                insert_unique_u_32_update_pk_u_32_reducer::InsertUniqueU32UpdatePkU32Args,
            >("insert_unique_u32_update_pk_u32", &value.args)?
            .into()),
            "insert_unique_u64" => Ok(
                __sdk::parse_reducer_args::<insert_unique_u_64_reducer::InsertUniqueU64Args>(
                    "insert_unique_u64",
                    &value.args,
                )?
                .into(),
            ),
            "insert_unique_u8" => Ok(
                __sdk::parse_reducer_args::<insert_unique_u_8_reducer::InsertUniqueU8Args>(
                    "insert_unique_u8",
                    &value.args,
                )?
                .into(),
            ),
            "insert_user" => Ok(__sdk::parse_reducer_args::<insert_user_reducer::InsertUserArgs>(
                "insert_user",
                &value.args,
            )?
            .into()),
            "insert_vec_bool" => Ok(__sdk::parse_reducer_args::<insert_vec_bool_reducer::InsertVecBoolArgs>(
                "insert_vec_bool",
                &value.args,
            )?
            .into()),
            "insert_vec_byte_struct" => Ok(__sdk::parse_reducer_args::<
                insert_vec_byte_struct_reducer::InsertVecByteStructArgs,
            >("insert_vec_byte_struct", &value.args)?
            .into()),
            "insert_vec_connection_id" => Ok(__sdk::parse_reducer_args::<
                insert_vec_connection_id_reducer::InsertVecConnectionIdArgs,
            >("insert_vec_connection_id", &value.args)?
            .into()),
            "insert_vec_enum_with_payload" => Ok(__sdk::parse_reducer_args::<
                insert_vec_enum_with_payload_reducer::InsertVecEnumWithPayloadArgs,
            >("insert_vec_enum_with_payload", &value.args)?
            .into()),
            "insert_vec_every_primitive_struct" => Ok(__sdk::parse_reducer_args::<
                insert_vec_every_primitive_struct_reducer::InsertVecEveryPrimitiveStructArgs,
            >("insert_vec_every_primitive_struct", &value.args)?
            .into()),
            "insert_vec_every_vec_struct" => Ok(__sdk::parse_reducer_args::<
                insert_vec_every_vec_struct_reducer::InsertVecEveryVecStructArgs,
            >("insert_vec_every_vec_struct", &value.args)?
            .into()),
            "insert_vec_f32" => Ok(__sdk::parse_reducer_args::<insert_vec_f_32_reducer::InsertVecF32Args>(
                "insert_vec_f32",
                &value.args,
            )?
            .into()),
            "insert_vec_f64" => Ok(__sdk::parse_reducer_args::<insert_vec_f_64_reducer::InsertVecF64Args>(
                "insert_vec_f64",
                &value.args,
            )?
            .into()),
            "insert_vec_i128" => Ok(
                __sdk::parse_reducer_args::<insert_vec_i_128_reducer::InsertVecI128Args>(
                    "insert_vec_i128",
                    &value.args,
                )?
                .into(),
            ),
            "insert_vec_i16" => Ok(__sdk::parse_reducer_args::<insert_vec_i_16_reducer::InsertVecI16Args>(
                "insert_vec_i16",
                &value.args,
            )?
            .into()),
            "insert_vec_i256" => Ok(
                __sdk::parse_reducer_args::<insert_vec_i_256_reducer::InsertVecI256Args>(
                    "insert_vec_i256",
                    &value.args,
                )?
                .into(),
            ),
            "insert_vec_i32" => Ok(__sdk::parse_reducer_args::<insert_vec_i_32_reducer::InsertVecI32Args>(
                "insert_vec_i32",
                &value.args,
            )?
            .into()),
            "insert_vec_i64" => Ok(__sdk::parse_reducer_args::<insert_vec_i_64_reducer::InsertVecI64Args>(
                "insert_vec_i64",
                &value.args,
            )?
            .into()),
            "insert_vec_i8" => Ok(__sdk::parse_reducer_args::<insert_vec_i_8_reducer::InsertVecI8Args>(
                "insert_vec_i8",
                &value.args,
            )?
            .into()),
            "insert_vec_identity" => Ok(
                __sdk::parse_reducer_args::<insert_vec_identity_reducer::InsertVecIdentityArgs>(
                    "insert_vec_identity",
                    &value.args,
                )?
                .into(),
            ),
            "insert_vec_simple_enum" => Ok(__sdk::parse_reducer_args::<
                insert_vec_simple_enum_reducer::InsertVecSimpleEnumArgs,
            >("insert_vec_simple_enum", &value.args)?
            .into()),
            "insert_vec_string" => Ok(
                __sdk::parse_reducer_args::<insert_vec_string_reducer::InsertVecStringArgs>(
                    "insert_vec_string",
                    &value.args,
                )?
                .into(),
            ),
            "insert_vec_timestamp" => Ok(__sdk::parse_reducer_args::<
                insert_vec_timestamp_reducer::InsertVecTimestampArgs,
            >("insert_vec_timestamp", &value.args)?
            .into()),
            "insert_vec_u128" => Ok(
                __sdk::parse_reducer_args::<insert_vec_u_128_reducer::InsertVecU128Args>(
                    "insert_vec_u128",
                    &value.args,
                )?
                .into(),
            ),
            "insert_vec_u16" => Ok(__sdk::parse_reducer_args::<insert_vec_u_16_reducer::InsertVecU16Args>(
                "insert_vec_u16",
                &value.args,
            )?
            .into()),
            "insert_vec_u256" => Ok(
                __sdk::parse_reducer_args::<insert_vec_u_256_reducer::InsertVecU256Args>(
                    "insert_vec_u256",
                    &value.args,
                )?
                .into(),
            ),
            "insert_vec_u32" => Ok(__sdk::parse_reducer_args::<insert_vec_u_32_reducer::InsertVecU32Args>(
                "insert_vec_u32",
                &value.args,
            )?
            .into()),
            "insert_vec_u64" => Ok(__sdk::parse_reducer_args::<insert_vec_u_64_reducer::InsertVecU64Args>(
                "insert_vec_u64",
                &value.args,
            )?
            .into()),
            "insert_vec_u8" => Ok(__sdk::parse_reducer_args::<insert_vec_u_8_reducer::InsertVecU8Args>(
                "insert_vec_u8",
                &value.args,
            )?
            .into()),
            "insert_vec_unit_struct" => Ok(__sdk::parse_reducer_args::<
                insert_vec_unit_struct_reducer::InsertVecUnitStructArgs,
            >("insert_vec_unit_struct", &value.args)?
            .into()),
            "no_op_succeeds" => Ok(__sdk::parse_reducer_args::<no_op_succeeds_reducer::NoOpSucceedsArgs>(
                "no_op_succeeds",
                &value.args,
            )?
            .into()),
            "send_scheduled_message" => Ok(__sdk::parse_reducer_args::<
                send_scheduled_message_reducer::SendScheduledMessageArgs,
            >("send_scheduled_message", &value.args)?
            .into()),
            "update_pk_bool" => Ok(__sdk::parse_reducer_args::<update_pk_bool_reducer::UpdatePkBoolArgs>(
                "update_pk_bool",
                &value.args,
            )?
            .into()),
            "update_pk_connection_id" => Ok(__sdk::parse_reducer_args::<
                update_pk_connection_id_reducer::UpdatePkConnectionIdArgs,
            >("update_pk_connection_id", &value.args)?
            .into()),
            "update_pk_i128" => Ok(__sdk::parse_reducer_args::<update_pk_i_128_reducer::UpdatePkI128Args>(
                "update_pk_i128",
                &value.args,
            )?
            .into()),
            "update_pk_i16" => Ok(__sdk::parse_reducer_args::<update_pk_i_16_reducer::UpdatePkI16Args>(
                "update_pk_i16",
                &value.args,
            )?
            .into()),
            "update_pk_i256" => Ok(__sdk::parse_reducer_args::<update_pk_i_256_reducer::UpdatePkI256Args>(
                "update_pk_i256",
                &value.args,
            )?
            .into()),
            "update_pk_i32" => Ok(__sdk::parse_reducer_args::<update_pk_i_32_reducer::UpdatePkI32Args>(
                "update_pk_i32",
                &value.args,
            )?
            .into()),
            "update_pk_i64" => Ok(__sdk::parse_reducer_args::<update_pk_i_64_reducer::UpdatePkI64Args>(
                "update_pk_i64",
                &value.args,
            )?
            .into()),
            "update_pk_i8" => Ok(__sdk::parse_reducer_args::<update_pk_i_8_reducer::UpdatePkI8Args>(
                "update_pk_i8",
                &value.args,
            )?
            .into()),
            "update_pk_identity" => Ok(
                __sdk::parse_reducer_args::<update_pk_identity_reducer::UpdatePkIdentityArgs>(
                    "update_pk_identity",
                    &value.args,
                )?
                .into(),
            ),
            "update_pk_string" => Ok(
                __sdk::parse_reducer_args::<update_pk_string_reducer::UpdatePkStringArgs>(
                    "update_pk_string",
                    &value.args,
                )?
                .into(),
            ),
            "update_pk_u128" => Ok(__sdk::parse_reducer_args::<update_pk_u_128_reducer::UpdatePkU128Args>(
                "update_pk_u128",
                &value.args,
            )?
            .into()),
            "update_pk_u16" => Ok(__sdk::parse_reducer_args::<update_pk_u_16_reducer::UpdatePkU16Args>(
                "update_pk_u16",
                &value.args,
            )?
            .into()),
            "update_pk_u256" => Ok(__sdk::parse_reducer_args::<update_pk_u_256_reducer::UpdatePkU256Args>(
                "update_pk_u256",
                &value.args,
            )?
            .into()),
            "update_pk_u32" => Ok(__sdk::parse_reducer_args::<update_pk_u_32_reducer::UpdatePkU32Args>(
                "update_pk_u32",
                &value.args,
            )?
            .into()),
            "update_pk_u32_two" => Ok(
                __sdk::parse_reducer_args::<update_pk_u_32_two_reducer::UpdatePkU32TwoArgs>(
                    "update_pk_u32_two",
                    &value.args,
                )?
                .into(),
            ),
            "update_pk_u64" => Ok(__sdk::parse_reducer_args::<update_pk_u_64_reducer::UpdatePkU64Args>(
                "update_pk_u64",
                &value.args,
            )?
            .into()),
            "update_pk_u8" => Ok(__sdk::parse_reducer_args::<update_pk_u_8_reducer::UpdatePkU8Args>(
                "update_pk_u8",
                &value.args,
            )?
            .into()),
            "update_unique_bool" => Ok(
                __sdk::parse_reducer_args::<update_unique_bool_reducer::UpdateUniqueBoolArgs>(
                    "update_unique_bool",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_connection_id" => Ok(__sdk::parse_reducer_args::<
                update_unique_connection_id_reducer::UpdateUniqueConnectionIdArgs,
            >("update_unique_connection_id", &value.args)?
            .into()),
            "update_unique_i128" => Ok(
                __sdk::parse_reducer_args::<update_unique_i_128_reducer::UpdateUniqueI128Args>(
                    "update_unique_i128",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_i16" => Ok(
                __sdk::parse_reducer_args::<update_unique_i_16_reducer::UpdateUniqueI16Args>(
                    "update_unique_i16",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_i256" => Ok(
                __sdk::parse_reducer_args::<update_unique_i_256_reducer::UpdateUniqueI256Args>(
                    "update_unique_i256",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_i32" => Ok(
                __sdk::parse_reducer_args::<update_unique_i_32_reducer::UpdateUniqueI32Args>(
                    "update_unique_i32",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_i64" => Ok(
                __sdk::parse_reducer_args::<update_unique_i_64_reducer::UpdateUniqueI64Args>(
                    "update_unique_i64",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_i8" => Ok(
                __sdk::parse_reducer_args::<update_unique_i_8_reducer::UpdateUniqueI8Args>(
                    "update_unique_i8",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_identity" => Ok(__sdk::parse_reducer_args::<
                update_unique_identity_reducer::UpdateUniqueIdentityArgs,
            >("update_unique_identity", &value.args)?
            .into()),
            "update_unique_string" => Ok(__sdk::parse_reducer_args::<
                update_unique_string_reducer::UpdateUniqueStringArgs,
            >("update_unique_string", &value.args)?
            .into()),
            "update_unique_u128" => Ok(
                __sdk::parse_reducer_args::<update_unique_u_128_reducer::UpdateUniqueU128Args>(
                    "update_unique_u128",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_u16" => Ok(
                __sdk::parse_reducer_args::<update_unique_u_16_reducer::UpdateUniqueU16Args>(
                    "update_unique_u16",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_u256" => Ok(
                __sdk::parse_reducer_args::<update_unique_u_256_reducer::UpdateUniqueU256Args>(
                    "update_unique_u256",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_u32" => Ok(
                __sdk::parse_reducer_args::<update_unique_u_32_reducer::UpdateUniqueU32Args>(
                    "update_unique_u32",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_u64" => Ok(
                __sdk::parse_reducer_args::<update_unique_u_64_reducer::UpdateUniqueU64Args>(
                    "update_unique_u64",
                    &value.args,
                )?
                .into(),
            ),
            "update_unique_u8" => Ok(
                __sdk::parse_reducer_args::<update_unique_u_8_reducer::UpdateUniqueU8Args>(
                    "update_unique_u8",
                    &value.args,
                )?
                .into(),
            ),
            unknown => Err(__sdk::InternalError::unknown_name("reducer", unknown, "ReducerCallInfo").into()),
        }
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct DbUpdate {
    btree_u_32: __sdk::TableUpdate<BTreeU32>,
    indexed_table: __sdk::TableUpdate<IndexedTable>,
    indexed_table_2: __sdk::TableUpdate<IndexedTable2>,
    large_table: __sdk::TableUpdate<LargeTable>,
    one_bool: __sdk::TableUpdate<OneBool>,
    one_byte_struct: __sdk::TableUpdate<OneByteStruct>,
    one_connection_id: __sdk::TableUpdate<OneConnectionId>,
    one_enum_with_payload: __sdk::TableUpdate<OneEnumWithPayload>,
    one_every_primitive_struct: __sdk::TableUpdate<OneEveryPrimitiveStruct>,
    one_every_vec_struct: __sdk::TableUpdate<OneEveryVecStruct>,
    one_f_32: __sdk::TableUpdate<OneF32>,
    one_f_64: __sdk::TableUpdate<OneF64>,
    one_i_128: __sdk::TableUpdate<OneI128>,
    one_i_16: __sdk::TableUpdate<OneI16>,
    one_i_256: __sdk::TableUpdate<OneI256>,
    one_i_32: __sdk::TableUpdate<OneI32>,
    one_i_64: __sdk::TableUpdate<OneI64>,
    one_i_8: __sdk::TableUpdate<OneI8>,
    one_identity: __sdk::TableUpdate<OneIdentity>,
    one_simple_enum: __sdk::TableUpdate<OneSimpleEnum>,
    one_string: __sdk::TableUpdate<OneString>,
    one_timestamp: __sdk::TableUpdate<OneTimestamp>,
    one_u_128: __sdk::TableUpdate<OneU128>,
    one_u_16: __sdk::TableUpdate<OneU16>,
    one_u_256: __sdk::TableUpdate<OneU256>,
    one_u_32: __sdk::TableUpdate<OneU32>,
    one_u_64: __sdk::TableUpdate<OneU64>,
    one_u_8: __sdk::TableUpdate<OneU8>,
    one_unit_struct: __sdk::TableUpdate<OneUnitStruct>,
    option_every_primitive_struct: __sdk::TableUpdate<OptionEveryPrimitiveStruct>,
    option_i_32: __sdk::TableUpdate<OptionI32>,
    option_identity: __sdk::TableUpdate<OptionIdentity>,
    option_simple_enum: __sdk::TableUpdate<OptionSimpleEnum>,
    option_string: __sdk::TableUpdate<OptionString>,
    option_vec_option_i_32: __sdk::TableUpdate<OptionVecOptionI32>,
    pk_bool: __sdk::TableUpdate<PkBool>,
    pk_connection_id: __sdk::TableUpdate<PkConnectionId>,
    pk_i_128: __sdk::TableUpdate<PkI128>,
    pk_i_16: __sdk::TableUpdate<PkI16>,
    pk_i_256: __sdk::TableUpdate<PkI256>,
    pk_i_32: __sdk::TableUpdate<PkI32>,
    pk_i_64: __sdk::TableUpdate<PkI64>,
    pk_i_8: __sdk::TableUpdate<PkI8>,
    pk_identity: __sdk::TableUpdate<PkIdentity>,
    pk_string: __sdk::TableUpdate<PkString>,
    pk_u_128: __sdk::TableUpdate<PkU128>,
    pk_u_16: __sdk::TableUpdate<PkU16>,
    pk_u_256: __sdk::TableUpdate<PkU256>,
    pk_u_32: __sdk::TableUpdate<PkU32>,
    pk_u_32_two: __sdk::TableUpdate<PkU32Two>,
    pk_u_64: __sdk::TableUpdate<PkU64>,
    pk_u_8: __sdk::TableUpdate<PkU8>,
    scheduled_table: __sdk::TableUpdate<ScheduledTable>,
    table_holds_table: __sdk::TableUpdate<TableHoldsTable>,
    unique_bool: __sdk::TableUpdate<UniqueBool>,
    unique_connection_id: __sdk::TableUpdate<UniqueConnectionId>,
    unique_i_128: __sdk::TableUpdate<UniqueI128>,
    unique_i_16: __sdk::TableUpdate<UniqueI16>,
    unique_i_256: __sdk::TableUpdate<UniqueI256>,
    unique_i_32: __sdk::TableUpdate<UniqueI32>,
    unique_i_64: __sdk::TableUpdate<UniqueI64>,
    unique_i_8: __sdk::TableUpdate<UniqueI8>,
    unique_identity: __sdk::TableUpdate<UniqueIdentity>,
    unique_string: __sdk::TableUpdate<UniqueString>,
    unique_u_128: __sdk::TableUpdate<UniqueU128>,
    unique_u_16: __sdk::TableUpdate<UniqueU16>,
    unique_u_256: __sdk::TableUpdate<UniqueU256>,
    unique_u_32: __sdk::TableUpdate<UniqueU32>,
    unique_u_64: __sdk::TableUpdate<UniqueU64>,
    unique_u_8: __sdk::TableUpdate<UniqueU8>,
    users: __sdk::TableUpdate<Users>,
    vec_bool: __sdk::TableUpdate<VecBool>,
    vec_byte_struct: __sdk::TableUpdate<VecByteStruct>,
    vec_connection_id: __sdk::TableUpdate<VecConnectionId>,
    vec_enum_with_payload: __sdk::TableUpdate<VecEnumWithPayload>,
    vec_every_primitive_struct: __sdk::TableUpdate<VecEveryPrimitiveStruct>,
    vec_every_vec_struct: __sdk::TableUpdate<VecEveryVecStruct>,
    vec_f_32: __sdk::TableUpdate<VecF32>,
    vec_f_64: __sdk::TableUpdate<VecF64>,
    vec_i_128: __sdk::TableUpdate<VecI128>,
    vec_i_16: __sdk::TableUpdate<VecI16>,
    vec_i_256: __sdk::TableUpdate<VecI256>,
    vec_i_32: __sdk::TableUpdate<VecI32>,
    vec_i_64: __sdk::TableUpdate<VecI64>,
    vec_i_8: __sdk::TableUpdate<VecI8>,
    vec_identity: __sdk::TableUpdate<VecIdentity>,
    vec_simple_enum: __sdk::TableUpdate<VecSimpleEnum>,
    vec_string: __sdk::TableUpdate<VecString>,
    vec_timestamp: __sdk::TableUpdate<VecTimestamp>,
    vec_u_128: __sdk::TableUpdate<VecU128>,
    vec_u_16: __sdk::TableUpdate<VecU16>,
    vec_u_256: __sdk::TableUpdate<VecU256>,
    vec_u_32: __sdk::TableUpdate<VecU32>,
    vec_u_64: __sdk::TableUpdate<VecU64>,
    vec_u_8: __sdk::TableUpdate<VecU8>,
    vec_unit_struct: __sdk::TableUpdate<VecUnitStruct>,
}

impl TryFrom<__ws::DatabaseUpdate<__ws::BsatnFormat>> for DbUpdate {
    type Error = __sdk::Error;
    fn try_from(raw: __ws::DatabaseUpdate<__ws::BsatnFormat>) -> Result<Self, Self::Error> {
        let mut db_update = DbUpdate::default();
        for table_update in raw.tables {
            match &table_update.table_name[..] {
                "btree_u32" => db_update.btree_u_32 = btree_u_32_table::parse_table_update(table_update)?,
                "indexed_table" => db_update.indexed_table = indexed_table_table::parse_table_update(table_update)?,
                "indexed_table_2" => {
                    db_update.indexed_table_2 = indexed_table_2_table::parse_table_update(table_update)?
                }
                "large_table" => db_update.large_table = large_table_table::parse_table_update(table_update)?,
                "one_bool" => db_update.one_bool = one_bool_table::parse_table_update(table_update)?,
                "one_byte_struct" => {
                    db_update.one_byte_struct = one_byte_struct_table::parse_table_update(table_update)?
                }
                "one_connection_id" => {
                    db_update.one_connection_id = one_connection_id_table::parse_table_update(table_update)?
                }
                "one_enum_with_payload" => {
                    db_update.one_enum_with_payload = one_enum_with_payload_table::parse_table_update(table_update)?
                }
                "one_every_primitive_struct" => {
                    db_update.one_every_primitive_struct =
                        one_every_primitive_struct_table::parse_table_update(table_update)?
                }
                "one_every_vec_struct" => {
                    db_update.one_every_vec_struct = one_every_vec_struct_table::parse_table_update(table_update)?
                }
                "one_f32" => db_update.one_f_32 = one_f_32_table::parse_table_update(table_update)?,
                "one_f64" => db_update.one_f_64 = one_f_64_table::parse_table_update(table_update)?,
                "one_i128" => db_update.one_i_128 = one_i_128_table::parse_table_update(table_update)?,
                "one_i16" => db_update.one_i_16 = one_i_16_table::parse_table_update(table_update)?,
                "one_i256" => db_update.one_i_256 = one_i_256_table::parse_table_update(table_update)?,
                "one_i32" => db_update.one_i_32 = one_i_32_table::parse_table_update(table_update)?,
                "one_i64" => db_update.one_i_64 = one_i_64_table::parse_table_update(table_update)?,
                "one_i8" => db_update.one_i_8 = one_i_8_table::parse_table_update(table_update)?,
                "one_identity" => db_update.one_identity = one_identity_table::parse_table_update(table_update)?,
                "one_simple_enum" => {
                    db_update.one_simple_enum = one_simple_enum_table::parse_table_update(table_update)?
                }
                "one_string" => db_update.one_string = one_string_table::parse_table_update(table_update)?,
                "one_timestamp" => db_update.one_timestamp = one_timestamp_table::parse_table_update(table_update)?,
                "one_u128" => db_update.one_u_128 = one_u_128_table::parse_table_update(table_update)?,
                "one_u16" => db_update.one_u_16 = one_u_16_table::parse_table_update(table_update)?,
                "one_u256" => db_update.one_u_256 = one_u_256_table::parse_table_update(table_update)?,
                "one_u32" => db_update.one_u_32 = one_u_32_table::parse_table_update(table_update)?,
                "one_u64" => db_update.one_u_64 = one_u_64_table::parse_table_update(table_update)?,
                "one_u8" => db_update.one_u_8 = one_u_8_table::parse_table_update(table_update)?,
                "one_unit_struct" => {
                    db_update.one_unit_struct = one_unit_struct_table::parse_table_update(table_update)?
                }
                "option_every_primitive_struct" => {
                    db_update.option_every_primitive_struct =
                        option_every_primitive_struct_table::parse_table_update(table_update)?
                }
                "option_i32" => db_update.option_i_32 = option_i_32_table::parse_table_update(table_update)?,
                "option_identity" => {
                    db_update.option_identity = option_identity_table::parse_table_update(table_update)?
                }
                "option_simple_enum" => {
                    db_update.option_simple_enum = option_simple_enum_table::parse_table_update(table_update)?
                }
                "option_string" => db_update.option_string = option_string_table::parse_table_update(table_update)?,
                "option_vec_option_i32" => {
                    db_update.option_vec_option_i_32 = option_vec_option_i_32_table::parse_table_update(table_update)?
                }
                "pk_bool" => db_update.pk_bool = pk_bool_table::parse_table_update(table_update)?,
                "pk_connection_id" => {
                    db_update.pk_connection_id = pk_connection_id_table::parse_table_update(table_update)?
                }
                "pk_i128" => db_update.pk_i_128 = pk_i_128_table::parse_table_update(table_update)?,
                "pk_i16" => db_update.pk_i_16 = pk_i_16_table::parse_table_update(table_update)?,
                "pk_i256" => db_update.pk_i_256 = pk_i_256_table::parse_table_update(table_update)?,
                "pk_i32" => db_update.pk_i_32 = pk_i_32_table::parse_table_update(table_update)?,
                "pk_i64" => db_update.pk_i_64 = pk_i_64_table::parse_table_update(table_update)?,
                "pk_i8" => db_update.pk_i_8 = pk_i_8_table::parse_table_update(table_update)?,
                "pk_identity" => db_update.pk_identity = pk_identity_table::parse_table_update(table_update)?,
                "pk_string" => db_update.pk_string = pk_string_table::parse_table_update(table_update)?,
                "pk_u128" => db_update.pk_u_128 = pk_u_128_table::parse_table_update(table_update)?,
                "pk_u16" => db_update.pk_u_16 = pk_u_16_table::parse_table_update(table_update)?,
                "pk_u256" => db_update.pk_u_256 = pk_u_256_table::parse_table_update(table_update)?,
                "pk_u32" => db_update.pk_u_32 = pk_u_32_table::parse_table_update(table_update)?,
                "pk_u32_two" => db_update.pk_u_32_two = pk_u_32_two_table::parse_table_update(table_update)?,
                "pk_u64" => db_update.pk_u_64 = pk_u_64_table::parse_table_update(table_update)?,
                "pk_u8" => db_update.pk_u_8 = pk_u_8_table::parse_table_update(table_update)?,
                "scheduled_table" => {
                    db_update.scheduled_table = scheduled_table_table::parse_table_update(table_update)?
                }
                "table_holds_table" => {
                    db_update.table_holds_table = table_holds_table_table::parse_table_update(table_update)?
                }
                "unique_bool" => db_update.unique_bool = unique_bool_table::parse_table_update(table_update)?,
                "unique_connection_id" => {
                    db_update.unique_connection_id = unique_connection_id_table::parse_table_update(table_update)?
                }
                "unique_i128" => db_update.unique_i_128 = unique_i_128_table::parse_table_update(table_update)?,
                "unique_i16" => db_update.unique_i_16 = unique_i_16_table::parse_table_update(table_update)?,
                "unique_i256" => db_update.unique_i_256 = unique_i_256_table::parse_table_update(table_update)?,
                "unique_i32" => db_update.unique_i_32 = unique_i_32_table::parse_table_update(table_update)?,
                "unique_i64" => db_update.unique_i_64 = unique_i_64_table::parse_table_update(table_update)?,
                "unique_i8" => db_update.unique_i_8 = unique_i_8_table::parse_table_update(table_update)?,
                "unique_identity" => {
                    db_update.unique_identity = unique_identity_table::parse_table_update(table_update)?
                }
                "unique_string" => db_update.unique_string = unique_string_table::parse_table_update(table_update)?,
                "unique_u128" => db_update.unique_u_128 = unique_u_128_table::parse_table_update(table_update)?,
                "unique_u16" => db_update.unique_u_16 = unique_u_16_table::parse_table_update(table_update)?,
                "unique_u256" => db_update.unique_u_256 = unique_u_256_table::parse_table_update(table_update)?,
                "unique_u32" => db_update.unique_u_32 = unique_u_32_table::parse_table_update(table_update)?,
                "unique_u64" => db_update.unique_u_64 = unique_u_64_table::parse_table_update(table_update)?,
                "unique_u8" => db_update.unique_u_8 = unique_u_8_table::parse_table_update(table_update)?,
                "users" => db_update.users = users_table::parse_table_update(table_update)?,
                "vec_bool" => db_update.vec_bool = vec_bool_table::parse_table_update(table_update)?,
                "vec_byte_struct" => {
                    db_update.vec_byte_struct = vec_byte_struct_table::parse_table_update(table_update)?
                }
                "vec_connection_id" => {
                    db_update.vec_connection_id = vec_connection_id_table::parse_table_update(table_update)?
                }
                "vec_enum_with_payload" => {
                    db_update.vec_enum_with_payload = vec_enum_with_payload_table::parse_table_update(table_update)?
                }
                "vec_every_primitive_struct" => {
                    db_update.vec_every_primitive_struct =
                        vec_every_primitive_struct_table::parse_table_update(table_update)?
                }
                "vec_every_vec_struct" => {
                    db_update.vec_every_vec_struct = vec_every_vec_struct_table::parse_table_update(table_update)?
                }
                "vec_f32" => db_update.vec_f_32 = vec_f_32_table::parse_table_update(table_update)?,
                "vec_f64" => db_update.vec_f_64 = vec_f_64_table::parse_table_update(table_update)?,
                "vec_i128" => db_update.vec_i_128 = vec_i_128_table::parse_table_update(table_update)?,
                "vec_i16" => db_update.vec_i_16 = vec_i_16_table::parse_table_update(table_update)?,
                "vec_i256" => db_update.vec_i_256 = vec_i_256_table::parse_table_update(table_update)?,
                "vec_i32" => db_update.vec_i_32 = vec_i_32_table::parse_table_update(table_update)?,
                "vec_i64" => db_update.vec_i_64 = vec_i_64_table::parse_table_update(table_update)?,
                "vec_i8" => db_update.vec_i_8 = vec_i_8_table::parse_table_update(table_update)?,
                "vec_identity" => db_update.vec_identity = vec_identity_table::parse_table_update(table_update)?,
                "vec_simple_enum" => {
                    db_update.vec_simple_enum = vec_simple_enum_table::parse_table_update(table_update)?
                }
                "vec_string" => db_update.vec_string = vec_string_table::parse_table_update(table_update)?,
                "vec_timestamp" => db_update.vec_timestamp = vec_timestamp_table::parse_table_update(table_update)?,
                "vec_u128" => db_update.vec_u_128 = vec_u_128_table::parse_table_update(table_update)?,
                "vec_u16" => db_update.vec_u_16 = vec_u_16_table::parse_table_update(table_update)?,
                "vec_u256" => db_update.vec_u_256 = vec_u_256_table::parse_table_update(table_update)?,
                "vec_u32" => db_update.vec_u_32 = vec_u_32_table::parse_table_update(table_update)?,
                "vec_u64" => db_update.vec_u_64 = vec_u_64_table::parse_table_update(table_update)?,
                "vec_u8" => db_update.vec_u_8 = vec_u_8_table::parse_table_update(table_update)?,
                "vec_unit_struct" => {
                    db_update.vec_unit_struct = vec_unit_struct_table::parse_table_update(table_update)?
                }

                unknown => {
                    return Err(__sdk::InternalError::unknown_name("table", unknown, "DatabaseUpdate").into());
                }
            }
        }
        Ok(db_update)
    }
}

impl __sdk::InModule for DbUpdate {
    type Module = RemoteModule;
}

impl __sdk::DbUpdate for DbUpdate {
    fn apply_to_client_cache(&self, cache: &mut __sdk::ClientCache<RemoteModule>) -> AppliedDiff<'_> {
        let mut diff = AppliedDiff::default();

        diff.btree_u_32 = cache.apply_diff_to_table::<BTreeU32>("btree_u32", &self.btree_u_32);
        diff.indexed_table = cache.apply_diff_to_table::<IndexedTable>("indexed_table", &self.indexed_table);
        diff.indexed_table_2 = cache.apply_diff_to_table::<IndexedTable2>("indexed_table_2", &self.indexed_table_2);
        diff.large_table = cache.apply_diff_to_table::<LargeTable>("large_table", &self.large_table);
        diff.one_bool = cache.apply_diff_to_table::<OneBool>("one_bool", &self.one_bool);
        diff.one_byte_struct = cache.apply_diff_to_table::<OneByteStruct>("one_byte_struct", &self.one_byte_struct);
        diff.one_connection_id =
            cache.apply_diff_to_table::<OneConnectionId>("one_connection_id", &self.one_connection_id);
        diff.one_enum_with_payload =
            cache.apply_diff_to_table::<OneEnumWithPayload>("one_enum_with_payload", &self.one_enum_with_payload);
        diff.one_every_primitive_struct = cache.apply_diff_to_table::<OneEveryPrimitiveStruct>(
            "one_every_primitive_struct",
            &self.one_every_primitive_struct,
        );
        diff.one_every_vec_struct =
            cache.apply_diff_to_table::<OneEveryVecStruct>("one_every_vec_struct", &self.one_every_vec_struct);
        diff.one_f_32 = cache.apply_diff_to_table::<OneF32>("one_f32", &self.one_f_32);
        diff.one_f_64 = cache.apply_diff_to_table::<OneF64>("one_f64", &self.one_f_64);
        diff.one_i_128 = cache.apply_diff_to_table::<OneI128>("one_i128", &self.one_i_128);
        diff.one_i_16 = cache.apply_diff_to_table::<OneI16>("one_i16", &self.one_i_16);
        diff.one_i_256 = cache.apply_diff_to_table::<OneI256>("one_i256", &self.one_i_256);
        diff.one_i_32 = cache.apply_diff_to_table::<OneI32>("one_i32", &self.one_i_32);
        diff.one_i_64 = cache.apply_diff_to_table::<OneI64>("one_i64", &self.one_i_64);
        diff.one_i_8 = cache.apply_diff_to_table::<OneI8>("one_i8", &self.one_i_8);
        diff.one_identity = cache.apply_diff_to_table::<OneIdentity>("one_identity", &self.one_identity);
        diff.one_simple_enum = cache.apply_diff_to_table::<OneSimpleEnum>("one_simple_enum", &self.one_simple_enum);
        diff.one_string = cache.apply_diff_to_table::<OneString>("one_string", &self.one_string);
        diff.one_timestamp = cache.apply_diff_to_table::<OneTimestamp>("one_timestamp", &self.one_timestamp);
        diff.one_u_128 = cache.apply_diff_to_table::<OneU128>("one_u128", &self.one_u_128);
        diff.one_u_16 = cache.apply_diff_to_table::<OneU16>("one_u16", &self.one_u_16);
        diff.one_u_256 = cache.apply_diff_to_table::<OneU256>("one_u256", &self.one_u_256);
        diff.one_u_32 = cache.apply_diff_to_table::<OneU32>("one_u32", &self.one_u_32);
        diff.one_u_64 = cache.apply_diff_to_table::<OneU64>("one_u64", &self.one_u_64);
        diff.one_u_8 = cache.apply_diff_to_table::<OneU8>("one_u8", &self.one_u_8);
        diff.one_unit_struct = cache.apply_diff_to_table::<OneUnitStruct>("one_unit_struct", &self.one_unit_struct);
        diff.option_every_primitive_struct = cache.apply_diff_to_table::<OptionEveryPrimitiveStruct>(
            "option_every_primitive_struct",
            &self.option_every_primitive_struct,
        );
        diff.option_i_32 = cache.apply_diff_to_table::<OptionI32>("option_i32", &self.option_i_32);
        diff.option_identity = cache.apply_diff_to_table::<OptionIdentity>("option_identity", &self.option_identity);
        diff.option_simple_enum =
            cache.apply_diff_to_table::<OptionSimpleEnum>("option_simple_enum", &self.option_simple_enum);
        diff.option_string = cache.apply_diff_to_table::<OptionString>("option_string", &self.option_string);
        diff.option_vec_option_i_32 =
            cache.apply_diff_to_table::<OptionVecOptionI32>("option_vec_option_i32", &self.option_vec_option_i_32);
        diff.pk_bool = cache
            .apply_diff_to_table::<PkBool>("pk_bool", &self.pk_bool)
            .with_updates_by_pk(|row| &row.b);
        diff.pk_connection_id = cache
            .apply_diff_to_table::<PkConnectionId>("pk_connection_id", &self.pk_connection_id)
            .with_updates_by_pk(|row| &row.a);
        diff.pk_i_128 = cache
            .apply_diff_to_table::<PkI128>("pk_i128", &self.pk_i_128)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_i_16 = cache
            .apply_diff_to_table::<PkI16>("pk_i16", &self.pk_i_16)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_i_256 = cache
            .apply_diff_to_table::<PkI256>("pk_i256", &self.pk_i_256)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_i_32 = cache
            .apply_diff_to_table::<PkI32>("pk_i32", &self.pk_i_32)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_i_64 = cache
            .apply_diff_to_table::<PkI64>("pk_i64", &self.pk_i_64)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_i_8 = cache
            .apply_diff_to_table::<PkI8>("pk_i8", &self.pk_i_8)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_identity = cache
            .apply_diff_to_table::<PkIdentity>("pk_identity", &self.pk_identity)
            .with_updates_by_pk(|row| &row.i);
        diff.pk_string = cache
            .apply_diff_to_table::<PkString>("pk_string", &self.pk_string)
            .with_updates_by_pk(|row| &row.s);
        diff.pk_u_128 = cache
            .apply_diff_to_table::<PkU128>("pk_u128", &self.pk_u_128)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_u_16 = cache
            .apply_diff_to_table::<PkU16>("pk_u16", &self.pk_u_16)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_u_256 = cache
            .apply_diff_to_table::<PkU256>("pk_u256", &self.pk_u_256)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_u_32 = cache
            .apply_diff_to_table::<PkU32>("pk_u32", &self.pk_u_32)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_u_32_two = cache
            .apply_diff_to_table::<PkU32Two>("pk_u32_two", &self.pk_u_32_two)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_u_64 = cache
            .apply_diff_to_table::<PkU64>("pk_u64", &self.pk_u_64)
            .with_updates_by_pk(|row| &row.n);
        diff.pk_u_8 = cache
            .apply_diff_to_table::<PkU8>("pk_u8", &self.pk_u_8)
            .with_updates_by_pk(|row| &row.n);
        diff.scheduled_table = cache
            .apply_diff_to_table::<ScheduledTable>("scheduled_table", &self.scheduled_table)
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.table_holds_table =
            cache.apply_diff_to_table::<TableHoldsTable>("table_holds_table", &self.table_holds_table);
        diff.unique_bool = cache.apply_diff_to_table::<UniqueBool>("unique_bool", &self.unique_bool);
        diff.unique_connection_id =
            cache.apply_diff_to_table::<UniqueConnectionId>("unique_connection_id", &self.unique_connection_id);
        diff.unique_i_128 = cache.apply_diff_to_table::<UniqueI128>("unique_i128", &self.unique_i_128);
        diff.unique_i_16 = cache.apply_diff_to_table::<UniqueI16>("unique_i16", &self.unique_i_16);
        diff.unique_i_256 = cache.apply_diff_to_table::<UniqueI256>("unique_i256", &self.unique_i_256);
        diff.unique_i_32 = cache.apply_diff_to_table::<UniqueI32>("unique_i32", &self.unique_i_32);
        diff.unique_i_64 = cache.apply_diff_to_table::<UniqueI64>("unique_i64", &self.unique_i_64);
        diff.unique_i_8 = cache.apply_diff_to_table::<UniqueI8>("unique_i8", &self.unique_i_8);
        diff.unique_identity = cache.apply_diff_to_table::<UniqueIdentity>("unique_identity", &self.unique_identity);
        diff.unique_string = cache.apply_diff_to_table::<UniqueString>("unique_string", &self.unique_string);
        diff.unique_u_128 = cache.apply_diff_to_table::<UniqueU128>("unique_u128", &self.unique_u_128);
        diff.unique_u_16 = cache.apply_diff_to_table::<UniqueU16>("unique_u16", &self.unique_u_16);
        diff.unique_u_256 = cache.apply_diff_to_table::<UniqueU256>("unique_u256", &self.unique_u_256);
        diff.unique_u_32 = cache.apply_diff_to_table::<UniqueU32>("unique_u32", &self.unique_u_32);
        diff.unique_u_64 = cache.apply_diff_to_table::<UniqueU64>("unique_u64", &self.unique_u_64);
        diff.unique_u_8 = cache.apply_diff_to_table::<UniqueU8>("unique_u8", &self.unique_u_8);
        diff.users = cache
            .apply_diff_to_table::<Users>("users", &self.users)
            .with_updates_by_pk(|row| &row.identity);
        diff.vec_bool = cache.apply_diff_to_table::<VecBool>("vec_bool", &self.vec_bool);
        diff.vec_byte_struct = cache.apply_diff_to_table::<VecByteStruct>("vec_byte_struct", &self.vec_byte_struct);
        diff.vec_connection_id =
            cache.apply_diff_to_table::<VecConnectionId>("vec_connection_id", &self.vec_connection_id);
        diff.vec_enum_with_payload =
            cache.apply_diff_to_table::<VecEnumWithPayload>("vec_enum_with_payload", &self.vec_enum_with_payload);
        diff.vec_every_primitive_struct = cache.apply_diff_to_table::<VecEveryPrimitiveStruct>(
            "vec_every_primitive_struct",
            &self.vec_every_primitive_struct,
        );
        diff.vec_every_vec_struct =
            cache.apply_diff_to_table::<VecEveryVecStruct>("vec_every_vec_struct", &self.vec_every_vec_struct);
        diff.vec_f_32 = cache.apply_diff_to_table::<VecF32>("vec_f32", &self.vec_f_32);
        diff.vec_f_64 = cache.apply_diff_to_table::<VecF64>("vec_f64", &self.vec_f_64);
        diff.vec_i_128 = cache.apply_diff_to_table::<VecI128>("vec_i128", &self.vec_i_128);
        diff.vec_i_16 = cache.apply_diff_to_table::<VecI16>("vec_i16", &self.vec_i_16);
        diff.vec_i_256 = cache.apply_diff_to_table::<VecI256>("vec_i256", &self.vec_i_256);
        diff.vec_i_32 = cache.apply_diff_to_table::<VecI32>("vec_i32", &self.vec_i_32);
        diff.vec_i_64 = cache.apply_diff_to_table::<VecI64>("vec_i64", &self.vec_i_64);
        diff.vec_i_8 = cache.apply_diff_to_table::<VecI8>("vec_i8", &self.vec_i_8);
        diff.vec_identity = cache.apply_diff_to_table::<VecIdentity>("vec_identity", &self.vec_identity);
        diff.vec_simple_enum = cache.apply_diff_to_table::<VecSimpleEnum>("vec_simple_enum", &self.vec_simple_enum);
        diff.vec_string = cache.apply_diff_to_table::<VecString>("vec_string", &self.vec_string);
        diff.vec_timestamp = cache.apply_diff_to_table::<VecTimestamp>("vec_timestamp", &self.vec_timestamp);
        diff.vec_u_128 = cache.apply_diff_to_table::<VecU128>("vec_u128", &self.vec_u_128);
        diff.vec_u_16 = cache.apply_diff_to_table::<VecU16>("vec_u16", &self.vec_u_16);
        diff.vec_u_256 = cache.apply_diff_to_table::<VecU256>("vec_u256", &self.vec_u_256);
        diff.vec_u_32 = cache.apply_diff_to_table::<VecU32>("vec_u32", &self.vec_u_32);
        diff.vec_u_64 = cache.apply_diff_to_table::<VecU64>("vec_u64", &self.vec_u_64);
        diff.vec_u_8 = cache.apply_diff_to_table::<VecU8>("vec_u8", &self.vec_u_8);
        diff.vec_unit_struct = cache.apply_diff_to_table::<VecUnitStruct>("vec_unit_struct", &self.vec_unit_struct);

        diff
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct AppliedDiff<'r> {
    btree_u_32: __sdk::TableAppliedDiff<'r, BTreeU32>,
    indexed_table: __sdk::TableAppliedDiff<'r, IndexedTable>,
    indexed_table_2: __sdk::TableAppliedDiff<'r, IndexedTable2>,
    large_table: __sdk::TableAppliedDiff<'r, LargeTable>,
    one_bool: __sdk::TableAppliedDiff<'r, OneBool>,
    one_byte_struct: __sdk::TableAppliedDiff<'r, OneByteStruct>,
    one_connection_id: __sdk::TableAppliedDiff<'r, OneConnectionId>,
    one_enum_with_payload: __sdk::TableAppliedDiff<'r, OneEnumWithPayload>,
    one_every_primitive_struct: __sdk::TableAppliedDiff<'r, OneEveryPrimitiveStruct>,
    one_every_vec_struct: __sdk::TableAppliedDiff<'r, OneEveryVecStruct>,
    one_f_32: __sdk::TableAppliedDiff<'r, OneF32>,
    one_f_64: __sdk::TableAppliedDiff<'r, OneF64>,
    one_i_128: __sdk::TableAppliedDiff<'r, OneI128>,
    one_i_16: __sdk::TableAppliedDiff<'r, OneI16>,
    one_i_256: __sdk::TableAppliedDiff<'r, OneI256>,
    one_i_32: __sdk::TableAppliedDiff<'r, OneI32>,
    one_i_64: __sdk::TableAppliedDiff<'r, OneI64>,
    one_i_8: __sdk::TableAppliedDiff<'r, OneI8>,
    one_identity: __sdk::TableAppliedDiff<'r, OneIdentity>,
    one_simple_enum: __sdk::TableAppliedDiff<'r, OneSimpleEnum>,
    one_string: __sdk::TableAppliedDiff<'r, OneString>,
    one_timestamp: __sdk::TableAppliedDiff<'r, OneTimestamp>,
    one_u_128: __sdk::TableAppliedDiff<'r, OneU128>,
    one_u_16: __sdk::TableAppliedDiff<'r, OneU16>,
    one_u_256: __sdk::TableAppliedDiff<'r, OneU256>,
    one_u_32: __sdk::TableAppliedDiff<'r, OneU32>,
    one_u_64: __sdk::TableAppliedDiff<'r, OneU64>,
    one_u_8: __sdk::TableAppliedDiff<'r, OneU8>,
    one_unit_struct: __sdk::TableAppliedDiff<'r, OneUnitStruct>,
    option_every_primitive_struct: __sdk::TableAppliedDiff<'r, OptionEveryPrimitiveStruct>,
    option_i_32: __sdk::TableAppliedDiff<'r, OptionI32>,
    option_identity: __sdk::TableAppliedDiff<'r, OptionIdentity>,
    option_simple_enum: __sdk::TableAppliedDiff<'r, OptionSimpleEnum>,
    option_string: __sdk::TableAppliedDiff<'r, OptionString>,
    option_vec_option_i_32: __sdk::TableAppliedDiff<'r, OptionVecOptionI32>,
    pk_bool: __sdk::TableAppliedDiff<'r, PkBool>,
    pk_connection_id: __sdk::TableAppliedDiff<'r, PkConnectionId>,
    pk_i_128: __sdk::TableAppliedDiff<'r, PkI128>,
    pk_i_16: __sdk::TableAppliedDiff<'r, PkI16>,
    pk_i_256: __sdk::TableAppliedDiff<'r, PkI256>,
    pk_i_32: __sdk::TableAppliedDiff<'r, PkI32>,
    pk_i_64: __sdk::TableAppliedDiff<'r, PkI64>,
    pk_i_8: __sdk::TableAppliedDiff<'r, PkI8>,
    pk_identity: __sdk::TableAppliedDiff<'r, PkIdentity>,
    pk_string: __sdk::TableAppliedDiff<'r, PkString>,
    pk_u_128: __sdk::TableAppliedDiff<'r, PkU128>,
    pk_u_16: __sdk::TableAppliedDiff<'r, PkU16>,
    pk_u_256: __sdk::TableAppliedDiff<'r, PkU256>,
    pk_u_32: __sdk::TableAppliedDiff<'r, PkU32>,
    pk_u_32_two: __sdk::TableAppliedDiff<'r, PkU32Two>,
    pk_u_64: __sdk::TableAppliedDiff<'r, PkU64>,
    pk_u_8: __sdk::TableAppliedDiff<'r, PkU8>,
    scheduled_table: __sdk::TableAppliedDiff<'r, ScheduledTable>,
    table_holds_table: __sdk::TableAppliedDiff<'r, TableHoldsTable>,
    unique_bool: __sdk::TableAppliedDiff<'r, UniqueBool>,
    unique_connection_id: __sdk::TableAppliedDiff<'r, UniqueConnectionId>,
    unique_i_128: __sdk::TableAppliedDiff<'r, UniqueI128>,
    unique_i_16: __sdk::TableAppliedDiff<'r, UniqueI16>,
    unique_i_256: __sdk::TableAppliedDiff<'r, UniqueI256>,
    unique_i_32: __sdk::TableAppliedDiff<'r, UniqueI32>,
    unique_i_64: __sdk::TableAppliedDiff<'r, UniqueI64>,
    unique_i_8: __sdk::TableAppliedDiff<'r, UniqueI8>,
    unique_identity: __sdk::TableAppliedDiff<'r, UniqueIdentity>,
    unique_string: __sdk::TableAppliedDiff<'r, UniqueString>,
    unique_u_128: __sdk::TableAppliedDiff<'r, UniqueU128>,
    unique_u_16: __sdk::TableAppliedDiff<'r, UniqueU16>,
    unique_u_256: __sdk::TableAppliedDiff<'r, UniqueU256>,
    unique_u_32: __sdk::TableAppliedDiff<'r, UniqueU32>,
    unique_u_64: __sdk::TableAppliedDiff<'r, UniqueU64>,
    unique_u_8: __sdk::TableAppliedDiff<'r, UniqueU8>,
    users: __sdk::TableAppliedDiff<'r, Users>,
    vec_bool: __sdk::TableAppliedDiff<'r, VecBool>,
    vec_byte_struct: __sdk::TableAppliedDiff<'r, VecByteStruct>,
    vec_connection_id: __sdk::TableAppliedDiff<'r, VecConnectionId>,
    vec_enum_with_payload: __sdk::TableAppliedDiff<'r, VecEnumWithPayload>,
    vec_every_primitive_struct: __sdk::TableAppliedDiff<'r, VecEveryPrimitiveStruct>,
    vec_every_vec_struct: __sdk::TableAppliedDiff<'r, VecEveryVecStruct>,
    vec_f_32: __sdk::TableAppliedDiff<'r, VecF32>,
    vec_f_64: __sdk::TableAppliedDiff<'r, VecF64>,
    vec_i_128: __sdk::TableAppliedDiff<'r, VecI128>,
    vec_i_16: __sdk::TableAppliedDiff<'r, VecI16>,
    vec_i_256: __sdk::TableAppliedDiff<'r, VecI256>,
    vec_i_32: __sdk::TableAppliedDiff<'r, VecI32>,
    vec_i_64: __sdk::TableAppliedDiff<'r, VecI64>,
    vec_i_8: __sdk::TableAppliedDiff<'r, VecI8>,
    vec_identity: __sdk::TableAppliedDiff<'r, VecIdentity>,
    vec_simple_enum: __sdk::TableAppliedDiff<'r, VecSimpleEnum>,
    vec_string: __sdk::TableAppliedDiff<'r, VecString>,
    vec_timestamp: __sdk::TableAppliedDiff<'r, VecTimestamp>,
    vec_u_128: __sdk::TableAppliedDiff<'r, VecU128>,
    vec_u_16: __sdk::TableAppliedDiff<'r, VecU16>,
    vec_u_256: __sdk::TableAppliedDiff<'r, VecU256>,
    vec_u_32: __sdk::TableAppliedDiff<'r, VecU32>,
    vec_u_64: __sdk::TableAppliedDiff<'r, VecU64>,
    vec_u_8: __sdk::TableAppliedDiff<'r, VecU8>,
    vec_unit_struct: __sdk::TableAppliedDiff<'r, VecUnitStruct>,
}

impl __sdk::InModule for AppliedDiff<'_> {
    type Module = RemoteModule;
}

impl<'r> __sdk::AppliedDiff<'r> for AppliedDiff<'r> {
    fn invoke_row_callbacks(&self, event: &EventContext, callbacks: &mut __sdk::DbCallbacks<RemoteModule>) {
        callbacks.invoke_table_row_callbacks::<BTreeU32>("btree_u32", &self.btree_u_32, event);
        callbacks.invoke_table_row_callbacks::<IndexedTable>("indexed_table", &self.indexed_table, event);
        callbacks.invoke_table_row_callbacks::<IndexedTable2>("indexed_table_2", &self.indexed_table_2, event);
        callbacks.invoke_table_row_callbacks::<LargeTable>("large_table", &self.large_table, event);
        callbacks.invoke_table_row_callbacks::<OneBool>("one_bool", &self.one_bool, event);
        callbacks.invoke_table_row_callbacks::<OneByteStruct>("one_byte_struct", &self.one_byte_struct, event);
        callbacks.invoke_table_row_callbacks::<OneConnectionId>("one_connection_id", &self.one_connection_id, event);
        callbacks.invoke_table_row_callbacks::<OneEnumWithPayload>(
            "one_enum_with_payload",
            &self.one_enum_with_payload,
            event,
        );
        callbacks.invoke_table_row_callbacks::<OneEveryPrimitiveStruct>(
            "one_every_primitive_struct",
            &self.one_every_primitive_struct,
            event,
        );
        callbacks.invoke_table_row_callbacks::<OneEveryVecStruct>(
            "one_every_vec_struct",
            &self.one_every_vec_struct,
            event,
        );
        callbacks.invoke_table_row_callbacks::<OneF32>("one_f32", &self.one_f_32, event);
        callbacks.invoke_table_row_callbacks::<OneF64>("one_f64", &self.one_f_64, event);
        callbacks.invoke_table_row_callbacks::<OneI128>("one_i128", &self.one_i_128, event);
        callbacks.invoke_table_row_callbacks::<OneI16>("one_i16", &self.one_i_16, event);
        callbacks.invoke_table_row_callbacks::<OneI256>("one_i256", &self.one_i_256, event);
        callbacks.invoke_table_row_callbacks::<OneI32>("one_i32", &self.one_i_32, event);
        callbacks.invoke_table_row_callbacks::<OneI64>("one_i64", &self.one_i_64, event);
        callbacks.invoke_table_row_callbacks::<OneI8>("one_i8", &self.one_i_8, event);
        callbacks.invoke_table_row_callbacks::<OneIdentity>("one_identity", &self.one_identity, event);
        callbacks.invoke_table_row_callbacks::<OneSimpleEnum>("one_simple_enum", &self.one_simple_enum, event);
        callbacks.invoke_table_row_callbacks::<OneString>("one_string", &self.one_string, event);
        callbacks.invoke_table_row_callbacks::<OneTimestamp>("one_timestamp", &self.one_timestamp, event);
        callbacks.invoke_table_row_callbacks::<OneU128>("one_u128", &self.one_u_128, event);
        callbacks.invoke_table_row_callbacks::<OneU16>("one_u16", &self.one_u_16, event);
        callbacks.invoke_table_row_callbacks::<OneU256>("one_u256", &self.one_u_256, event);
        callbacks.invoke_table_row_callbacks::<OneU32>("one_u32", &self.one_u_32, event);
        callbacks.invoke_table_row_callbacks::<OneU64>("one_u64", &self.one_u_64, event);
        callbacks.invoke_table_row_callbacks::<OneU8>("one_u8", &self.one_u_8, event);
        callbacks.invoke_table_row_callbacks::<OneUnitStruct>("one_unit_struct", &self.one_unit_struct, event);
        callbacks.invoke_table_row_callbacks::<OptionEveryPrimitiveStruct>(
            "option_every_primitive_struct",
            &self.option_every_primitive_struct,
            event,
        );
        callbacks.invoke_table_row_callbacks::<OptionI32>("option_i32", &self.option_i_32, event);
        callbacks.invoke_table_row_callbacks::<OptionIdentity>("option_identity", &self.option_identity, event);
        callbacks.invoke_table_row_callbacks::<OptionSimpleEnum>("option_simple_enum", &self.option_simple_enum, event);
        callbacks.invoke_table_row_callbacks::<OptionString>("option_string", &self.option_string, event);
        callbacks.invoke_table_row_callbacks::<OptionVecOptionI32>(
            "option_vec_option_i32",
            &self.option_vec_option_i_32,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PkBool>("pk_bool", &self.pk_bool, event);
        callbacks.invoke_table_row_callbacks::<PkConnectionId>("pk_connection_id", &self.pk_connection_id, event);
        callbacks.invoke_table_row_callbacks::<PkI128>("pk_i128", &self.pk_i_128, event);
        callbacks.invoke_table_row_callbacks::<PkI16>("pk_i16", &self.pk_i_16, event);
        callbacks.invoke_table_row_callbacks::<PkI256>("pk_i256", &self.pk_i_256, event);
        callbacks.invoke_table_row_callbacks::<PkI32>("pk_i32", &self.pk_i_32, event);
        callbacks.invoke_table_row_callbacks::<PkI64>("pk_i64", &self.pk_i_64, event);
        callbacks.invoke_table_row_callbacks::<PkI8>("pk_i8", &self.pk_i_8, event);
        callbacks.invoke_table_row_callbacks::<PkIdentity>("pk_identity", &self.pk_identity, event);
        callbacks.invoke_table_row_callbacks::<PkString>("pk_string", &self.pk_string, event);
        callbacks.invoke_table_row_callbacks::<PkU128>("pk_u128", &self.pk_u_128, event);
        callbacks.invoke_table_row_callbacks::<PkU16>("pk_u16", &self.pk_u_16, event);
        callbacks.invoke_table_row_callbacks::<PkU256>("pk_u256", &self.pk_u_256, event);
        callbacks.invoke_table_row_callbacks::<PkU32>("pk_u32", &self.pk_u_32, event);
        callbacks.invoke_table_row_callbacks::<PkU32Two>("pk_u32_two", &self.pk_u_32_two, event);
        callbacks.invoke_table_row_callbacks::<PkU64>("pk_u64", &self.pk_u_64, event);
        callbacks.invoke_table_row_callbacks::<PkU8>("pk_u8", &self.pk_u_8, event);
        callbacks.invoke_table_row_callbacks::<ScheduledTable>("scheduled_table", &self.scheduled_table, event);
        callbacks.invoke_table_row_callbacks::<TableHoldsTable>("table_holds_table", &self.table_holds_table, event);
        callbacks.invoke_table_row_callbacks::<UniqueBool>("unique_bool", &self.unique_bool, event);
        callbacks.invoke_table_row_callbacks::<UniqueConnectionId>(
            "unique_connection_id",
            &self.unique_connection_id,
            event,
        );
        callbacks.invoke_table_row_callbacks::<UniqueI128>("unique_i128", &self.unique_i_128, event);
        callbacks.invoke_table_row_callbacks::<UniqueI16>("unique_i16", &self.unique_i_16, event);
        callbacks.invoke_table_row_callbacks::<UniqueI256>("unique_i256", &self.unique_i_256, event);
        callbacks.invoke_table_row_callbacks::<UniqueI32>("unique_i32", &self.unique_i_32, event);
        callbacks.invoke_table_row_callbacks::<UniqueI64>("unique_i64", &self.unique_i_64, event);
        callbacks.invoke_table_row_callbacks::<UniqueI8>("unique_i8", &self.unique_i_8, event);
        callbacks.invoke_table_row_callbacks::<UniqueIdentity>("unique_identity", &self.unique_identity, event);
        callbacks.invoke_table_row_callbacks::<UniqueString>("unique_string", &self.unique_string, event);
        callbacks.invoke_table_row_callbacks::<UniqueU128>("unique_u128", &self.unique_u_128, event);
        callbacks.invoke_table_row_callbacks::<UniqueU16>("unique_u16", &self.unique_u_16, event);
        callbacks.invoke_table_row_callbacks::<UniqueU256>("unique_u256", &self.unique_u_256, event);
        callbacks.invoke_table_row_callbacks::<UniqueU32>("unique_u32", &self.unique_u_32, event);
        callbacks.invoke_table_row_callbacks::<UniqueU64>("unique_u64", &self.unique_u_64, event);
        callbacks.invoke_table_row_callbacks::<UniqueU8>("unique_u8", &self.unique_u_8, event);
        callbacks.invoke_table_row_callbacks::<Users>("users", &self.users, event);
        callbacks.invoke_table_row_callbacks::<VecBool>("vec_bool", &self.vec_bool, event);
        callbacks.invoke_table_row_callbacks::<VecByteStruct>("vec_byte_struct", &self.vec_byte_struct, event);
        callbacks.invoke_table_row_callbacks::<VecConnectionId>("vec_connection_id", &self.vec_connection_id, event);
        callbacks.invoke_table_row_callbacks::<VecEnumWithPayload>(
            "vec_enum_with_payload",
            &self.vec_enum_with_payload,
            event,
        );
        callbacks.invoke_table_row_callbacks::<VecEveryPrimitiveStruct>(
            "vec_every_primitive_struct",
            &self.vec_every_primitive_struct,
            event,
        );
        callbacks.invoke_table_row_callbacks::<VecEveryVecStruct>(
            "vec_every_vec_struct",
            &self.vec_every_vec_struct,
            event,
        );
        callbacks.invoke_table_row_callbacks::<VecF32>("vec_f32", &self.vec_f_32, event);
        callbacks.invoke_table_row_callbacks::<VecF64>("vec_f64", &self.vec_f_64, event);
        callbacks.invoke_table_row_callbacks::<VecI128>("vec_i128", &self.vec_i_128, event);
        callbacks.invoke_table_row_callbacks::<VecI16>("vec_i16", &self.vec_i_16, event);
        callbacks.invoke_table_row_callbacks::<VecI256>("vec_i256", &self.vec_i_256, event);
        callbacks.invoke_table_row_callbacks::<VecI32>("vec_i32", &self.vec_i_32, event);
        callbacks.invoke_table_row_callbacks::<VecI64>("vec_i64", &self.vec_i_64, event);
        callbacks.invoke_table_row_callbacks::<VecI8>("vec_i8", &self.vec_i_8, event);
        callbacks.invoke_table_row_callbacks::<VecIdentity>("vec_identity", &self.vec_identity, event);
        callbacks.invoke_table_row_callbacks::<VecSimpleEnum>("vec_simple_enum", &self.vec_simple_enum, event);
        callbacks.invoke_table_row_callbacks::<VecString>("vec_string", &self.vec_string, event);
        callbacks.invoke_table_row_callbacks::<VecTimestamp>("vec_timestamp", &self.vec_timestamp, event);
        callbacks.invoke_table_row_callbacks::<VecU128>("vec_u128", &self.vec_u_128, event);
        callbacks.invoke_table_row_callbacks::<VecU16>("vec_u16", &self.vec_u_16, event);
        callbacks.invoke_table_row_callbacks::<VecU256>("vec_u256", &self.vec_u_256, event);
        callbacks.invoke_table_row_callbacks::<VecU32>("vec_u32", &self.vec_u_32, event);
        callbacks.invoke_table_row_callbacks::<VecU64>("vec_u64", &self.vec_u_64, event);
        callbacks.invoke_table_row_callbacks::<VecU8>("vec_u8", &self.vec_u_8, event);
        callbacks.invoke_table_row_callbacks::<VecUnitStruct>("vec_unit_struct", &self.vec_unit_struct, event);
    }
}

#[doc(hidden)]
pub struct RemoteModule;

impl __sdk::InModule for RemoteModule {
    type Module = Self;
}

/// The `reducers` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
pub struct RemoteReducers {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteReducers {
    type Module = RemoteModule;
}

#[doc(hidden)]
/// The `set_reducer_flags` field of [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
/// Each method sets the flags for the reducer with the same name.
///
/// This type is currently unstable and may be removed without a major version bump.
pub struct SetReducerFlags {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for SetReducerFlags {
    type Module = RemoteModule;
}

/// The `db` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each table defined by the module.
pub struct RemoteTables {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteTables {
    type Module = RemoteModule;
}

/// A connection to a remote module, including a materialized view of a subset of the database.
///
/// Connect to a remote module by calling [`DbConnection::builder`]
/// and using the [`__sdk::DbConnectionBuilder`] builder-pattern constructor.
///
/// You must explicitly advance the connection by calling any one of:
///
/// - [`DbConnection::frame_tick`].
/// - [`DbConnection::run_threaded`].
/// - [`DbConnection::run_async`].
/// - [`DbConnection::advance_one_message`].
/// - [`DbConnection::advance_one_message_blocking`].
/// - [`DbConnection::advance_one_message_async`].
///
/// Which of these methods you should call depends on the specific needs of your application,
/// but you must call one of them, or else the connection will never progress.
pub struct DbConnection {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    #[doc(hidden)]
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,

    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for DbConnection {
    type Module = RemoteModule;
}

impl __sdk::DbContext for DbConnection {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl DbConnection {
    /// Builder-pattern constructor for a connection to a remote module.
    ///
    /// See [`__sdk::DbConnectionBuilder`] for required and optional configuration for the new connection.
    pub fn builder() -> __sdk::DbConnectionBuilder<RemoteModule> {
        __sdk::DbConnectionBuilder::new()
    }

    /// If any WebSocket messages are waiting, process one of them.
    ///
    /// Returns `true` if a message was processed, or `false` if the queue is empty.
    /// Callers should invoke this message in a loop until it returns `false`
    /// or for as much time is available to process messages.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::frame_tick`] each frame
    /// to fully exhaust the queue whenever time is available.
    pub fn advance_one_message(&self) -> __sdk::Result<bool> {
        self.imp.advance_one_message()
    }

    /// Process one WebSocket message, potentially blocking the current thread until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_threaded`] to spawn a thread
    /// which advances the connection automatically.
    pub fn advance_one_message_blocking(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_blocking()
    }

    /// Process one WebSocket message, `await`ing until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_async`] to run an `async` loop
    /// which advances the connection when polled.
    pub async fn advance_one_message_async(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_async().await
    }

    /// Process all WebSocket messages waiting in the queue,
    /// then return without `await`ing or blocking the current thread.
    pub fn frame_tick(&self) -> __sdk::Result<()> {
        self.imp.frame_tick()
    }

    /// Spawn a thread which processes WebSocket messages as they are received.
    pub fn run_threaded(&self) -> std::thread::JoinHandle<()> {
        self.imp.run_threaded()
    }

    /// Run an `async` loop which processes WebSocket messages when polled.
    pub async fn run_async(&self) -> __sdk::Result<()> {
        self.imp.run_async().await
    }
}

impl __sdk::DbConnection for DbConnection {
    fn new(imp: __sdk::DbContextImpl<RemoteModule>) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

/// A handle on a subscribed query.
// TODO: Document this better after implementing the new subscription API.
#[derive(Clone)]
pub struct SubscriptionHandle {
    imp: __sdk::SubscriptionHandleImpl<RemoteModule>,
}

impl __sdk::InModule for SubscriptionHandle {
    type Module = RemoteModule;
}

impl __sdk::SubscriptionHandle for SubscriptionHandle {
    fn new(imp: __sdk::SubscriptionHandleImpl<RemoteModule>) -> Self {
        Self { imp }
    }

    /// Returns true if this subscription has been terminated due to an unsubscribe call or an error.
    fn is_ended(&self) -> bool {
        self.imp.is_ended()
    }

    /// Returns true if this subscription has been applied and has not yet been unsubscribed.
    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    /// Unsubscribe from the query controlled by this `SubscriptionHandle`,
    /// then run `on_end` when its rows are removed from the client cache.
    fn unsubscribe_then(self, on_end: __sdk::OnEndedCallback<RemoteModule>) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(Some(on_end))
    }

    fn unsubscribe(self) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(None)
    }
}

/// Alias trait for a [`__sdk::DbContext`] connected to this module,
/// with that trait's associated types bounded to this module's concrete types.
///
/// Users can use this trait as a boundary on definitions which should accept
/// either a [`DbConnection`] or an [`EventContext`] and operate on either.
pub trait RemoteDbContext:
    __sdk::DbContext<
    DbView = RemoteTables,
    Reducers = RemoteReducers,
    SetReducerFlags = SetReducerFlags,
    SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
>
{
}
impl<
        Ctx: __sdk::DbContext<
            DbView = RemoteTables,
            Reducers = RemoteReducers,
            SetReducerFlags = SetReducerFlags,
            SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
        >,
    > RemoteDbContext for Ctx
{
}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Event`],
/// passed to [`__sdk::Table::on_insert`], [`__sdk::Table::on_delete`] and [`__sdk::TableWithPrimaryKey::on_update`] callbacks.
pub struct EventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::Event<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for EventContext {
    type Event = __sdk::Event<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for EventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for EventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::EventContext for EventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::ReducerEvent`],
/// passed to on-reducer callbacks.
pub struct ReducerEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::ReducerEvent<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ReducerEventContext {
    type Event = __sdk::ReducerEvent<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ReducerEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ReducerEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ReducerEventContext for ReducerEventContext {}

/// An [`__sdk::DbContext`] passed to [`__sdk::SubscriptionBuilder::on_applied`] and [`SubscriptionHandle::unsubscribe_then`] callbacks.
pub struct SubscriptionEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for SubscriptionEventContext {
    type Event = ();
    fn event(&self) -> &Self::Event {
        &()
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, _event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

impl __sdk::InModule for SubscriptionEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for SubscriptionEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::SubscriptionEventContext for SubscriptionEventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Error`],
/// passed to [`__sdk::DbConnectionBuilder::on_disconnect`], [`__sdk::DbConnectionBuilder::on_connect_error`] and [`__sdk::SubscriptionBuilder::on_error`] callbacks.
pub struct ErrorContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: Option<__sdk::Error>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ErrorContext {
    type Event = Option<__sdk::Error>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ErrorContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ErrorContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ErrorContext for ErrorContext {}

impl __sdk::SpacetimeModule for RemoteModule {
    type DbConnection = DbConnection;
    type EventContext = EventContext;
    type ReducerEventContext = ReducerEventContext;
    type SubscriptionEventContext = SubscriptionEventContext;
    type ErrorContext = ErrorContext;
    type Reducer = Reducer;
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;
    type DbUpdate = DbUpdate;
    type AppliedDiff<'r> = AppliedDiff<'r>;
    type SubscriptionHandle = SubscriptionHandle;

    fn register_tables(client_cache: &mut __sdk::ClientCache<Self>) {
        btree_u_32_table::register_table(client_cache);
        indexed_table_table::register_table(client_cache);
        indexed_table_2_table::register_table(client_cache);
        large_table_table::register_table(client_cache);
        one_bool_table::register_table(client_cache);
        one_byte_struct_table::register_table(client_cache);
        one_connection_id_table::register_table(client_cache);
        one_enum_with_payload_table::register_table(client_cache);
        one_every_primitive_struct_table::register_table(client_cache);
        one_every_vec_struct_table::register_table(client_cache);
        one_f_32_table::register_table(client_cache);
        one_f_64_table::register_table(client_cache);
        one_i_128_table::register_table(client_cache);
        one_i_16_table::register_table(client_cache);
        one_i_256_table::register_table(client_cache);
        one_i_32_table::register_table(client_cache);
        one_i_64_table::register_table(client_cache);
        one_i_8_table::register_table(client_cache);
        one_identity_table::register_table(client_cache);
        one_simple_enum_table::register_table(client_cache);
        one_string_table::register_table(client_cache);
        one_timestamp_table::register_table(client_cache);
        one_u_128_table::register_table(client_cache);
        one_u_16_table::register_table(client_cache);
        one_u_256_table::register_table(client_cache);
        one_u_32_table::register_table(client_cache);
        one_u_64_table::register_table(client_cache);
        one_u_8_table::register_table(client_cache);
        one_unit_struct_table::register_table(client_cache);
        option_every_primitive_struct_table::register_table(client_cache);
        option_i_32_table::register_table(client_cache);
        option_identity_table::register_table(client_cache);
        option_simple_enum_table::register_table(client_cache);
        option_string_table::register_table(client_cache);
        option_vec_option_i_32_table::register_table(client_cache);
        pk_bool_table::register_table(client_cache);
        pk_connection_id_table::register_table(client_cache);
        pk_i_128_table::register_table(client_cache);
        pk_i_16_table::register_table(client_cache);
        pk_i_256_table::register_table(client_cache);
        pk_i_32_table::register_table(client_cache);
        pk_i_64_table::register_table(client_cache);
        pk_i_8_table::register_table(client_cache);
        pk_identity_table::register_table(client_cache);
        pk_string_table::register_table(client_cache);
        pk_u_128_table::register_table(client_cache);
        pk_u_16_table::register_table(client_cache);
        pk_u_256_table::register_table(client_cache);
        pk_u_32_table::register_table(client_cache);
        pk_u_32_two_table::register_table(client_cache);
        pk_u_64_table::register_table(client_cache);
        pk_u_8_table::register_table(client_cache);
        scheduled_table_table::register_table(client_cache);
        table_holds_table_table::register_table(client_cache);
        unique_bool_table::register_table(client_cache);
        unique_connection_id_table::register_table(client_cache);
        unique_i_128_table::register_table(client_cache);
        unique_i_16_table::register_table(client_cache);
        unique_i_256_table::register_table(client_cache);
        unique_i_32_table::register_table(client_cache);
        unique_i_64_table::register_table(client_cache);
        unique_i_8_table::register_table(client_cache);
        unique_identity_table::register_table(client_cache);
        unique_string_table::register_table(client_cache);
        unique_u_128_table::register_table(client_cache);
        unique_u_16_table::register_table(client_cache);
        unique_u_256_table::register_table(client_cache);
        unique_u_32_table::register_table(client_cache);
        unique_u_64_table::register_table(client_cache);
        unique_u_8_table::register_table(client_cache);
        users_table::register_table(client_cache);
        vec_bool_table::register_table(client_cache);
        vec_byte_struct_table::register_table(client_cache);
        vec_connection_id_table::register_table(client_cache);
        vec_enum_with_payload_table::register_table(client_cache);
        vec_every_primitive_struct_table::register_table(client_cache);
        vec_every_vec_struct_table::register_table(client_cache);
        vec_f_32_table::register_table(client_cache);
        vec_f_64_table::register_table(client_cache);
        vec_i_128_table::register_table(client_cache);
        vec_i_16_table::register_table(client_cache);
        vec_i_256_table::register_table(client_cache);
        vec_i_32_table::register_table(client_cache);
        vec_i_64_table::register_table(client_cache);
        vec_i_8_table::register_table(client_cache);
        vec_identity_table::register_table(client_cache);
        vec_simple_enum_table::register_table(client_cache);
        vec_string_table::register_table(client_cache);
        vec_timestamp_table::register_table(client_cache);
        vec_u_128_table::register_table(client_cache);
        vec_u_16_table::register_table(client_cache);
        vec_u_256_table::register_table(client_cache);
        vec_u_32_table::register_table(client_cache);
        vec_u_64_table::register_table(client_cache);
        vec_u_8_table::register_table(client_cache);
        vec_unit_struct_table::register_table(client_cache);
    }
}
