// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused)]
use super::unique_identity_type::UniqueIdentity;
use spacetimedb_sdk::{
    self as __sdk,
    anyhow::{self as __anyhow, Context as _},
    lib as __lib, sats as __sats, ws_messages as __ws,
};

/// Table handle for the table `unique_identity`.
///
/// Obtain a handle from the [`UniqueIdentityTableAccess::unique_identity`] method on [`super::RemoteTables`],
/// like `ctx.db.unique_identity()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.unique_identity().on_insert(...)`.
pub struct UniqueIdentityTableHandle<'ctx> {
    imp: __sdk::db_connection::TableHandle<UniqueIdentity>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `unique_identity`.
///
/// Implemented for [`super::RemoteTables`].
pub trait UniqueIdentityTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`UniqueIdentityTableHandle`], which mediates access to the table `unique_identity`.
    fn unique_identity(&self) -> UniqueIdentityTableHandle<'_>;
}

impl UniqueIdentityTableAccess for super::RemoteTables {
    fn unique_identity(&self) -> UniqueIdentityTableHandle<'_> {
        UniqueIdentityTableHandle {
            imp: self.imp.get_table::<UniqueIdentity>("unique_identity"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct UniqueIdentityInsertCallbackId(__sdk::callbacks::CallbackId);
pub struct UniqueIdentityDeleteCallbackId(__sdk::callbacks::CallbackId);

impl<'ctx> __sdk::table::Table for UniqueIdentityTableHandle<'ctx> {
    type Row = UniqueIdentity;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = UniqueIdentity> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = UniqueIdentityInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> UniqueIdentityInsertCallbackId {
        UniqueIdentityInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: UniqueIdentityInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = UniqueIdentityDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> UniqueIdentityDeleteCallbackId {
        UniqueIdentityDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: UniqueIdentityDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    deletes: Vec<__ws::EncodedValue>,
    inserts: Vec<__ws::EncodedValue>,
) -> __anyhow::Result<__sdk::spacetime_module::TableUpdate<UniqueIdentity>> {
    __sdk::spacetime_module::TableUpdate::parse_table_update_no_primary_key(deletes, inserts)
        .context("Failed to parse table update for table \"unique_identity\"")
}

/// Access to the `i` unique index on the table `unique_identity`,
/// which allows point queries on the field of the same name
/// via the [`UniqueIdentityIUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.unique_identity().i().find(...)`.
pub struct UniqueIdentityIUnique<'ctx> {
    imp: __sdk::client_cache::UniqueConstraint<UniqueIdentity, __sdk::Identity>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> UniqueIdentityTableHandle<'ctx> {
    /// Get a handle on the `i` unique index on the table `unique_identity`.
    pub fn i(&self) -> UniqueIdentityIUnique<'ctx> {
        UniqueIdentityIUnique {
            imp: self.imp.get_unique_constraint::<__sdk::Identity>("i", |row| &row.i),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> UniqueIdentityIUnique<'ctx> {
    /// Find the subscribed row whose `i` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &__sdk::Identity) -> Option<UniqueIdentity> {
        self.imp.find(col_val)
    }
}
