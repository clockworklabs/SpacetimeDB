// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.1.1 (commit 5611e402a8a162f0bcd903cc5db9cf24a00476f8).

#![allow(unused, clippy::all)]
use super::one_i_16_type::OneI16;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `one_i16`.
///
/// Obtain a handle from the [`OneI16TableAccess::one_i_16`] method on [`super::RemoteTables`],
/// like `ctx.db.one_i_16()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.one_i_16().on_insert(...)`.
pub struct OneI16TableHandle<'ctx> {
    imp: __sdk::TableHandle<OneI16>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `one_i16`.
///
/// Implemented for [`super::RemoteTables`].
pub trait OneI16TableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`OneI16TableHandle`], which mediates access to the table `one_i16`.
    fn one_i_16(&self) -> OneI16TableHandle<'_>;
}

impl OneI16TableAccess for super::RemoteTables {
    fn one_i_16(&self) -> OneI16TableHandle<'_> {
        OneI16TableHandle {
            imp: self.imp.get_table::<OneI16>("one_i16"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct OneI16InsertCallbackId(__sdk::CallbackId);
pub struct OneI16DeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for OneI16TableHandle<'ctx> {
    type Row = OneI16;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = OneI16> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = OneI16InsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> OneI16InsertCallbackId {
        OneI16InsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: OneI16InsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = OneI16DeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> OneI16DeleteCallbackId {
        OneI16DeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: OneI16DeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache.get_or_make_table::<OneI16>("one_i16");
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<OneI16>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<OneI16>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}
