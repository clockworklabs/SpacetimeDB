// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

use super::byte_struct::ByteStruct;
use super::enum_with_payload::EnumWithPayload;
use super::every_primitive_struct::EveryPrimitiveStruct;
use super::every_vec_struct::EveryVecStruct;
use super::simple_enum::SimpleEnum;
use super::unit_struct::UnitStruct;
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InsertLargeTableArgs {
    pub a: u8,
    pub b: u16,
    pub c: u32,
    pub d: u64,
    pub e: u128,
    pub f: i8,
    pub g: i16,
    pub h: i32,
    pub i: i64,
    pub j: i128,
    pub k: bool,
    pub l: f32,
    pub m: f64,
    pub n: String,
    pub o: SimpleEnum,
    pub p: EnumWithPayload,
    pub q: UnitStruct,
    pub r: ByteStruct,
    pub s: EveryPrimitiveStruct,
    pub t: EveryVecStruct,
}

impl Reducer for InsertLargeTableArgs {
    const REDUCER_NAME: &'static str = "insert_large_table";
}

#[allow(unused)]
pub fn insert_large_table(
    a: u8,
    b: u16,
    c: u32,
    d: u64,
    e: u128,
    f: i8,
    g: i16,
    h: i32,
    i: i64,
    j: i128,
    k: bool,
    l: f32,
    m: f64,
    n: String,
    o: SimpleEnum,
    p: EnumWithPayload,
    q: UnitStruct,
    r: ByteStruct,
    s: EveryPrimitiveStruct,
    t: EveryVecStruct,
) {
    InsertLargeTableArgs {
        a,
        b,
        c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n,
        o,
        p,
        q,
        r,
        s,
        t,
    }
    .invoke();
}

#[allow(unused)]
pub fn on_insert_large_table(
    mut __callback: impl FnMut(
            &Identity,
            Option<Address>,
            &Status,
            &u8,
            &u16,
            &u32,
            &u64,
            &u128,
            &i8,
            &i16,
            &i32,
            &i64,
            &i128,
            &bool,
            &f32,
            &f64,
            &String,
            &SimpleEnum,
            &EnumWithPayload,
            &UnitStruct,
            &ByteStruct,
            &EveryPrimitiveStruct,
            &EveryVecStruct,
        ) + Send
        + 'static,
) -> ReducerCallbackId<InsertLargeTableArgs> {
    InsertLargeTableArgs::on_reducer(move |__identity, __addr, __status, __args| {
        let InsertLargeTableArgs {
            a,
            b,
            c,
            d,
            e,
            f,
            g,
            h,
            i,
            j,
            k,
            l,
            m,
            n,
            o,
            p,
            q,
            r,
            s,
            t,
        } = __args;
        __callback(
            __identity, __addr, __status, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t,
        );
    })
}

#[allow(unused)]
pub fn once_on_insert_large_table(
    __callback: impl FnOnce(
            &Identity,
            Option<Address>,
            &Status,
            &u8,
            &u16,
            &u32,
            &u64,
            &u128,
            &i8,
            &i16,
            &i32,
            &i64,
            &i128,
            &bool,
            &f32,
            &f64,
            &String,
            &SimpleEnum,
            &EnumWithPayload,
            &UnitStruct,
            &ByteStruct,
            &EveryPrimitiveStruct,
            &EveryVecStruct,
        ) + Send
        + 'static,
) -> ReducerCallbackId<InsertLargeTableArgs> {
    InsertLargeTableArgs::once_on_reducer(move |__identity, __addr, __status, __args| {
        let InsertLargeTableArgs {
            a,
            b,
            c,
            d,
            e,
            f,
            g,
            h,
            i,
            j,
            k,
            l,
            m,
            n,
            o,
            p,
            q,
            r,
            s,
            t,
        } = __args;
        __callback(
            __identity, __addr, __status, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t,
        );
    })
}

#[allow(unused)]
pub fn remove_on_insert_large_table(id: ReducerCallbackId<InsertLargeTableArgs>) {
    InsertLargeTableArgs::remove_on_reducer(id);
}
