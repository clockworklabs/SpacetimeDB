// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.1.1 (commit 5611e402a8a162f0bcd903cc5db9cf24a00476f8).

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::byte_struct_type::ByteStruct;
use super::enum_with_payload_type::EnumWithPayload;
use super::every_primitive_struct_type::EveryPrimitiveStruct;
use super::every_vec_struct_type::EveryVecStruct;
use super::simple_enum_type::SimpleEnum;
use super::unit_struct_type::UnitStruct;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct InsertLargeTableArgs {
    pub a: u8,
    pub b: u16,
    pub c: u32,
    pub d: u64,
    pub e: u128,
    pub f: __sats::u256,
    pub g: i8,
    pub h: i16,
    pub i: i32,
    pub j: i64,
    pub k: i128,
    pub l: __sats::i256,
    pub m: bool,
    pub n: f32,
    pub o: f64,
    pub p: String,
    pub q: SimpleEnum,
    pub r: EnumWithPayload,
    pub s: UnitStruct,
    pub t: ByteStruct,
    pub u: EveryPrimitiveStruct,
    pub v: EveryVecStruct,
}

impl From<InsertLargeTableArgs> for super::Reducer {
    fn from(args: InsertLargeTableArgs) -> Self {
        Self::InsertLargeTable {
            a: args.a,
            b: args.b,
            c: args.c,
            d: args.d,
            e: args.e,
            f: args.f,
            g: args.g,
            h: args.h,
            i: args.i,
            j: args.j,
            k: args.k,
            l: args.l,
            m: args.m,
            n: args.n,
            o: args.o,
            p: args.p,
            q: args.q,
            r: args.r,
            s: args.s,
            t: args.t,
            u: args.u,
            v: args.v,
        }
    }
}

impl __sdk::InModule for InsertLargeTableArgs {
    type Module = super::RemoteModule;
}

pub struct InsertLargeTableCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `insert_large_table`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait insert_large_table {
    /// Request that the remote module invoke the reducer `insert_large_table` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_insert_large_table`] callbacks.
    fn insert_large_table(
        &self,
        a: u8,
        b: u16,
        c: u32,
        d: u64,
        e: u128,
        f: __sats::u256,
        g: i8,
        h: i16,
        i: i32,
        j: i64,
        k: i128,
        l: __sats::i256,
        m: bool,
        n: f32,
        o: f64,
        p: String,
        q: SimpleEnum,
        r: EnumWithPayload,
        s: UnitStruct,
        t: ByteStruct,
        u: EveryPrimitiveStruct,
        v: EveryVecStruct,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `insert_large_table`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`InsertLargeTableCallbackId`] can be passed to [`Self::remove_on_insert_large_table`]
    /// to cancel the callback.
    fn on_insert_large_table(
        &self,
        callback: impl FnMut(
                &super::ReducerEventContext,
                &u8,
                &u16,
                &u32,
                &u64,
                &u128,
                &__sats::u256,
                &i8,
                &i16,
                &i32,
                &i64,
                &i128,
                &__sats::i256,
                &bool,
                &f32,
                &f64,
                &String,
                &SimpleEnum,
                &EnumWithPayload,
                &UnitStruct,
                &ByteStruct,
                &EveryPrimitiveStruct,
                &EveryVecStruct,
            ) + Send
            + 'static,
    ) -> InsertLargeTableCallbackId;
    /// Cancel a callback previously registered by [`Self::on_insert_large_table`],
    /// causing it not to run in the future.
    fn remove_on_insert_large_table(&self, callback: InsertLargeTableCallbackId);
}

impl insert_large_table for super::RemoteReducers {
    fn insert_large_table(
        &self,
        a: u8,
        b: u16,
        c: u32,
        d: u64,
        e: u128,
        f: __sats::u256,
        g: i8,
        h: i16,
        i: i32,
        j: i64,
        k: i128,
        l: __sats::i256,
        m: bool,
        n: f32,
        o: f64,
        p: String,
        q: SimpleEnum,
        r: EnumWithPayload,
        s: UnitStruct,
        t: ByteStruct,
        u: EveryPrimitiveStruct,
        v: EveryVecStruct,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "insert_large_table",
            InsertLargeTableArgs {
                a,
                b,
                c,
                d,
                e,
                f,
                g,
                h,
                i,
                j,
                k,
                l,
                m,
                n,
                o,
                p,
                q,
                r,
                s,
                t,
                u,
                v,
            },
        )
    }
    fn on_insert_large_table(
        &self,
        mut callback: impl FnMut(
                &super::ReducerEventContext,
                &u8,
                &u16,
                &u32,
                &u64,
                &u128,
                &__sats::u256,
                &i8,
                &i16,
                &i32,
                &i64,
                &i128,
                &__sats::i256,
                &bool,
                &f32,
                &f64,
                &String,
                &SimpleEnum,
                &EnumWithPayload,
                &UnitStruct,
                &ByteStruct,
                &EveryPrimitiveStruct,
                &EveryVecStruct,
            ) + Send
            + 'static,
    ) -> InsertLargeTableCallbackId {
        InsertLargeTableCallbackId(self.imp.on_reducer(
            "insert_large_table",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer:
                                super::Reducer::InsertLargeTable {
                                    a,
                                    b,
                                    c,
                                    d,
                                    e,
                                    f,
                                    g,
                                    h,
                                    i,
                                    j,
                                    k,
                                    l,
                                    m,
                                    n,
                                    o,
                                    p,
                                    q,
                                    r,
                                    s,
                                    t,
                                    u,
                                    v,
                                },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)
            }),
        ))
    }
    fn remove_on_insert_large_table(&self, callback: InsertLargeTableCallbackId) {
        self.imp.remove_on_reducer("insert_large_table", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `insert_large_table`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_insert_large_table {
    /// Set the call-reducer flags for the reducer `insert_large_table` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn insert_large_table(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_insert_large_table for super::SetReducerFlags {
    fn insert_large_table(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("insert_large_table", flags);
    }
}
