// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused_imports)]
use super::simple_enum::SimpleEnum;
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InsertVecSimpleEnumArgs {
    pub e: Vec<SimpleEnum>,
}

impl Reducer for InsertVecSimpleEnumArgs {
    const REDUCER_NAME: &'static str = "insert_vec_simple_enum";
}

#[allow(unused)]
pub fn insert_vec_simple_enum(e: Vec<SimpleEnum>) {
    InsertVecSimpleEnumArgs { e }.invoke();
}

#[allow(unused)]
pub fn on_insert_vec_simple_enum(
    mut __callback: impl FnMut(&Identity, Option<Address>, &Status, &Vec<SimpleEnum>) + Send + 'static,
) -> ReducerCallbackId<InsertVecSimpleEnumArgs> {
    InsertVecSimpleEnumArgs::on_reducer(move |__identity, __addr, __status, __args| {
        let InsertVecSimpleEnumArgs { e } = __args;
        __callback(__identity, __addr, __status, e);
    })
}

#[allow(unused)]
pub fn once_on_insert_vec_simple_enum(
    __callback: impl FnOnce(&Identity, Option<Address>, &Status, &Vec<SimpleEnum>) + Send + 'static,
) -> ReducerCallbackId<InsertVecSimpleEnumArgs> {
    InsertVecSimpleEnumArgs::once_on_reducer(move |__identity, __addr, __status, __args| {
        let InsertVecSimpleEnumArgs { e } = __args;
        __callback(__identity, __addr, __status, e);
    })
}

#[allow(unused)]
pub fn remove_on_insert_vec_simple_enum(id: ReducerCallbackId<InsertVecSimpleEnumArgs>) {
    InsertVecSimpleEnumArgs::remove_on_reducer(id);
}
