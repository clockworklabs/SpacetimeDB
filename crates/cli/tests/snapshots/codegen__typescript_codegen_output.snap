---
source: crates/cli/tests/codegen.rs
expression: outfiles
---
"add_player_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, DatabaseTable, AlgebraicValue, ReducerArgsAdapter, SumTypeVariant, Serializer, Identity, Address, ReducerEvent, Reducer, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class AddPlayerReducer extends Reducer
{
	public static reducerName: string = "AddPlayer";
	public static call(_name: string) {
		this.getReducer().call(_name);
	}

	public call(_name: string) {
		const serializer = this.client.getSerializer();
		let _nameType = AlgebraicType.createPrimitiveType(BuiltinType.Type.String);
		serializer.write(_nameType, _name);
		this.client.call("add_player", serializer);
	}

	public static deserializeArgs(adapter: ReducerArgsAdapter): any[] {
		let nameType = AlgebraicType.createPrimitiveType(BuiltinType.Type.String);
		let nameValue = AlgebraicValue.deserialize(nameType, adapter.next())
		let name = nameValue.asString();
		return [name];
	}

	public static on(callback: (reducerEvent: ReducerEvent, _name: string) => void) {
		this.getReducer().on(callback);
	}
	public on(callback: (reducerEvent: ReducerEvent, _name: string) => void)
	{
		this.client.on("reducer:AddPlayer", callback);
	}
}


export default AddPlayerReducer
'''
"add_private_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, DatabaseTable, AlgebraicValue, ReducerArgsAdapter, SumTypeVariant, Serializer, Identity, Address, ReducerEvent, Reducer, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class AddPrivateReducer extends Reducer
{
	public static reducerName: string = "AddPrivate";
	public static call(_name: string) {
		this.getReducer().call(_name);
	}

	public call(_name: string) {
		const serializer = this.client.getSerializer();
		let _nameType = AlgebraicType.createPrimitiveType(BuiltinType.Type.String);
		serializer.write(_nameType, _name);
		this.client.call("add_private", serializer);
	}

	public static deserializeArgs(adapter: ReducerArgsAdapter): any[] {
		let nameType = AlgebraicType.createPrimitiveType(BuiltinType.Type.String);
		let nameValue = AlgebraicValue.deserialize(nameType, adapter.next())
		let name = nameValue.asString();
		return [name];
	}

	public static on(callback: (reducerEvent: ReducerEvent, _name: string) => void) {
		this.getReducer().on(callback);
	}
	public on(callback: (reducerEvent: ReducerEvent, _name: string) => void)
	{
		this.client.on("reducer:AddPrivate", callback);
	}
}


export default AddPrivateReducer
'''
"delete_player_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, DatabaseTable, AlgebraicValue, ReducerArgsAdapter, SumTypeVariant, Serializer, Identity, Address, ReducerEvent, Reducer, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class DeletePlayerReducer extends Reducer
{
	public static reducerName: string = "DeletePlayer";
	public static call(_id: BigInt) {
		this.getReducer().call(_id);
	}

	public call(_id: BigInt) {
		const serializer = this.client.getSerializer();
		let _idType = AlgebraicType.createPrimitiveType(BuiltinType.Type.U64);
		serializer.write(_idType, _id);
		this.client.call("delete_player", serializer);
	}

	public static deserializeArgs(adapter: ReducerArgsAdapter): any[] {
		let idType = AlgebraicType.createPrimitiveType(BuiltinType.Type.U64);
		let idValue = AlgebraicValue.deserialize(idType, adapter.next())
		let id = idValue.asBigInt();
		return [id];
	}

	public static on(callback: (reducerEvent: ReducerEvent, _id: BigInt) => void) {
		this.getReducer().on(callback);
	}
	public on(callback: (reducerEvent: ReducerEvent, _id: BigInt) => void)
	{
		this.client.on("reducer:DeletePlayer", callback);
	}
}


export default DeletePlayerReducer
'''
"delete_players_by_name_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, DatabaseTable, AlgebraicValue, ReducerArgsAdapter, SumTypeVariant, Serializer, Identity, Address, ReducerEvent, Reducer, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class DeletePlayersByNameReducer extends Reducer
{
	public static reducerName: string = "DeletePlayersByName";
	public static call(_name: string) {
		this.getReducer().call(_name);
	}

	public call(_name: string) {
		const serializer = this.client.getSerializer();
		let _nameType = AlgebraicType.createPrimitiveType(BuiltinType.Type.String);
		serializer.write(_nameType, _name);
		this.client.call("delete_players_by_name", serializer);
	}

	public static deserializeArgs(adapter: ReducerArgsAdapter): any[] {
		let nameType = AlgebraicType.createPrimitiveType(BuiltinType.Type.String);
		let nameValue = AlgebraicValue.deserialize(nameType, adapter.next())
		let name = nameValue.asString();
		return [name];
	}

	public static on(callback: (reducerEvent: ReducerEvent, _name: string) => void) {
		this.getReducer().on(callback);
	}
	public on(callback: (reducerEvent: ReducerEvent, _name: string) => void)
	{
		this.client.on("reducer:DeletePlayersByName", callback);
	}
}


export default DeletePlayersByNameReducer
'''
"namespace_test_c.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, SumTypeVariant, BuiltinType, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";

export namespace Namespace.testC {
	export function getAlgebraicType(): AlgebraicType {
		return AlgebraicType.createSumType([
			new SumTypeVariant("Foo", AlgebraicType.createProductType([
		])),
			new SumTypeVariant("Bar", AlgebraicType.createProductType([
		])),
		]);
	}

	export function serialize(value: Namespace.testC): object {
		const result: {[key: string]: any} = {};
		result[value.tag] = [];
		return result;
	}

	export type Foo = { tag: "Foo", value: undefined };
	export const Foo = { tag: "Foo", value: undefined };
	export type Bar = { tag: "Bar", value: undefined };
	export const Bar = { tag: "Bar", value: undefined };

	export function fromValue(value: AlgebraicValue): Namespace.testC {
		let sumValue = value.asSumValue();
		let tag = sumValue.tag;
		let variant = Namespace.testC.getAlgebraicType().sum.variants[tag];
		return { tag: variant.name, value: undefined } as Namespace.testC;
	}
}

export type Namespace.testC = Namespace.testC.Foo | Namespace.testC.Bar;
export default Namespace.testC;
'''
"pk_multi_identity.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class PkMultiIdentity extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "PkMultiIdentity";
	public id: number;
	public other: number;

	public static primaryKey: string | undefined = "id";

	constructor(id: number, other: number) {
	super();
		this.id = id;
		this.other = other;
	}

	public static serialize(value: PkMultiIdentity): object {
		return [
		value.id, value.other
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("other", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
		]);
	}

	public static fromValue(value: AlgebraicValue): PkMultiIdentity
	{
		let productValue = value.asProductValue();
		let __id = productValue.elements[0].asNumber();
		let __other = productValue.elements[1].asNumber();
		return new this(__id, __other);
	}

	public static filterById(value: number): PkMultiIdentity | null
	{
		for(let instance of this.db.getTable("PkMultiIdentity").getInstances())
		{
			if (instance.id === value) {
				return instance;
			}
		}
		return null;
	}

	public static filterByOther(value: number): PkMultiIdentity | null
	{
		for(let instance of this.db.getTable("PkMultiIdentity").getInstances())
		{
			if (instance.other === value) {
				return instance;
			}
		}
		return null;
	}


}

export default PkMultiIdentity;
'''
"point.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class Point extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "Point";
	public x: BigInt;
	public y: BigInt;

	constructor(x: BigInt, y: BigInt) {
	super();
		this.x = x;
		this.y = y;
	}

	public static serialize(value: Point): object {
		return [
		value.x, value.y
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("x", AlgebraicType.createPrimitiveType(BuiltinType.Type.I64)),
			new ProductTypeElement("y", AlgebraicType.createPrimitiveType(BuiltinType.Type.I64)),
		]);
	}

	public static fromValue(value: AlgebraicValue): Point
	{
		let productValue = value.asProductValue();
		let __x = productValue.elements[0].asBigInt();
		let __y = productValue.elements[1].asBigInt();
		return new this(__x, __y);
	}

	public static filterByX(value: BigInt): Point[]
	{
		let result: Point[] = [];
		for(let instance of this.db.getTable("Point").getInstances())
		{
			if (instance.x === value) {
				result.push(instance);
			}
		}
		return result;
	}

	public static filterByY(value: BigInt): Point[]
	{
		let result: Point[] = [];
		for(let instance of this.db.getTable("Point").getInstances())
		{
			if (instance.y === value) {
				result.push(instance);
			}
		}
		return result;
	}


}

export default Point;
'''
"private.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class Private extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "Private";
	public name: string;

	constructor(name: string) {
	super();
		this.name = name;
	}

	public static serialize(value: Private): object {
		return [
		value.name
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("name", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): Private
	{
		let productValue = value.asProductValue();
		let __name = productValue.elements[0].asString();
		return new this(__name);
	}

	public static filterByName(value: string): Private[]
	{
		let result: Private[] = [];
		for(let instance of this.db.getTable("_Private").getInstances())
		{
			if (instance.name === value) {
				result.push(instance);
			}
		}
		return result;
	}


}

export default Private;
'''
"query_private_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, DatabaseTable, AlgebraicValue, ReducerArgsAdapter, SumTypeVariant, Serializer, Identity, Address, ReducerEvent, Reducer, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class QueryPrivateReducer extends Reducer
{
	public static reducerName: string = "QueryPrivate";
	public static call() {
		this.getReducer().call();
	}

	public call() {
		const serializer = this.client.getSerializer();
		this.client.call("query_private", serializer);
	}

	public static deserializeArgs(_adapter: ReducerArgsAdapter): any[] {
		return [];
	}

	public static on(callback: (reducerEvent: ReducerEvent, ) => void) {
		this.getReducer().on(callback);
	}
	public on(callback: (reducerEvent: ReducerEvent, ) => void)
	{
		this.client.on("reducer:QueryPrivate", callback);
	}
}


export default QueryPrivateReducer
'''
"repeating_test_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, DatabaseTable, AlgebraicValue, ReducerArgsAdapter, SumTypeVariant, Serializer, Identity, Address, ReducerEvent, Reducer, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class RepeatingTestReducer extends Reducer
{
	public static reducerName: string = "RepeatingTest";
	public static call(_prevTime: BigInt) {
		this.getReducer().call(_prevTime);
	}

	public call(_prevTime: BigInt) {
		const serializer = this.client.getSerializer();
		let _prevTimeType = AlgebraicType.createPrimitiveType(BuiltinType.Type.U64);
		serializer.write(_prevTimeType, _prevTime);
		this.client.call("repeating_test", serializer);
	}

	public static deserializeArgs(adapter: ReducerArgsAdapter): any[] {
		let prevTimeType = AlgebraicType.createPrimitiveType(BuiltinType.Type.U64);
		let prevTimeValue = AlgebraicValue.deserialize(prevTimeType, adapter.next())
		let prevTime = prevTimeValue.asBigInt();
		return [prevTime];
	}

	public static on(callback: (reducerEvent: ReducerEvent, _prevTime: BigInt) => void) {
		this.getReducer().on(callback);
	}
	public on(callback: (reducerEvent: ReducerEvent, _prevTime: BigInt) => void)
	{
		this.client.on("reducer:RepeatingTest", callback);
	}
}


export default RepeatingTestReducer
'''
"test_a.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class TestA extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "TestA";
	public x: number;
	public y: number;
	public z: string;

	constructor(x: number, y: number, z: string) {
	super();
		this.x = x;
		this.y = y;
		this.z = z;
	}

	public static serialize(value: TestA): object {
		return [
		value.x, value.y, value.z
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("x", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("y", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("z", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): TestA
	{
		let productValue = value.asProductValue();
		let __x = productValue.elements[0].asNumber();
		let __y = productValue.elements[1].asNumber();
		let __z = productValue.elements[2].asString();
		return new this(__x, __y, __z);
	}

	public static filterByX(value: number): TestA[]
	{
		let result: TestA[] = [];
		for(let instance of this.db.getTable("TestA").getInstances())
		{
			if (instance.x === value) {
				result.push(instance);
			}
		}
		return result;
	}

	public static filterByY(value: number): TestA[]
	{
		let result: TestA[] = [];
		for(let instance of this.db.getTable("TestA").getInstances())
		{
			if (instance.y === value) {
				result.push(instance);
			}
		}
		return result;
	}

	public static filterByZ(value: string): TestA[]
	{
		let result: TestA[] = [];
		for(let instance of this.db.getTable("TestA").getInstances())
		{
			if (instance.z === value) {
				result.push(instance);
			}
		}
		return result;
	}


}

export default TestA;
'''
"test_b.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class TestB extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "TestB";
	public foo: string;

	public static primaryKey: string | undefined = undefined;

	constructor(foo: string) {
	super();
		this.foo = foo;
	}

	public static serialize(value: TestB): object {
		return [
		value.foo
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("foo", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): TestB
	{
		let productValue = value.asProductValue();
		let __foo = productValue.elements[0].asString();
		return new this(__foo);
	}

}

export default TestB;
'''
"test_d.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";
// @ts-ignore
import { Namespace.TestC } from "./namespace.test_c";

export class TestD extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "TestD";
	public testC: Namespace.TestC | null;

	constructor(testC: Namespace.TestC | null) {
	super();
		this.testC = testC;
	}

	public static serialize(value: TestD): object {
		return [
		value.testC ? { "some": Namespace.TestC.serialize(value.testC) } : { "none": [] }
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("testC", AlgebraicType.createSumType([
			new SumTypeVariant("some", Namespace.TestC.getAlgebraicType()),
			new SumTypeVariant("none", AlgebraicType.createProductType([
		])),
		])),
		]);
	}

	public static fromValue(value: AlgebraicValue): TestD
	{
		let productValue = value.asProductValue();
		let __test_c = function() { const value = productValue.elements[0].asSumValue().tag == 1 ? null : productValue.elements[0].asSumValue().value; return value ? Namespace.TestC.fromValue(value) : null; }();
		return new this(__test_c);
	}


}

export default TestD;
'''
"test_e.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class TestE extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "TestE";
	public id: BigInt;
	public name: string;

	public static primaryKey: string | undefined = "id";

	constructor(id: BigInt, name: string) {
	super();
		this.id = id;
		this.name = name;
	}

	public static serialize(value: TestE): object {
		return [
		value.id, value.name
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
			new ProductTypeElement("name", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): TestE
	{
		let productValue = value.asProductValue();
		let __id = productValue.elements[0].asBigInt();
		let __name = productValue.elements[1].asString();
		return new this(__id, __name);
	}

	public static filterById(value: BigInt): TestE | null
	{
		for(let instance of this.db.getTable("TestE").getInstances())
		{
			if (instance.id === value) {
				return instance;
			}
		}
		return null;
	}

	public static filterByName(value: string): TestE[]
	{
		let result: TestE[] = [];
		for(let instance of this.db.getTable("TestE").getInstances())
		{
			if (instance.name === value) {
				result.push(instance);
			}
		}
		return result;
	}


}

export default TestE;
'''
"test_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, DatabaseTable, AlgebraicValue, ReducerArgsAdapter, SumTypeVariant, Serializer, Identity, Address, ReducerEvent, Reducer, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";
// @ts-ignore
import { TestA } from "./test_a";
// @ts-ignore
import { TestB } from "./test_b";
// @ts-ignore
import { Namespace.TestC } from "./namespace.test_c";

export class TestReducer extends Reducer
{
	public static reducerName: string = "Test";
	public static call(_arg: TestA, _arg2: TestB, _arg3: Namespace.TestC) {
		this.getReducer().call(_arg, _arg2, _arg3);
	}

	public call(_arg: TestA, _arg2: TestB, _arg3: Namespace.TestC) {
		const serializer = this.client.getSerializer();
		let _argType = TestA.getAlgebraicType();
		serializer.write(_argType, _arg);
		let _arg2Type = TestB.getAlgebraicType();
		serializer.write(_arg2Type, _arg2);
		let _arg3Type = Namespace.TestC.getAlgebraicType();
		serializer.write(_arg3Type, _arg3);
		this.client.call("test", serializer);
	}

	public static deserializeArgs(adapter: ReducerArgsAdapter): any[] {
		let argType = TestA.getAlgebraicType();
		let argValue = AlgebraicValue.deserialize(argType, adapter.next())
		let arg = TestA.fromValue(argValue);
		let arg2Type = TestB.getAlgebraicType();
		let arg2Value = AlgebraicValue.deserialize(arg2Type, adapter.next())
		let arg2 = TestB.fromValue(arg2Value);
		let arg3Type = Namespace.TestC.getAlgebraicType();
		let arg3Value = AlgebraicValue.deserialize(arg3Type, adapter.next())
		let arg3 = Namespace.TestC.fromValue(arg3Value);
		return [arg, arg2, arg3];
	}

	public static on(callback: (reducerEvent: ReducerEvent, _arg: TestA, _arg2: TestB, _arg3: Namespace.TestC) => void) {
		this.getReducer().on(callback);
	}
	public on(callback: (reducerEvent: ReducerEvent, _arg: TestA, _arg2: TestB, _arg3: Namespace.TestC) => void)
	{
		this.client.on("reducer:Test", callback);
	}
}


export default TestReducer
'''
