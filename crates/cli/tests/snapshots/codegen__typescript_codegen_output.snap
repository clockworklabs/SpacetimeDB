---
source: crates/cli/tests/codegen.rs
expression: outfiles
---
"add_player_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";

export class AddPlayerReducer
{
	public static call(name: string)
	{
		if (__SPACETIMEDB__.spacetimeDBClient) {
			__SPACETIMEDB__.spacetimeDBClient.call("add_player", [name]);
		}
	}

	public static deserializeArgs(rawArgs: any[]): any[] {
		let nameType = AlgebraicType.createPrimitiveType(BuiltinType.Type.String);
		let nameValue = AlgebraicValue.deserialize(nameType, rawArgs[0])
		let name = nameValue.asString();
		return [name];
	}

	public static on(callback: (status: string, identity: string, reducerArgs: any[]) => void)
	{
		if (__SPACETIMEDB__.spacetimeDBClient) {
			__SPACETIMEDB__.spacetimeDBClient.on("reducer:AddPlayer", callback);
		}
	}
}

__SPACETIMEDB__.reducers.set("AddPlayer", AddPlayerReducer);
if (__SPACETIMEDB__.spacetimeDBClient) {
	__SPACETIMEDB__.spacetimeDBClient.registerReducer("AddPlayer", AddPlayerReducer);
}

export default AddPlayerReducer
'''
"namespace_test_c.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, SumTypeVariant, BuiltinType, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";

export namespace Namespace.testC {
	export function getAlgebraicType(): AlgebraicType {
		return AlgebraicType.createSumType([
			new SumTypeVariant("Foo", AlgebraicType.createProductType([
		])),
			new SumTypeVariant("Bar", AlgebraicType.createProductType([
		])),
		]);
	}

	export function serialize(value: Namespace.testC): object {
		const result: {[key: string]: any} = {};
		result[value.tag] = [];
		return result;
	}

	export type Foo = { tag: "Foo"; value: undefined };
	export type Bar = { tag: "Bar"; value: undefined };

	export function fromValue(value: AlgebraicValue): Namespace.testC {
		let sumValue = value.asSumValue();
		let tag = sumValue.tag;
		let variant = Namespace.testC.getAlgebraicType().sum.variants[tag];
		return { tag: variant.name, value: undefined } as Namespace.testC;
	}
}

export type Namespace.testC = Namespace.testC.Foo | Namespace.testC.Bar;
export default Namespace.testC;
'''
"repeating_test_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";

export class RepeatingTestReducer
{
	public static call(prevTime: number)
	{
		if (__SPACETIMEDB__.spacetimeDBClient) {
			__SPACETIMEDB__.spacetimeDBClient.call("repeating_test", [prevTime]);
		}
	}

	public static deserializeArgs(rawArgs: any[]): any[] {
		let prevTimeType = AlgebraicType.createPrimitiveType(BuiltinType.Type.U64);
		let prevTimeValue = AlgebraicValue.deserialize(prevTimeType, rawArgs[0])
		let prevTime = prevTimeValue.asNumber();
		return [prevTime];
	}

	public static on(callback: (status: string, identity: string, reducerArgs: any[]) => void)
	{
		if (__SPACETIMEDB__.spacetimeDBClient) {
			__SPACETIMEDB__.spacetimeDBClient.on("reducer:RepeatingTest", callback);
		}
	}
}

__SPACETIMEDB__.reducers.set("RepeatingTest", RepeatingTestReducer);
if (__SPACETIMEDB__.spacetimeDBClient) {
	__SPACETIMEDB__.spacetimeDBClient.registerReducer("RepeatingTest", RepeatingTestReducer);
}

export default RepeatingTestReducer
'''
"test_a.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";

export class TestA extends IDatabaseTable
{
	public static tableName = "TestA";
	public x: number;
	public y: number;
	public z: string;

	constructor(x: number, y: number, z: string) {
	super();
		this.x = x;
		this.y = y;
		this.z = z;
	}

	public static serialize(value: TestA): object {
		return [
		value.x, value.y, value.z
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("x", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("y", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("z", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): TestA
	{
		let productValue = value.asProductValue();
		let __x = productValue.elements[0].asNumber();
		let __y = productValue.elements[1].asNumber();
		let __z = productValue.elements[2].asString();
		return new this(__x, __y, __z);
	}

	public static count(): number
	{
		return __SPACETIMEDB__.clientDB.getTable("TestA").count();
	}

	public static all(): TestA[]
	{
		return __SPACETIMEDB__.clientDB.getTable("TestA").getInstances() as unknown as TestA[];
	}

	public static filterByX(value: number): TestA[] | null
	{
		let result: TestA[] = [];
		for(let entry of __SPACETIMEDB__.clientDB.getTable("TestA").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[0].asNumber() as number;
			if (compareValue == value) {
				result.push(TestA.fromValue(entry));
			}
		}
		return result;
	}

	public static filterByY(value: number): TestA[] | null
	{
		let result: TestA[] = [];
		for(let entry of __SPACETIMEDB__.clientDB.getTable("TestA").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[1].asNumber() as number;
			if (compareValue == value) {
				result.push(TestA.fromValue(entry));
			}
		}
		return result;
	}

	public static filterByZ(value: string): TestA[] | null
	{
		let result: TestA[] = [];
		for(let entry of __SPACETIMEDB__.clientDB.getTable("TestA").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[2].asString() as string;
			if (compareValue == value) {
				result.push(TestA.fromValue(entry));
			}
		}
		return result;
	}


	public static onInsert(callback: (value: TestA) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestA").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: TestA, newValue: TestA) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestA").onUpdate(callback);
	}

	public static onDelete(callback: (value: TestA) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestA").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: TestA) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestA").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: TestA, newValue: TestA) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestA").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: TestA) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestA").removeOnDelete(callback);
	}

}

export default TestA;

__SPACETIMEDB__.registerComponent("TestA", TestA);
'''
"test_b.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";

export class TestB extends IDatabaseTable
{
	public static tableName = "TestB";
	public foo: string;

	public static primaryKey: string | undefined = undefined;

	constructor(foo: string) {
	super();
		this.foo = foo;
	}

	public static serialize(value: TestB): object {
		return [
		value.foo
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("foo", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): TestB
	{
		let productValue = value.asProductValue();
		let __foo = productValue.elements[0].asString();
		return new this(__foo);
	}

}

export default TestB;

__SPACETIMEDB__.registerComponent("TestB", TestB);
'''
"test_d.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";
// @ts-ignore
import { Namespace.TestC } from "./namespace.test_c";

export class TestD extends IDatabaseTable
{
	public static tableName = "TestD";
	public testC: Namespace.TestC | null;

	constructor(testC: Namespace.TestC | null) {
	super();
		this.testC = testC;
	}

	public static serialize(value: TestD): object {
		return [
		value.testC ? { "some": Namespace.TestC.serialize(value.testC) } : { "none": [] }
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("test_c", AlgebraicType.createSumType([
			new SumTypeVariant("some", Namespace.TestC.getAlgebraicType()),
			new SumTypeVariant("none", AlgebraicType.createProductType([
		])),
		])),
		]);
	}

	public static fromValue(value: AlgebraicValue): TestD
	{
		let productValue = value.asProductValue();
		let __test_c = function() { const value = productValue.elements[0].asSumValue().tag == 1 ? null : productValue.elements[0].asSumValue().value; return value ? Namespace.TestC.fromValue(value) : null; }();
		return new this(__test_c);
	}

	public static count(): number
	{
		return __SPACETIMEDB__.clientDB.getTable("TestD").count();
	}

	public static all(): TestD[]
	{
		return __SPACETIMEDB__.clientDB.getTable("TestD").getInstances() as unknown as TestD[];
	}


	public static onInsert(callback: (value: TestD) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestD").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: TestD, newValue: TestD) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestD").onUpdate(callback);
	}

	public static onDelete(callback: (value: TestD) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestD").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: TestD) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestD").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: TestD, newValue: TestD) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestD").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: TestD) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestD").removeOnDelete(callback);
	}

}

export default TestD;

__SPACETIMEDB__.registerComponent("TestD", TestD);
'''
"test_e.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";

export class TestE extends IDatabaseTable
{
	public static tableName = "TestE";
	public id: number;
	public name: string;

	public static primaryKey: string | undefined = "id";

	constructor(id: number, name: string) {
	super();
		this.id = id;
		this.name = name;
	}

	public static serialize(value: TestE): object {
		return [
		value.id, value.name
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
			new ProductTypeElement("name", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): TestE
	{
		let productValue = value.asProductValue();
		let __id = productValue.elements[0].asNumber();
		let __name = productValue.elements[1].asString();
		return new this(__id, __name);
	}

	public static count(): number
	{
		return __SPACETIMEDB__.clientDB.getTable("TestE").count();
	}

	public static all(): TestE[]
	{
		return __SPACETIMEDB__.clientDB.getTable("TestE").getInstances() as unknown as TestE[];
	}

	public static filterById(value: number): TestE | null
	{
		for(let entry of __SPACETIMEDB__.clientDB.getTable("TestE").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[0].asNumber() as number;
			if (compareValue == value) {
				return TestE.fromValue(entry);
			}
		}
		return null;
	}

	public static filterByName(value: string): TestE[] | null
	{
		let result: TestE[] = [];
		for(let entry of __SPACETIMEDB__.clientDB.getTable("TestE").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[1].asString() as string;
			if (compareValue == value) {
				result.push(TestE.fromValue(entry));
			}
		}
		return result;
	}


	public static onInsert(callback: (value: TestE) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestE").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: TestE, newValue: TestE) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestE").onUpdate(callback);
	}

	public static onDelete(callback: (value: TestE) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestE").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: TestE) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestE").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: TestE, newValue: TestE) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestE").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: TestE) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("TestE").removeOnDelete(callback);
	}

}

export default TestE;

__SPACETIMEDB__.registerComponent("TestE", TestE);
'''
"test_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";
// @ts-ignore
import { TestA } from "./test_a";
// @ts-ignore
import { TestB } from "./test_b";
// @ts-ignore
import { Namespace.TestC } from "./namespace.test_c";

export class TestReducer
{
	public static call(arg: TestA, arg2: TestB, arg3: Namespace.TestC)
	{
		if (__SPACETIMEDB__.spacetimeDBClient) {
			__SPACETIMEDB__.spacetimeDBClient.call("test", [TestA.serialize(arg), TestB.serialize(arg2), Namespace.TestC.serialize(arg3)]);
		}
	}

	public static deserializeArgs(rawArgs: any[]): any[] {
		let argType = TestA.getAlgebraicType();
		let argValue = AlgebraicValue.deserialize(argType, rawArgs[0])
		let arg = TestA.fromValue(argValue);
		let arg2Type = TestB.getAlgebraicType();
		let arg2Value = AlgebraicValue.deserialize(arg2Type, rawArgs[1])
		let arg2 = TestB.fromValue(arg2Value);
		let arg3Type = Namespace.TestC.getAlgebraicType();
		let arg3Value = AlgebraicValue.deserialize(arg3Type, rawArgs[2])
		let arg3 = Namespace.TestC.fromValue(arg3Value);
		return [arg, arg2, arg3];
	}

	public static on(callback: (status: string, identity: string, reducerArgs: any[]) => void)
	{
		if (__SPACETIMEDB__.spacetimeDBClient) {
			__SPACETIMEDB__.spacetimeDBClient.on("reducer:Test", callback);
		}
	}
}

__SPACETIMEDB__.reducers.set("Test", TestReducer);
if (__SPACETIMEDB__.spacetimeDBClient) {
	__SPACETIMEDB__.spacetimeDBClient.registerReducer("Test", TestReducer);
}

export default TestReducer
'''
"update_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";

export class UpdateReducer
{
	public static call()
	{
		if (__SPACETIMEDB__.spacetimeDBClient) {
			__SPACETIMEDB__.spacetimeDBClient.call("__update__", []);
		}
	}

	public static deserializeArgs(): any[] {
		return [];
	}

	public static on(callback: (status: string, identity: string, reducerArgs: any[]) => void)
	{
		if (__SPACETIMEDB__.spacetimeDBClient) {
			__SPACETIMEDB__.spacetimeDBClient.on("reducer:Update", callback);
		}
	}
}

__SPACETIMEDB__.reducers.set("Update", UpdateReducer);
if (__SPACETIMEDB__.spacetimeDBClient) {
	__SPACETIMEDB__.spacetimeDBClient.registerReducer("Update", UpdateReducer);
}

export default UpdateReducer
'''
