---
source: crates/cli/tests/codegen.rs
expression: outfiles
---
"Baz.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class Baz
	{
		[DataMember(Name = "field")]
		public string Field;

		public Baz(string Field)
		{
			this.Field = Field;
		}

		public Baz()
		{
			this.Field = "";
		}

	}
}
'''
"Foobar.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	public partial record Foobar : SpacetimeDB.TaggedEnum<(
		SpacetimeDB.Baz Baz,
		SpacetimeDB.Unit Bar,
		uint Har
	)>;
}
'''
"HasSpecialStuff.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class HasSpecialStuff : IDatabaseRow
	{
		[DataMember(Name = "identity")]
		public SpacetimeDB.Identity Identity;
		[DataMember(Name = "address")]
		public SpacetimeDB.Address Address;

		public HasSpecialStuff(
			SpacetimeDB.Identity Identity,
			SpacetimeDB.Address Address
		)
		{
			this.Identity = Identity;
			this.Address = Address;
		}

		public HasSpecialStuff()
		{
			this.Identity = new();
			this.Address = new();
		}

	}
}
'''
"LoggedOutPlayer.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class Player : IDatabaseRow
	{
		[DataMember(Name = "identity")]
		public SpacetimeDB.Identity Identity;
		[DataMember(Name = "player_id")]
		public ulong PlayerId;
		[DataMember(Name = "name")]
		public string Name;

		public Player(
			SpacetimeDB.Identity Identity,
			ulong PlayerId,
			string Name
		)
		{
			this.Identity = Identity;
			this.PlayerId = PlayerId;
			this.Name = Name;
		}

		public Player()
		{
			this.Identity = new();
			this.Name = "";
		}

	}
}
'''
"NamespaceTestC.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;

namespace SpacetimeDB
{
	public partial class Namespace
	{
		public partial class Types
		{
			[SpacetimeDB.Type]
			public enum TestC
			{
				Foo,
				Bar,
			}
		}
	}
}
'''
"NamespaceTestF.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;

namespace SpacetimeDB
{
	public partial class Namespace
	{
		public partial class Types
		{
			[SpacetimeDB.Type]
			public partial record TestF : SpacetimeDB.TaggedEnum<(
				SpacetimeDB.Unit Foo,
				SpacetimeDB.Unit Bar,
				string Baz
			)>;
		}
	}
}
'''
"PkMultiIdentity.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class PkMultiIdentity : IDatabaseRow
	{
		[DataMember(Name = "id")]
		public uint Id;
		[DataMember(Name = "other")]
		public uint Other;

		public PkMultiIdentity(
			uint Id,
			uint Other
		)
		{
			this.Id = Id;
			this.Other = Other;
		}

		public PkMultiIdentity()
		{
		}

	}
}
'''
"Player.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class Player : IDatabaseRow
	{
		[DataMember(Name = "identity")]
		public SpacetimeDB.Identity Identity;
		[DataMember(Name = "player_id")]
		public ulong PlayerId;
		[DataMember(Name = "name")]
		public string Name;

		public Player(
			SpacetimeDB.Identity Identity,
			ulong PlayerId,
			string Name
		)
		{
			this.Identity = Identity;
			this.PlayerId = PlayerId;
			this.Name = Name;
		}

		public Player()
		{
			this.Identity = new();
			this.Name = "";
		}

	}
}
'''
"Points.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class Point : IDatabaseRow
	{
		[DataMember(Name = "x")]
		public long X;
		[DataMember(Name = "y")]
		public long Y;

		public Point(
			long X,
			long Y
		)
		{
			this.X = X;
			this.Y = Y;
		}

		public Point()
		{
		}

	}
}
'''
"Private.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class Private : IDatabaseRow
	{
		[DataMember(Name = "name")]
		public string Name;

		public Private(string Name)
		{
			this.Name = Name;
		}

		public Private()
		{
			this.Name = "";
		}

	}
}
'''
"RepeatingTestArg.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class RepeatingTestArg : IDatabaseRow
	{
		[DataMember(Name = "scheduled_id")]
		public ulong ScheduledId;
		[DataMember(Name = "scheduled_at")]
		public SpacetimeDB.ScheduleAt ScheduledAt;
		[DataMember(Name = "prev_time")]
		public ulong PrevTime;

		public RepeatingTestArg(
			ulong ScheduledId,
			SpacetimeDB.ScheduleAt ScheduledAt,
			ulong PrevTime
		)
		{
			this.ScheduledId = ScheduledId;
			this.ScheduledAt = ScheduledAt;
			this.PrevTime = PrevTime;
		}

		public RepeatingTestArg()
		{
			this.ScheduledAt = null!;
		}

	}
}
'''
"TestA.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class TestA : IDatabaseRow
	{
		[DataMember(Name = "x")]
		public uint X;
		[DataMember(Name = "y")]
		public uint Y;
		[DataMember(Name = "z")]
		public string Z;

		public TestA(
			uint X,
			uint Y,
			string Z
		)
		{
			this.X = X;
			this.Y = Y;
			this.Z = Z;
		}

		public TestA()
		{
			this.Z = "";
		}

	}
}
'''
"TestB.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class TestB
	{
		[DataMember(Name = "foo")]
		public string Foo;

		public TestB(string Foo)
		{
			this.Foo = Foo;
		}

		public TestB()
		{
			this.Foo = "";
		}

	}
}
'''
"TestD.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class TestD : IDatabaseRow
	{
		[DataMember(Name = "test_c")]
		public SpacetimeDB.Namespace.Types.TestC? TestC;

		public TestD(SpacetimeDB.Namespace.Types.TestC? TestC)
		{
			this.TestC = TestC;
		}

		public TestD()
		{
		}

	}
}
'''
"TestE.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class TestE : IDatabaseRow
	{
		[DataMember(Name = "id")]
		public ulong Id;
		[DataMember(Name = "name")]
		public string Name;

		public TestE(
			ulong Id,
			string Name
		)
		{
			this.Id = Id;
			this.Name = Name;
		}

		public TestE()
		{
			this.Name = "";
		}

	}
}
'''
"TestF.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	[SpacetimeDB.Type]
	[DataContract]
	public partial class TestFoobar : IDatabaseRow
	{
		[DataMember(Name = "field")]
		public SpacetimeDB.Foobar Field;

		public TestFoobar(SpacetimeDB.Foobar Field)
		{
			this.Field = Field;
		}

		public TestFoobar()
		{
			this.Field = null!;
		}

	}
}
'''
"_Globals/SpacetimeDBClient.cs" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.
// <auto-generated />

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB
{
	public sealed class RemoteTables
	{
		public class HasSpecialStuffHandle : RemoteTableHandle<EventContext, HasSpecialStuff>
		{
			internal HasSpecialStuffHandle()
			{
			}

		}

		public readonly HasSpecialStuffHandle HasSpecialStuff = new();

		public class LoggedOutPlayerHandle : RemoteTableHandle<EventContext, Player>
		{

			public override void InternalInvokeValueInserted(IDatabaseRow row)
			{
				var value = (Player)row;
				Identity.Cache[value.Identity] = value;
				PlayerId.Cache[value.PlayerId] = value;
			}

			public override void InternalInvokeValueDeleted(IDatabaseRow row)
			{
				Identity.Cache.Remove(((Player)row).Identity);
				PlayerId.Cache.Remove(((Player)row).PlayerId);
			}

			public class IdentityUniqueIndex
			{
				internal readonly Dictionary<SpacetimeDB.Identity, Player> Cache = new(16);
				public Player? Find(SpacetimeDB.Identity value)
				{
					Cache.TryGetValue(value, out var r);
					return r;
				}

			}

			public IdentityUniqueIndex Identity = new();

			public class PlayerIdUniqueIndex
			{
				internal readonly Dictionary<ulong, Player> Cache = new(16);
				public Player? Find(ulong value)
				{
					Cache.TryGetValue(value, out var r);
					return r;
				}

			}

			public PlayerIdUniqueIndex PlayerId = new();

			internal LoggedOutPlayerHandle()
			{
			}
			public override object GetPrimaryKey(IDatabaseRow row) => ((Player)row).Identity;

		}

		public readonly LoggedOutPlayerHandle LoggedOutPlayer = new();

		public class PkMultiIdentityHandle : RemoteTableHandle<EventContext, PkMultiIdentity>
		{

			public override void InternalInvokeValueInserted(IDatabaseRow row)
			{
				var value = (PkMultiIdentity)row;
				Id.Cache[value.Id] = value;
				Other.Cache[value.Other] = value;
			}

			public override void InternalInvokeValueDeleted(IDatabaseRow row)
			{
				Id.Cache.Remove(((PkMultiIdentity)row).Id);
				Other.Cache.Remove(((PkMultiIdentity)row).Other);
			}

			public class IdUniqueIndex
			{
				internal readonly Dictionary<uint, PkMultiIdentity> Cache = new(16);
				public PkMultiIdentity? Find(uint value)
				{
					Cache.TryGetValue(value, out var r);
					return r;
				}

			}

			public IdUniqueIndex Id = new();

			public class OtherUniqueIndex
			{
				internal readonly Dictionary<uint, PkMultiIdentity> Cache = new(16);
				public PkMultiIdentity? Find(uint value)
				{
					Cache.TryGetValue(value, out var r);
					return r;
				}

			}

			public OtherUniqueIndex Other = new();

			internal PkMultiIdentityHandle()
			{
			}
			public override object GetPrimaryKey(IDatabaseRow row) => ((PkMultiIdentity)row).Id;

		}

		public readonly PkMultiIdentityHandle PkMultiIdentity = new();

		public class PlayerHandle : RemoteTableHandle<EventContext, Player>
		{

			public override void InternalInvokeValueInserted(IDatabaseRow row)
			{
				var value = (Player)row;
				Identity.Cache[value.Identity] = value;
				PlayerId.Cache[value.PlayerId] = value;
			}

			public override void InternalInvokeValueDeleted(IDatabaseRow row)
			{
				Identity.Cache.Remove(((Player)row).Identity);
				PlayerId.Cache.Remove(((Player)row).PlayerId);
			}

			public class IdentityUniqueIndex
			{
				internal readonly Dictionary<SpacetimeDB.Identity, Player> Cache = new(16);
				public Player? Find(SpacetimeDB.Identity value)
				{
					Cache.TryGetValue(value, out var r);
					return r;
				}

			}

			public IdentityUniqueIndex Identity = new();

			public class PlayerIdUniqueIndex
			{
				internal readonly Dictionary<ulong, Player> Cache = new(16);
				public Player? Find(ulong value)
				{
					Cache.TryGetValue(value, out var r);
					return r;
				}

			}

			public PlayerIdUniqueIndex PlayerId = new();

			internal PlayerHandle()
			{
			}
			public override object GetPrimaryKey(IDatabaseRow row) => ((Player)row).Identity;

		}

		public readonly PlayerHandle Player = new();

		public class PointsHandle : RemoteTableHandle<EventContext, Point>
		{
			public class XYIndex
			{
				PointsHandle Handle;
				internal XYIndex(PointsHandle handle) => Handle = handle;
				public IEnumerable<Point> Filter(long value) =>
					Handle.Query(x => x.X == value);
			}

			public XYIndex XY { get; init; }

			internal PointsHandle()
			{
				XY = new(this);
			}

		}

		public readonly PointsHandle Points = new();

		public class PrivateHandle : RemoteTableHandle<EventContext, Private>
		{
			internal PrivateHandle()
			{
			}

		}

		public readonly PrivateHandle Private = new();

		public class RepeatingTestArgHandle : RemoteTableHandle<EventContext, RepeatingTestArg>
		{

			public override void InternalInvokeValueInserted(IDatabaseRow row)
			{
				var value = (RepeatingTestArg)row;
				ScheduledId.Cache[value.ScheduledId] = value;
			}

			public override void InternalInvokeValueDeleted(IDatabaseRow row)
			{
				ScheduledId.Cache.Remove(((RepeatingTestArg)row).ScheduledId);
			}

			public class ScheduledIdUniqueIndex
			{
				internal readonly Dictionary<ulong, RepeatingTestArg> Cache = new(16);
				public RepeatingTestArg? Find(ulong value)
				{
					Cache.TryGetValue(value, out var r);
					return r;
				}

			}

			public ScheduledIdUniqueIndex ScheduledId = new();

			internal RepeatingTestArgHandle()
			{
			}
			public override object GetPrimaryKey(IDatabaseRow row) => ((RepeatingTestArg)row).ScheduledId;

		}

		public readonly RepeatingTestArgHandle RepeatingTestArg = new();

		public class TestAHandle : RemoteTableHandle<EventContext, TestA>
		{
			public class XIndex
			{
				TestAHandle Handle;
				internal XIndex(TestAHandle handle) => Handle = handle;
				public IEnumerable<TestA> Filter(uint value) =>
					Handle.Query(x => x.X == value);
			}

			public XIndex X { get; init; }

			internal TestAHandle()
			{
				X = new(this);
			}

		}

		public readonly TestAHandle TestA = new();

		public class TestDHandle : RemoteTableHandle<EventContext, TestD>
		{
			internal TestDHandle()
			{
			}

		}

		public readonly TestDHandle TestD = new();

		public class TestEHandle : RemoteTableHandle<EventContext, TestE>
		{

			public override void InternalInvokeValueInserted(IDatabaseRow row)
			{
				var value = (TestE)row;
				Id.Cache[value.Id] = value;
			}

			public override void InternalInvokeValueDeleted(IDatabaseRow row)
			{
				Id.Cache.Remove(((TestE)row).Id);
			}

			public class IdUniqueIndex
			{
				internal readonly Dictionary<ulong, TestE> Cache = new(16);
				public TestE? Find(ulong value)
				{
					Cache.TryGetValue(value, out var r);
					return r;
				}

			}

			public IdUniqueIndex Id = new();

			public class NameIndex
			{
				TestEHandle Handle;
				internal NameIndex(TestEHandle handle) => Handle = handle;
				public IEnumerable<TestE> Filter(string value) =>
					Handle.Query(x => x.Name == value);
			}

			public NameIndex Name { get; init; }

			internal TestEHandle()
			{
				Name = new(this);
			}
			public override object GetPrimaryKey(IDatabaseRow row) => ((TestE)row).Id;

		}

		public readonly TestEHandle TestE = new();

		public class TestFHandle : RemoteTableHandle<EventContext, TestFoobar>
		{
			internal TestFHandle()
			{
			}

		}

		public readonly TestFHandle TestF = new();

	}

	public sealed class RemoteReducers : RemoteBase<DbConnection>
	{
		internal RemoteReducers(DbConnection conn, SetReducerFlags SetReducerFlags) : base(conn) { this.SetCallReducerFlags = SetReducerFlags; }
		internal readonly SetReducerFlags SetCallReducerFlags;
		public delegate void AddPlayerHandler(EventContext ctx, string name);
		public event AddPlayerHandler? OnAddPlayer;

		public void AddPlayer(string name)
		{
			conn.InternalCallReducer(new Reducer.AddPlayer(name), this.SetCallReducerFlags.AddPlayerFlags);
		}

		public bool InvokeAddPlayer(EventContext ctx, Reducer.AddPlayer args)
		{
			if (OnAddPlayer == null) return false;
			OnAddPlayer(
				ctx,
				args.Name
			);
			return true;
		}
		public delegate void AddPrivateHandler(EventContext ctx, string name);
		public event AddPrivateHandler? OnAddPrivate;

		public void AddPrivate(string name)
		{
			conn.InternalCallReducer(new Reducer.AddPrivate(name), this.SetCallReducerFlags.AddPrivateFlags);
		}

		public bool InvokeAddPrivate(EventContext ctx, Reducer.AddPrivate args)
		{
			if (OnAddPrivate == null) return false;
			OnAddPrivate(
				ctx,
				args.Name
			);
			return true;
		}
		public delegate void AssertCallerIdentityIsModuleIdentityHandler(EventContext ctx);
		public event AssertCallerIdentityIsModuleIdentityHandler? OnAssertCallerIdentityIsModuleIdentity;

		public void AssertCallerIdentityIsModuleIdentity()
		{
			conn.InternalCallReducer(new Reducer.AssertCallerIdentityIsModuleIdentity(), this.SetCallReducerFlags.AssertCallerIdentityIsModuleIdentityFlags);
		}

		public bool InvokeAssertCallerIdentityIsModuleIdentity(EventContext ctx, Reducer.AssertCallerIdentityIsModuleIdentity args)
		{
			if (OnAssertCallerIdentityIsModuleIdentity == null) return false;
			OnAssertCallerIdentityIsModuleIdentity(
				ctx
			);
			return true;
		}
		public delegate void DeletePlayerHandler(EventContext ctx, ulong id);
		public event DeletePlayerHandler? OnDeletePlayer;

		public void DeletePlayer(ulong id)
		{
			conn.InternalCallReducer(new Reducer.DeletePlayer(id), this.SetCallReducerFlags.DeletePlayerFlags);
		}

		public bool InvokeDeletePlayer(EventContext ctx, Reducer.DeletePlayer args)
		{
			if (OnDeletePlayer == null) return false;
			OnDeletePlayer(
				ctx,
				args.Id
			);
			return true;
		}
		public delegate void DeletePlayersByNameHandler(EventContext ctx, string name);
		public event DeletePlayersByNameHandler? OnDeletePlayersByName;

		public void DeletePlayersByName(string name)
		{
			conn.InternalCallReducer(new Reducer.DeletePlayersByName(name), this.SetCallReducerFlags.DeletePlayersByNameFlags);
		}

		public bool InvokeDeletePlayersByName(EventContext ctx, Reducer.DeletePlayersByName args)
		{
			if (OnDeletePlayersByName == null) return false;
			OnDeletePlayersByName(
				ctx,
				args.Name
			);
			return true;
		}
		public delegate void QueryPrivateHandler(EventContext ctx);
		public event QueryPrivateHandler? OnQueryPrivate;

		public void QueryPrivate()
		{
			conn.InternalCallReducer(new Reducer.QueryPrivate(), this.SetCallReducerFlags.QueryPrivateFlags);
		}

		public bool InvokeQueryPrivate(EventContext ctx, Reducer.QueryPrivate args)
		{
			if (OnQueryPrivate == null) return false;
			OnQueryPrivate(
				ctx
			);
			return true;
		}
		public delegate void RepeatingTestHandler(EventContext ctx, SpacetimeDB.RepeatingTestArg arg);
		public event RepeatingTestHandler? OnRepeatingTest;

		public void RepeatingTest(SpacetimeDB.RepeatingTestArg arg)
		{
			conn.InternalCallReducer(new Reducer.RepeatingTest(arg), this.SetCallReducerFlags.RepeatingTestFlags);
		}

		public bool InvokeRepeatingTest(EventContext ctx, Reducer.RepeatingTest args)
		{
			if (OnRepeatingTest == null) return false;
			OnRepeatingTest(
				ctx,
				args.Arg
			);
			return true;
		}
		public delegate void TestHandler(EventContext ctx, SpacetimeDB.TestA arg, SpacetimeDB.TestB arg2, SpacetimeDB.Namespace.Types.TestC arg3, SpacetimeDB.Namespace.TestF arg4);
		public event TestHandler? OnTest;

		public void Test(SpacetimeDB.TestA arg, SpacetimeDB.TestB arg2, SpacetimeDB.Namespace.Types.TestC arg3, SpacetimeDB.Namespace.TestF arg4)
		{
			conn.InternalCallReducer(new Reducer.Test(arg, arg2, arg3, arg4), this.SetCallReducerFlags.TestFlags);
		}

		public bool InvokeTest(EventContext ctx, Reducer.Test args)
		{
			if (OnTest == null) return false;
			OnTest(
				ctx,
				args.Arg,
				args.Arg2,
				args.Arg3,
				args.Arg4
			);
			return true;
		}
		public delegate void TestBtreeIndexArgsHandler(EventContext ctx);
		public event TestBtreeIndexArgsHandler? OnTestBtreeIndexArgs;

		public void TestBtreeIndexArgs()
		{
			conn.InternalCallReducer(new Reducer.TestBtreeIndexArgs(), this.SetCallReducerFlags.TestBtreeIndexArgsFlags);
		}

		public bool InvokeTestBtreeIndexArgs(EventContext ctx, Reducer.TestBtreeIndexArgs args)
		{
			if (OnTestBtreeIndexArgs == null) return false;
			OnTestBtreeIndexArgs(
				ctx
			);
			return true;
		}
	}

	public sealed class SetReducerFlags
	{
		internal SetReducerFlags() { }
		internal CallReducerFlags AddPlayerFlags;
		public void AddPlayer(CallReducerFlags flags) { this.AddPlayerFlags = flags; }
		internal CallReducerFlags AddPrivateFlags;
		public void AddPrivate(CallReducerFlags flags) { this.AddPrivateFlags = flags; }
		internal CallReducerFlags AssertCallerIdentityIsModuleIdentityFlags;
		public void AssertCallerIdentityIsModuleIdentity(CallReducerFlags flags) { this.AssertCallerIdentityIsModuleIdentityFlags = flags; }
		internal CallReducerFlags DeletePlayerFlags;
		public void DeletePlayer(CallReducerFlags flags) { this.DeletePlayerFlags = flags; }
		internal CallReducerFlags DeletePlayersByNameFlags;
		public void DeletePlayersByName(CallReducerFlags flags) { this.DeletePlayersByNameFlags = flags; }
		internal CallReducerFlags QueryPrivateFlags;
		public void QueryPrivate(CallReducerFlags flags) { this.QueryPrivateFlags = flags; }
		internal CallReducerFlags RepeatingTestFlags;
		public void RepeatingTest(CallReducerFlags flags) { this.RepeatingTestFlags = flags; }
		internal CallReducerFlags TestFlags;
		public void Test(CallReducerFlags flags) { this.TestFlags = flags; }
		internal CallReducerFlags TestBtreeIndexArgsFlags;
		public void TestBtreeIndexArgs(CallReducerFlags flags) { this.TestBtreeIndexArgsFlags = flags; }
	}

	public partial record EventContext : DbContext<RemoteTables>, IEventContext
	{
		public readonly RemoteReducers Reducers;
		public readonly SetReducerFlags SetReducerFlags;
		public readonly Event<Reducer> Event;

		internal EventContext(DbConnection conn, Event<Reducer> reducerEvent) : base(conn.Db)
		{
			Reducers = conn.Reducers;
			SetReducerFlags = conn.SetReducerFlags;
			Event = reducerEvent;
		}
	}

	public abstract partial class Reducer
	{
		private Reducer() { }

		[SpacetimeDB.Type]
		[DataContract]
		public partial class AddPlayer : Reducer, IReducerArgs
		{
			[DataMember(Name = "name")]
			public string Name;

			public AddPlayer(string Name)
			{
				this.Name = Name;
			}

			public AddPlayer()
			{
				this.Name = "";
			}

			string IReducerArgs.ReducerName => "add_player";
		}

		[SpacetimeDB.Type]
		[DataContract]
		public partial class AddPrivate : Reducer, IReducerArgs
		{
			[DataMember(Name = "name")]
			public string Name;

			public AddPrivate(string Name)
			{
				this.Name = Name;
			}

			public AddPrivate()
			{
				this.Name = "";
			}

			string IReducerArgs.ReducerName => "add_private";
		}

		[SpacetimeDB.Type]
		[DataContract]
		public partial class AssertCallerIdentityIsModuleIdentity : Reducer, IReducerArgs
		{
			string IReducerArgs.ReducerName => "assert_caller_identity_is_module_identity";
		}

		[SpacetimeDB.Type]
		[DataContract]
		public partial class DeletePlayer : Reducer, IReducerArgs
		{
			[DataMember(Name = "id")]
			public ulong Id;

			public DeletePlayer(ulong Id)
			{
				this.Id = Id;
			}

			public DeletePlayer()
			{
			}

			string IReducerArgs.ReducerName => "delete_player";
		}

		[SpacetimeDB.Type]
		[DataContract]
		public partial class DeletePlayersByName : Reducer, IReducerArgs
		{
			[DataMember(Name = "name")]
			public string Name;

			public DeletePlayersByName(string Name)
			{
				this.Name = Name;
			}

			public DeletePlayersByName()
			{
				this.Name = "";
			}

			string IReducerArgs.ReducerName => "delete_players_by_name";
		}

		[SpacetimeDB.Type]
		[DataContract]
		public partial class QueryPrivate : Reducer, IReducerArgs
		{
			string IReducerArgs.ReducerName => "query_private";
		}

		[SpacetimeDB.Type]
		[DataContract]
		public partial class RepeatingTest : Reducer, IReducerArgs
		{
			[DataMember(Name = "arg")]
			public SpacetimeDB.RepeatingTestArg Arg;

			public RepeatingTest(SpacetimeDB.RepeatingTestArg Arg)
			{
				this.Arg = Arg;
			}

			public RepeatingTest()
			{
				this.Arg = new();
			}

			string IReducerArgs.ReducerName => "repeating_test";
		}

		[SpacetimeDB.Type]
		[DataContract]
		public partial class Test : Reducer, IReducerArgs
		{
			[DataMember(Name = "arg")]
			public SpacetimeDB.TestA Arg;
			[DataMember(Name = "arg2")]
			public SpacetimeDB.TestB Arg2;
			[DataMember(Name = "arg3")]
			public SpacetimeDB.Namespace.Types.TestC Arg3;
			[DataMember(Name = "arg4")]
			public SpacetimeDB.Namespace.TestF Arg4;

			public Test(
				SpacetimeDB.TestA Arg,
				SpacetimeDB.TestB Arg2,
				SpacetimeDB.Namespace.Types.TestC Arg3,
				SpacetimeDB.Namespace.TestF Arg4
			)
			{
				this.Arg = Arg;
				this.Arg2 = Arg2;
				this.Arg3 = Arg3;
				this.Arg4 = Arg4;
			}

			public Test()
			{
				this.Arg = new();
				this.Arg2 = new();
				this.Arg4 = null!;
			}

			string IReducerArgs.ReducerName => "test";
		}

		[SpacetimeDB.Type]
		[DataContract]
		public partial class TestBtreeIndexArgs : Reducer, IReducerArgs
		{
			string IReducerArgs.ReducerName => "test_btree_index_args";
		}

		public class StdbNone : Reducer {}
		public class StdbIdentityConnected : Reducer {}
		public class StdbIdentityDisconnected : Reducer {}
	}

	public class DbConnection : DbConnectionBase<DbConnection, Reducer>
	{
		public readonly RemoteTables Db = new();
		public readonly RemoteReducers Reducers;
		public readonly SetReducerFlags SetReducerFlags;

		public DbConnection()
		{
			SetReducerFlags = new();
			Reducers = new(this, this.SetReducerFlags);

			clientDB.AddTable<HasSpecialStuff>("has_special_stuff", Db.HasSpecialStuff);
			clientDB.AddTable<Player>("logged_out_player", Db.LoggedOutPlayer);
			clientDB.AddTable<PkMultiIdentity>("pk_multi_identity", Db.PkMultiIdentity);
			clientDB.AddTable<Player>("player", Db.Player);
			clientDB.AddTable<Point>("points", Db.Points);
			clientDB.AddTable<Private>("private", Db.Private);
			clientDB.AddTable<RepeatingTestArg>("repeating_test_arg", Db.RepeatingTestArg);
			clientDB.AddTable<TestA>("test_a", Db.TestA);
			clientDB.AddTable<TestD>("test_d", Db.TestD);
			clientDB.AddTable<TestE>("test_e", Db.TestE);
			clientDB.AddTable<TestFoobar>("test_f", Db.TestF);
		}

		protected override Reducer ToReducer(TransactionUpdate update)
		{
			var encodedArgs = update.ReducerCall.Args;
			return update.ReducerCall.ReducerName switch {
				"add_player" => BSATNHelpers.Decode<Reducer.AddPlayer>(encodedArgs),
				"add_private" => BSATNHelpers.Decode<Reducer.AddPrivate>(encodedArgs),
				"assert_caller_identity_is_module_identity" => BSATNHelpers.Decode<Reducer.AssertCallerIdentityIsModuleIdentity>(encodedArgs),
				"delete_player" => BSATNHelpers.Decode<Reducer.DeletePlayer>(encodedArgs),
				"delete_players_by_name" => BSATNHelpers.Decode<Reducer.DeletePlayersByName>(encodedArgs),
				"query_private" => BSATNHelpers.Decode<Reducer.QueryPrivate>(encodedArgs),
				"repeating_test" => BSATNHelpers.Decode<Reducer.RepeatingTest>(encodedArgs),
				"test" => BSATNHelpers.Decode<Reducer.Test>(encodedArgs),
				"test_btree_index_args" => BSATNHelpers.Decode<Reducer.TestBtreeIndexArgs>(encodedArgs),
				"<none>" => new Reducer.StdbNone(),
				"__identity_connected__" => new Reducer.StdbIdentityConnected(),
				"__identity_disconnected__" => new Reducer.StdbIdentityDisconnected(),
				"" => new Reducer.StdbNone(),
				var reducer => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
			};
		}

		protected override IEventContext ToEventContext(Event<Reducer> reducerEvent) =>
		new EventContext(this, reducerEvent);

		protected override bool Dispatch(IEventContext context, Reducer reducer)
		{
			var eventContext = (EventContext)context;
			return reducer switch {
				Reducer.AddPlayer args => Reducers.InvokeAddPlayer(eventContext, args),
				Reducer.AddPrivate args => Reducers.InvokeAddPrivate(eventContext, args),
				Reducer.AssertCallerIdentityIsModuleIdentity args => Reducers.InvokeAssertCallerIdentityIsModuleIdentity(eventContext, args),
				Reducer.DeletePlayer args => Reducers.InvokeDeletePlayer(eventContext, args),
				Reducer.DeletePlayersByName args => Reducers.InvokeDeletePlayersByName(eventContext, args),
				Reducer.QueryPrivate args => Reducers.InvokeQueryPrivate(eventContext, args),
				Reducer.RepeatingTest args => Reducers.InvokeRepeatingTest(eventContext, args),
				Reducer.Test args => Reducers.InvokeTest(eventContext, args),
				Reducer.TestBtreeIndexArgs args => Reducers.InvokeTestBtreeIndexArgs(eventContext, args),
				Reducer.StdbNone or
				Reducer.StdbIdentityConnected or
				Reducer.StdbIdentityDisconnected => true,
				_ => throw new ArgumentOutOfRangeException("Reducer", $"Unknown reducer {reducer}")
			};
		}

		public SubscriptionBuilder<EventContext> SubscriptionBuilder() => new(this);
	}
}
'''
