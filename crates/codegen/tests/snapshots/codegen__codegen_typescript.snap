---
source: crates/codegen/tests/codegen.rs
expression: outfiles
---
"add_player_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type AddPlayer = {
  name: string,
};
export default AddPlayer;

/**
 * A namespace for generated helper functions.
 */
export namespace AddPlayer {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "name", algebraicType: AlgebraicType.String},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: AddPlayer): void {
    AlgebraicType.serializeValue(writer, AddPlayer.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): AddPlayer {
    return AlgebraicType.deserializeValue(reader, AddPlayer.getTypeScriptAlgebraicType());
  }

}

'''
"add_private_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type AddPrivate = {
  name: string,
};
export default AddPrivate;

/**
 * A namespace for generated helper functions.
 */
export namespace AddPrivate {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "name", algebraicType: AlgebraicType.String},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: AddPrivate): void {
    AlgebraicType.serializeValue(writer, AddPrivate.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): AddPrivate {
    return AlgebraicType.deserializeValue(reader, AddPrivate.getTypeScriptAlgebraicType());
  }

}

'''
"add_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type Add = {
  name: string,
  age: number,
};
export default Add;

/**
 * A namespace for generated helper functions.
 */
export namespace Add {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "name", algebraicType: AlgebraicType.String},
        { name: "age", algebraicType: AlgebraicType.U8},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: Add): void {
    AlgebraicType.serializeValue(writer, Add.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): Add {
    return AlgebraicType.deserializeValue(reader, Add.getTypeScriptAlgebraicType());
  }

}

'''
"assert_caller_identity_is_module_identity_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type AssertCallerIdentityIsModuleIdentity = {};
export default AssertCallerIdentityIsModuleIdentity;

/**
 * A namespace for generated helper functions.
 */
export namespace AssertCallerIdentityIsModuleIdentity {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: AssertCallerIdentityIsModuleIdentity): void {
    AlgebraicType.serializeValue(writer, AssertCallerIdentityIsModuleIdentity.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): AssertCallerIdentityIsModuleIdentity {
    return AlgebraicType.deserializeValue(reader, AssertCallerIdentityIsModuleIdentity.getTypeScriptAlgebraicType());
  }

}

'''
"baz_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
export type Baz = {
  field: string,
};
export default Baz;

/**
 * A namespace for generated helper functions.
 */
export namespace Baz {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "field", algebraicType: AlgebraicType.String},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: Baz): void {
    AlgebraicType.serializeValue(writer, Baz.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): Baz {
    return AlgebraicType.deserializeValue(reader, Baz.getTypeScriptAlgebraicType());
  }

}


'''
"client_connected_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type ClientConnected = {};
export default ClientConnected;

/**
 * A namespace for generated helper functions.
 */
export namespace ClientConnected {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: ClientConnected): void {
    AlgebraicType.serializeValue(writer, ClientConnected.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): ClientConnected {
    return AlgebraicType.deserializeValue(reader, ClientConnected.getTypeScriptAlgebraicType());
  }

}

'''
"delete_player_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type DeletePlayer = {
  id: bigint,
};
export default DeletePlayer;

/**
 * A namespace for generated helper functions.
 */
export namespace DeletePlayer {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "id", algebraicType: AlgebraicType.U64},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: DeletePlayer): void {
    AlgebraicType.serializeValue(writer, DeletePlayer.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): DeletePlayer {
    return AlgebraicType.deserializeValue(reader, DeletePlayer.getTypeScriptAlgebraicType());
  }

}

'''
"delete_players_by_name_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type DeletePlayersByName = {
  name: string,
};
export default DeletePlayersByName;

/**
 * A namespace for generated helper functions.
 */
export namespace DeletePlayersByName {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "name", algebraicType: AlgebraicType.String},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: DeletePlayersByName): void {
    AlgebraicType.serializeValue(writer, DeletePlayersByName.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): DeletePlayersByName {
    return AlgebraicType.deserializeValue(reader, DeletePlayersByName.getTypeScriptAlgebraicType());
  }

}

'''
"foobar_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { Baz as __Baz } from "./baz_type";

// These are the generated variant types for each variant of the tagged union.
// One type is generated per variant and will be used in the `value` field of
// the tagged union.
// NOTE: These are generated in a separate namespace because TypeScript
// interprets `Foo` in the statement `const x: Foo.Variant = ...` as the type `Foo` instead of
// the namespace `Foo` which includes types within it. Therefore we generate the `FooVariants`
// type. e.g. `const x: FooVariants.Variant`
export namespace FoobarVariants {
  export type Baz = { tag: "Baz", value: __Baz };
  export type Bar = { tag: "Bar" };
  export type Har = { tag: "Har", value: number };
}

// A namespace for generated variants and helper functions.
export namespace Foobar {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Baz = (value: __Baz): Foobar => ({ tag: "Baz", value });
  export const Bar: { tag: "Bar" } = { tag: "Bar" };
  export const Har = (value: number): Foobar => ({ tag: "Har", value });

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Sum({
      variants: [
        { name: "Baz", algebraicType: __Baz.getTypeScriptAlgebraicType() },
        { name: "Bar", algebraicType: AlgebraicType.Product({ elements: [] }) },
        { name: "Har", algebraicType: AlgebraicType.U32 },
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: Foobar): void {
      AlgebraicType.serializeValue(writer, Foobar.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): Foobar {
      return AlgebraicType.deserializeValue(reader, Foobar.getTypeScriptAlgebraicType());
  }

}

// The tagged union or sum type for the algebraic type `Foobar`.
export type Foobar = FoobarVariants.Baz |
  FoobarVariants.Bar |
  FoobarVariants.Har;

export default Foobar;

'''
"has_special_stuff_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { HasSpecialStuff } from "./has_special_stuff_type";
import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `has_special_stuff`.
 *
 * Obtain a handle from the [`hasSpecialStuff`] property on [`RemoteTables`],
 * like `ctx.db.hasSpecialStuff`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.hasSpecialStuff.on_insert(...)`.
 */
export class HasSpecialStuffTableHandle {
  tableCache: TableCache<HasSpecialStuff>;

  constructor(tableCache: TableCache<HasSpecialStuff>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<HasSpecialStuff> {
    return this.tableCache.iter();
  }

  onInsert = (cb: (ctx: EventContext, row: HasSpecialStuff) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: HasSpecialStuff) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: HasSpecialStuff) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: HasSpecialStuff) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }
}
'''
"has_special_stuff_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
export type HasSpecialStuff = {
  identity: Identity,
  connectionId: ConnectionId,
};
export default HasSpecialStuff;

/**
 * A namespace for generated helper functions.
 */
export namespace HasSpecialStuff {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "identity", algebraicType: AlgebraicType.createIdentityType()},
        { name: "connectionId", algebraicType: AlgebraicType.createConnectionIdType()},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: HasSpecialStuff): void {
    AlgebraicType.serializeValue(writer, HasSpecialStuff.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): HasSpecialStuff {
    return AlgebraicType.deserializeValue(reader, HasSpecialStuff.getTypeScriptAlgebraicType());
  }

}


'''
"index.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Add } from "./add_reducer.ts";
export { Add };
import { AddPlayer } from "./add_player_reducer.ts";
export { AddPlayer };
import { AddPrivate } from "./add_private_reducer.ts";
export { AddPrivate };
import { AssertCallerIdentityIsModuleIdentity } from "./assert_caller_identity_is_module_identity_reducer.ts";
export { AssertCallerIdentityIsModuleIdentity };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { DeletePlayer } from "./delete_player_reducer.ts";
export { DeletePlayer };
import { DeletePlayersByName } from "./delete_players_by_name_reducer.ts";
export { DeletePlayersByName };
import { ListOverAge } from "./list_over_age_reducer.ts";
export { ListOverAge };
import { LogModuleIdentity } from "./log_module_identity_reducer.ts";
export { LogModuleIdentity };
import { QueryPrivate } from "./query_private_reducer.ts";
export { QueryPrivate };
import { RepeatingTest } from "./repeating_test_reducer.ts";
export { RepeatingTest };
import { SayHello } from "./say_hello_reducer.ts";
export { SayHello };
import { Test } from "./test_reducer.ts";
export { Test };
import { TestBtreeIndexArgs } from "./test_btree_index_args_reducer.ts";
export { TestBtreeIndexArgs };

// Import and reexport all table handle types
import { HasSpecialStuffTableHandle } from "./has_special_stuff_table.ts";
export { HasSpecialStuffTableHandle };
import { LoggedOutPlayerTableHandle } from "./logged_out_player_table.ts";
export { LoggedOutPlayerTableHandle };
import { PersonTableHandle } from "./person_table.ts";
export { PersonTableHandle };
import { PkMultiIdentityTableHandle } from "./pk_multi_identity_table.ts";
export { PkMultiIdentityTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { PointsTableHandle } from "./points_table.ts";
export { PointsTableHandle };
import { PrivateTableTableHandle } from "./private_table_table.ts";
export { PrivateTableTableHandle };
import { RepeatingTestArgTableHandle } from "./repeating_test_arg_table.ts";
export { RepeatingTestArgTableHandle };
import { TestATableHandle } from "./test_a_table.ts";
export { TestATableHandle };
import { TestDTableHandle } from "./test_d_table.ts";
export { TestDTableHandle };
import { TestETableHandle } from "./test_e_table.ts";
export { TestETableHandle };
import { TestFTableHandle } from "./test_f_table.ts";
export { TestFTableHandle };

// Import and reexport all types
import { Baz } from "./baz_type.ts";
export { Baz };
import { Foobar } from "./foobar_type.ts";
export { Foobar };
import { HasSpecialStuff } from "./has_special_stuff_type.ts";
export { HasSpecialStuff };
import { Person } from "./person_type.ts";
export { Person };
import { PkMultiIdentity } from "./pk_multi_identity_type.ts";
export { PkMultiIdentity };
import { Player } from "./player_type.ts";
export { Player };
import { Point } from "./point_type.ts";
export { Point };
import { PrivateTable } from "./private_table_type.ts";
export { PrivateTable };
import { RepeatingTestArg } from "./repeating_test_arg_type.ts";
export { RepeatingTestArg };
import { TestA } from "./test_a_type.ts";
export { TestA };
import { TestB } from "./test_b_type.ts";
export { TestB };
import { TestD } from "./test_d_type.ts";
export { TestD };
import { TestE } from "./test_e_type.ts";
export { TestE };
import { TestFoobar } from "./test_foobar_type.ts";
export { TestFoobar };
import { NamespaceTestC } from "./namespace_test_c_type.ts";
export { NamespaceTestC };
import { NamespaceTestF } from "./namespace_test_f_type.ts";
export { NamespaceTestF };

const REMOTE_MODULE = {
  tables: {
    has_special_stuff: {
      tableName: "has_special_stuff",
      rowType: HasSpecialStuff.getTypeScriptAlgebraicType(),
    },
    logged_out_player: {
      tableName: "logged_out_player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: Player.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    person: {
      tableName: "person",
      rowType: Person.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: Person.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    pk_multi_identity: {
      tableName: "pk_multi_identity",
      rowType: PkMultiIdentity.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: PkMultiIdentity.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: Player.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    points: {
      tableName: "points",
      rowType: Point.getTypeScriptAlgebraicType(),
    },
    private_table: {
      tableName: "private_table",
      rowType: PrivateTable.getTypeScriptAlgebraicType(),
    },
    repeating_test_arg: {
      tableName: "repeating_test_arg",
      rowType: RepeatingTestArg.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: RepeatingTestArg.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    test_a: {
      tableName: "test_a",
      rowType: TestA.getTypeScriptAlgebraicType(),
    },
    test_d: {
      tableName: "test_d",
      rowType: TestD.getTypeScriptAlgebraicType(),
    },
    test_e: {
      tableName: "test_e",
      rowType: TestE.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: TestE.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    test_f: {
      tableName: "test_f",
      rowType: TestFoobar.getTypeScriptAlgebraicType(),
    },
  },
  reducers: {
    add: {
      reducerName: "add",
      argsType: Add.getTypeScriptAlgebraicType(),
    },
    add_player: {
      reducerName: "add_player",
      argsType: AddPlayer.getTypeScriptAlgebraicType(),
    },
    add_private: {
      reducerName: "add_private",
      argsType: AddPrivate.getTypeScriptAlgebraicType(),
    },
    assert_caller_identity_is_module_identity: {
      reducerName: "assert_caller_identity_is_module_identity",
      argsType: AssertCallerIdentityIsModuleIdentity.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    delete_player: {
      reducerName: "delete_player",
      argsType: DeletePlayer.getTypeScriptAlgebraicType(),
    },
    delete_players_by_name: {
      reducerName: "delete_players_by_name",
      argsType: DeletePlayersByName.getTypeScriptAlgebraicType(),
    },
    list_over_age: {
      reducerName: "list_over_age",
      argsType: ListOverAge.getTypeScriptAlgebraicType(),
    },
    log_module_identity: {
      reducerName: "log_module_identity",
      argsType: LogModuleIdentity.getTypeScriptAlgebraicType(),
    },
    query_private: {
      reducerName: "query_private",
      argsType: QueryPrivate.getTypeScriptAlgebraicType(),
    },
    repeating_test: {
      reducerName: "repeating_test",
      argsType: RepeatingTest.getTypeScriptAlgebraicType(),
    },
    say_hello: {
      reducerName: "say_hello",
      argsType: SayHello.getTypeScriptAlgebraicType(),
    },
    test: {
      reducerName: "test",
      argsType: Test.getTypeScriptAlgebraicType(),
    },
    test_btree_index_args: {
      reducerName: "test_btree_index_args",
      argsType: TestBtreeIndexArgs.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "X.Y.Z",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Add", args: Add }
| { name: "AddPlayer", args: AddPlayer }
| { name: "AddPrivate", args: AddPrivate }
| { name: "AssertCallerIdentityIsModuleIdentity", args: AssertCallerIdentityIsModuleIdentity }
| { name: "ClientConnected", args: ClientConnected }
| { name: "DeletePlayer", args: DeletePlayer }
| { name: "DeletePlayersByName", args: DeletePlayersByName }
| { name: "ListOverAge", args: ListOverAge }
| { name: "LogModuleIdentity", args: LogModuleIdentity }
| { name: "QueryPrivate", args: QueryPrivate }
| { name: "RepeatingTest", args: RepeatingTest }
| { name: "SayHello", args: SayHello }
| { name: "Test", args: Test }
| { name: "TestBtreeIndexArgs", args: TestBtreeIndexArgs }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  add(name: string, age: number) {
    const __args = { name, age };
    let __writer = new BinaryWriter(1024);
    Add.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add", __argsBuffer, this.setCallReducerFlags.addFlags);
  }

  onAdd(callback: (ctx: ReducerEventContext, name: string, age: number) => void) {
    this.connection.onReducer("add", callback);
  }

  removeOnAdd(callback: (ctx: ReducerEventContext, name: string, age: number) => void) {
    this.connection.offReducer("add", callback);
  }

  addPlayer(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    AddPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_player", __argsBuffer, this.setCallReducerFlags.addPlayerFlags);
  }

  onAddPlayer(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("add_player", callback);
  }

  removeOnAddPlayer(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("add_player", callback);
  }

  addPrivate(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    AddPrivate.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_private", __argsBuffer, this.setCallReducerFlags.addPrivateFlags);
  }

  onAddPrivate(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("add_private", callback);
  }

  removeOnAddPrivate(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("add_private", callback);
  }

  assertCallerIdentityIsModuleIdentity() {
    this.connection.callReducer("assert_caller_identity_is_module_identity", new Uint8Array(0), this.setCallReducerFlags.assertCallerIdentityIsModuleIdentityFlags);
  }

  onAssertCallerIdentityIsModuleIdentity(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("assert_caller_identity_is_module_identity", callback);
  }

  removeOnAssertCallerIdentityIsModuleIdentity(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("assert_caller_identity_is_module_identity", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  deletePlayer(id: bigint) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    DeletePlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_player", __argsBuffer, this.setCallReducerFlags.deletePlayerFlags);
  }

  onDeletePlayer(callback: (ctx: ReducerEventContext, id: bigint) => void) {
    this.connection.onReducer("delete_player", callback);
  }

  removeOnDeletePlayer(callback: (ctx: ReducerEventContext, id: bigint) => void) {
    this.connection.offReducer("delete_player", callback);
  }

  deletePlayersByName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    DeletePlayersByName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_players_by_name", __argsBuffer, this.setCallReducerFlags.deletePlayersByNameFlags);
  }

  onDeletePlayersByName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("delete_players_by_name", callback);
  }

  removeOnDeletePlayersByName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("delete_players_by_name", callback);
  }

  listOverAge(age: number) {
    const __args = { age };
    let __writer = new BinaryWriter(1024);
    ListOverAge.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("list_over_age", __argsBuffer, this.setCallReducerFlags.listOverAgeFlags);
  }

  onListOverAge(callback: (ctx: ReducerEventContext, age: number) => void) {
    this.connection.onReducer("list_over_age", callback);
  }

  removeOnListOverAge(callback: (ctx: ReducerEventContext, age: number) => void) {
    this.connection.offReducer("list_over_age", callback);
  }

  logModuleIdentity() {
    this.connection.callReducer("log_module_identity", new Uint8Array(0), this.setCallReducerFlags.logModuleIdentityFlags);
  }

  onLogModuleIdentity(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("log_module_identity", callback);
  }

  removeOnLogModuleIdentity(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("log_module_identity", callback);
  }

  queryPrivate() {
    this.connection.callReducer("query_private", new Uint8Array(0), this.setCallReducerFlags.queryPrivateFlags);
  }

  onQueryPrivate(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("query_private", callback);
  }

  removeOnQueryPrivate(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("query_private", callback);
  }

  repeatingTest(arg: RepeatingTestArg) {
    const __args = { arg };
    let __writer = new BinaryWriter(1024);
    RepeatingTest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("repeating_test", __argsBuffer, this.setCallReducerFlags.repeatingTestFlags);
  }

  onRepeatingTest(callback: (ctx: ReducerEventContext, arg: RepeatingTestArg) => void) {
    this.connection.onReducer("repeating_test", callback);
  }

  removeOnRepeatingTest(callback: (ctx: ReducerEventContext, arg: RepeatingTestArg) => void) {
    this.connection.offReducer("repeating_test", callback);
  }

  sayHello() {
    this.connection.callReducer("say_hello", new Uint8Array(0), this.setCallReducerFlags.sayHelloFlags);
  }

  onSayHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("say_hello", callback);
  }

  removeOnSayHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("say_hello", callback);
  }

  test(arg: TestA, arg2: TestB, arg3: NamespaceTestC, arg4: NamespaceTestF) {
    const __args = { arg, arg2, arg3, arg4 };
    let __writer = new BinaryWriter(1024);
    Test.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("test", __argsBuffer, this.setCallReducerFlags.testFlags);
  }

  onTest(callback: (ctx: ReducerEventContext, arg: TestA, arg2: TestB, arg3: NamespaceTestC, arg4: NamespaceTestF) => void) {
    this.connection.onReducer("test", callback);
  }

  removeOnTest(callback: (ctx: ReducerEventContext, arg: TestA, arg2: TestB, arg3: NamespaceTestC, arg4: NamespaceTestF) => void) {
    this.connection.offReducer("test", callback);
  }

  testBtreeIndexArgs() {
    this.connection.callReducer("test_btree_index_args", new Uint8Array(0), this.setCallReducerFlags.testBtreeIndexArgsFlags);
  }

  onTestBtreeIndexArgs(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("test_btree_index_args", callback);
  }

  removeOnTestBtreeIndexArgs(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("test_btree_index_args", callback);
  }

}

export class SetReducerFlags {
  addFlags: CallReducerFlags = 'FullUpdate';
  add(flags: CallReducerFlags) {
    this.addFlags = flags;
  }

  addPlayerFlags: CallReducerFlags = 'FullUpdate';
  addPlayer(flags: CallReducerFlags) {
    this.addPlayerFlags = flags;
  }

  addPrivateFlags: CallReducerFlags = 'FullUpdate';
  addPrivate(flags: CallReducerFlags) {
    this.addPrivateFlags = flags;
  }

  assertCallerIdentityIsModuleIdentityFlags: CallReducerFlags = 'FullUpdate';
  assertCallerIdentityIsModuleIdentity(flags: CallReducerFlags) {
    this.assertCallerIdentityIsModuleIdentityFlags = flags;
  }

  deletePlayerFlags: CallReducerFlags = 'FullUpdate';
  deletePlayer(flags: CallReducerFlags) {
    this.deletePlayerFlags = flags;
  }

  deletePlayersByNameFlags: CallReducerFlags = 'FullUpdate';
  deletePlayersByName(flags: CallReducerFlags) {
    this.deletePlayersByNameFlags = flags;
  }

  listOverAgeFlags: CallReducerFlags = 'FullUpdate';
  listOverAge(flags: CallReducerFlags) {
    this.listOverAgeFlags = flags;
  }

  logModuleIdentityFlags: CallReducerFlags = 'FullUpdate';
  logModuleIdentity(flags: CallReducerFlags) {
    this.logModuleIdentityFlags = flags;
  }

  queryPrivateFlags: CallReducerFlags = 'FullUpdate';
  queryPrivate(flags: CallReducerFlags) {
    this.queryPrivateFlags = flags;
  }

  repeatingTestFlags: CallReducerFlags = 'FullUpdate';
  repeatingTest(flags: CallReducerFlags) {
    this.repeatingTestFlags = flags;
  }

  sayHelloFlags: CallReducerFlags = 'FullUpdate';
  sayHello(flags: CallReducerFlags) {
    this.sayHelloFlags = flags;
  }

  testFlags: CallReducerFlags = 'FullUpdate';
  test(flags: CallReducerFlags) {
    this.testFlags = flags;
  }

  testBtreeIndexArgsFlags: CallReducerFlags = 'FullUpdate';
  testBtreeIndexArgs(flags: CallReducerFlags) {
    this.testBtreeIndexArgsFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get hasSpecialStuff(): HasSpecialStuffTableHandle {
    return new HasSpecialStuffTableHandle(this.connection.clientCache.getOrCreateTable<HasSpecialStuff>(REMOTE_MODULE.tables.has_special_stuff));
  }

  get loggedOutPlayer(): LoggedOutPlayerTableHandle {
    return new LoggedOutPlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.logged_out_player));
  }

  get person(): PersonTableHandle {
    return new PersonTableHandle(this.connection.clientCache.getOrCreateTable<Person>(REMOTE_MODULE.tables.person));
  }

  get pkMultiIdentity(): PkMultiIdentityTableHandle {
    return new PkMultiIdentityTableHandle(this.connection.clientCache.getOrCreateTable<PkMultiIdentity>(REMOTE_MODULE.tables.pk_multi_identity));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get points(): PointsTableHandle {
    return new PointsTableHandle(this.connection.clientCache.getOrCreateTable<Point>(REMOTE_MODULE.tables.points));
  }

  get privateTable(): PrivateTableTableHandle {
    return new PrivateTableTableHandle(this.connection.clientCache.getOrCreateTable<PrivateTable>(REMOTE_MODULE.tables.private_table));
  }

  get repeatingTestArg(): RepeatingTestArgTableHandle {
    return new RepeatingTestArgTableHandle(this.connection.clientCache.getOrCreateTable<RepeatingTestArg>(REMOTE_MODULE.tables.repeating_test_arg));
  }

  get testA(): TestATableHandle {
    return new TestATableHandle(this.connection.clientCache.getOrCreateTable<TestA>(REMOTE_MODULE.tables.test_a));
  }

  get testD(): TestDTableHandle {
    return new TestDTableHandle(this.connection.clientCache.getOrCreateTable<TestD>(REMOTE_MODULE.tables.test_d));
  }

  get testE(): TestETableHandle {
    return new TestETableHandle(this.connection.clientCache.getOrCreateTable<TestE>(REMOTE_MODULE.tables.test_e));
  }

  get testF(): TestFTableHandle {
    return new TestFTableHandle(this.connection.clientCache.getOrCreateTable<TestFoobar>(REMOTE_MODULE.tables.test_f));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
'''
"list_over_age_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type ListOverAge = {
  age: number,
};
export default ListOverAge;

/**
 * A namespace for generated helper functions.
 */
export namespace ListOverAge {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "age", algebraicType: AlgebraicType.U8},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: ListOverAge): void {
    AlgebraicType.serializeValue(writer, ListOverAge.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): ListOverAge {
    return AlgebraicType.deserializeValue(reader, ListOverAge.getTypeScriptAlgebraicType());
  }

}

'''
"log_module_identity_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type LogModuleIdentity = {};
export default LogModuleIdentity;

/**
 * A namespace for generated helper functions.
 */
export namespace LogModuleIdentity {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: LogModuleIdentity): void {
    AlgebraicType.serializeValue(writer, LogModuleIdentity.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): LogModuleIdentity {
    return AlgebraicType.deserializeValue(reader, LogModuleIdentity.getTypeScriptAlgebraicType());
  }

}

'''
"logged_out_player_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { Player } from "./player_type";
import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `logged_out_player`.
 *
 * Obtain a handle from the [`loggedOutPlayer`] property on [`RemoteTables`],
 * like `ctx.db.loggedOutPlayer`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.loggedOutPlayer.on_insert(...)`.
 */
export class LoggedOutPlayerTableHandle {
  tableCache: TableCache<Player>;

  constructor(tableCache: TableCache<Player>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<Player> {
    return this.tableCache.iter();
  }
  /**
   * Access to the `identity` unique index on the table `logged_out_player`,
   * which allows point queries on the field of the same name
   * via the [`LoggedOutPlayerIdentityUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.loggedOutPlayer.identity().find(...)`.
   *
   * Get a handle on the `identity` unique index on the table `logged_out_player`.
   */
  identity = {
    // Find the subscribed row whose `identity` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: Identity): Player | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.identity, col_val)) {
          return row;
        }
      }
    },
  };
  /**
   * Access to the `playerId` unique index on the table `logged_out_player`,
   * which allows point queries on the field of the same name
   * via the [`LoggedOutPlayerPlayerIdUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.loggedOutPlayer.playerId().find(...)`.
   *
   * Get a handle on the `playerId` unique index on the table `logged_out_player`.
   */
  playerId = {
    // Find the subscribed row whose `playerId` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: bigint): Player | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.playerId, col_val)) {
          return row;
        }
      }
    },
  };
  /**
   * Access to the `name` unique index on the table `logged_out_player`,
   * which allows point queries on the field of the same name
   * via the [`LoggedOutPlayerNameUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.loggedOutPlayer.name().find(...)`.
   *
   * Get a handle on the `name` unique index on the table `logged_out_player`.
   */
  name = {
    // Find the subscribed row whose `name` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: string): Player | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.name, col_val)) {
          return row;
        }
      }
    },
  };

  onInsert = (cb: (ctx: EventContext, row: Player) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: Player) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: Player) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: Player) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }

  // Updates are only defined for tables with primary keys.
  onUpdate = (cb: (ctx: EventContext, oldRow: Player, newRow: Player) => void) => {
    return this.tableCache.onUpdate(cb);
  }

  removeOnUpdate = (cb: (ctx: EventContext, onRow: Player, newRow: Player) => void) => {
    return this.tableCache.removeOnUpdate(cb);
  }}
'''
"namespace_test_c_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// These are the generated variant types for each variant of the tagged union.
// One type is generated per variant and will be used in the `value` field of
// the tagged union.
// NOTE: These are generated in a separate namespace because TypeScript
// interprets `Foo` in the statement `const x: Foo.Variant = ...` as the type `Foo` instead of
// the namespace `Foo` which includes types within it. Therefore we generate the `FooVariants`
// type. e.g. `const x: FooVariants.Variant`
export namespace NamespaceTestCVariants {
  export type Foo = { tag: "Foo" };
  export type Bar = { tag: "Bar" };
}

// A namespace for generated variants and helper functions.
export namespace NamespaceTestC {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Foo: { tag: "Foo" } = { tag: "Foo" };
  export const Bar: { tag: "Bar" } = { tag: "Bar" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Sum({
      variants: [
        { name: "Foo", algebraicType: AlgebraicType.Product({ elements: [] }) },
        { name: "Bar", algebraicType: AlgebraicType.Product({ elements: [] }) },
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: NamespaceTestC): void {
      AlgebraicType.serializeValue(writer, NamespaceTestC.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): NamespaceTestC {
      return AlgebraicType.deserializeValue(reader, NamespaceTestC.getTypeScriptAlgebraicType());
  }

}

// The tagged union or sum type for the algebraic type `NamespaceTestC`.
export type NamespaceTestC = NamespaceTestCVariants.Foo |
  NamespaceTestCVariants.Bar;

export default NamespaceTestC;

'''
"namespace_test_f_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// These are the generated variant types for each variant of the tagged union.
// One type is generated per variant and will be used in the `value` field of
// the tagged union.
// NOTE: These are generated in a separate namespace because TypeScript
// interprets `Foo` in the statement `const x: Foo.Variant = ...` as the type `Foo` instead of
// the namespace `Foo` which includes types within it. Therefore we generate the `FooVariants`
// type. e.g. `const x: FooVariants.Variant`
export namespace NamespaceTestFVariants {
  export type Foo = { tag: "Foo" };
  export type Bar = { tag: "Bar" };
  export type Baz = { tag: "Baz", value: string };
}

// A namespace for generated variants and helper functions.
export namespace NamespaceTestF {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Foo: { tag: "Foo" } = { tag: "Foo" };
  export const Bar: { tag: "Bar" } = { tag: "Bar" };
  export const Baz = (value: string): NamespaceTestF => ({ tag: "Baz", value });

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Sum({
      variants: [
        { name: "Foo", algebraicType: AlgebraicType.Product({ elements: [] }) },
        { name: "Bar", algebraicType: AlgebraicType.Product({ elements: [] }) },
        { name: "Baz", algebraicType: AlgebraicType.String },
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: NamespaceTestF): void {
      AlgebraicType.serializeValue(writer, NamespaceTestF.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): NamespaceTestF {
      return AlgebraicType.deserializeValue(reader, NamespaceTestF.getTypeScriptAlgebraicType());
  }

}

// The tagged union or sum type for the algebraic type `NamespaceTestF`.
export type NamespaceTestF = NamespaceTestFVariants.Foo |
  NamespaceTestFVariants.Bar |
  NamespaceTestFVariants.Baz;

export default NamespaceTestF;

'''
"person_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { Person } from "./person_type";
import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `person`.
 *
 * Obtain a handle from the [`person`] property on [`RemoteTables`],
 * like `ctx.db.person`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.person.on_insert(...)`.
 */
export class PersonTableHandle {
  tableCache: TableCache<Person>;

  constructor(tableCache: TableCache<Person>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<Person> {
    return this.tableCache.iter();
  }
  /**
   * Access to the `id` unique index on the table `person`,
   * which allows point queries on the field of the same name
   * via the [`PersonIdUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.person.id().find(...)`.
   *
   * Get a handle on the `id` unique index on the table `person`.
   */
  id = {
    // Find the subscribed row whose `id` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: number): Person | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.id, col_val)) {
          return row;
        }
      }
    },
  };

  onInsert = (cb: (ctx: EventContext, row: Person) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: Person) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: Person) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: Person) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }

  // Updates are only defined for tables with primary keys.
  onUpdate = (cb: (ctx: EventContext, oldRow: Person, newRow: Person) => void) => {
    return this.tableCache.onUpdate(cb);
  }

  removeOnUpdate = (cb: (ctx: EventContext, onRow: Person, newRow: Person) => void) => {
    return this.tableCache.removeOnUpdate(cb);
  }}
'''
"person_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
export type Person = {
  id: number,
  name: string,
  age: number,
};
export default Person;

/**
 * A namespace for generated helper functions.
 */
export namespace Person {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "id", algebraicType: AlgebraicType.U32},
        { name: "name", algebraicType: AlgebraicType.String},
        { name: "age", algebraicType: AlgebraicType.U8},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: Person): void {
    AlgebraicType.serializeValue(writer, Person.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): Person {
    return AlgebraicType.deserializeValue(reader, Person.getTypeScriptAlgebraicType());
  }

}


'''
"pk_multi_identity_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { PkMultiIdentity } from "./pk_multi_identity_type";
import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `pk_multi_identity`.
 *
 * Obtain a handle from the [`pkMultiIdentity`] property on [`RemoteTables`],
 * like `ctx.db.pkMultiIdentity`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.pkMultiIdentity.on_insert(...)`.
 */
export class PkMultiIdentityTableHandle {
  tableCache: TableCache<PkMultiIdentity>;

  constructor(tableCache: TableCache<PkMultiIdentity>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<PkMultiIdentity> {
    return this.tableCache.iter();
  }
  /**
   * Access to the `id` unique index on the table `pk_multi_identity`,
   * which allows point queries on the field of the same name
   * via the [`PkMultiIdentityIdUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.pkMultiIdentity.id().find(...)`.
   *
   * Get a handle on the `id` unique index on the table `pk_multi_identity`.
   */
  id = {
    // Find the subscribed row whose `id` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: number): PkMultiIdentity | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.id, col_val)) {
          return row;
        }
      }
    },
  };
  /**
   * Access to the `other` unique index on the table `pk_multi_identity`,
   * which allows point queries on the field of the same name
   * via the [`PkMultiIdentityOtherUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.pkMultiIdentity.other().find(...)`.
   *
   * Get a handle on the `other` unique index on the table `pk_multi_identity`.
   */
  other = {
    // Find the subscribed row whose `other` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: number): PkMultiIdentity | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.other, col_val)) {
          return row;
        }
      }
    },
  };

  onInsert = (cb: (ctx: EventContext, row: PkMultiIdentity) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: PkMultiIdentity) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: PkMultiIdentity) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: PkMultiIdentity) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }

  // Updates are only defined for tables with primary keys.
  onUpdate = (cb: (ctx: EventContext, oldRow: PkMultiIdentity, newRow: PkMultiIdentity) => void) => {
    return this.tableCache.onUpdate(cb);
  }

  removeOnUpdate = (cb: (ctx: EventContext, onRow: PkMultiIdentity, newRow: PkMultiIdentity) => void) => {
    return this.tableCache.removeOnUpdate(cb);
  }}
'''
"pk_multi_identity_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
export type PkMultiIdentity = {
  id: number,
  other: number,
};
export default PkMultiIdentity;

/**
 * A namespace for generated helper functions.
 */
export namespace PkMultiIdentity {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "id", algebraicType: AlgebraicType.U32},
        { name: "other", algebraicType: AlgebraicType.U32},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: PkMultiIdentity): void {
    AlgebraicType.serializeValue(writer, PkMultiIdentity.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): PkMultiIdentity {
    return AlgebraicType.deserializeValue(reader, PkMultiIdentity.getTypeScriptAlgebraicType());
  }

}


'''
"player_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { Player } from "./player_type";
import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `player`.
 *
 * Obtain a handle from the [`player`] property on [`RemoteTables`],
 * like `ctx.db.player`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.player.on_insert(...)`.
 */
export class PlayerTableHandle {
  tableCache: TableCache<Player>;

  constructor(tableCache: TableCache<Player>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<Player> {
    return this.tableCache.iter();
  }
  /**
   * Access to the `identity` unique index on the table `player`,
   * which allows point queries on the field of the same name
   * via the [`PlayerIdentityUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.player.identity().find(...)`.
   *
   * Get a handle on the `identity` unique index on the table `player`.
   */
  identity = {
    // Find the subscribed row whose `identity` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: Identity): Player | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.identity, col_val)) {
          return row;
        }
      }
    },
  };
  /**
   * Access to the `playerId` unique index on the table `player`,
   * which allows point queries on the field of the same name
   * via the [`PlayerPlayerIdUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.player.playerId().find(...)`.
   *
   * Get a handle on the `playerId` unique index on the table `player`.
   */
  playerId = {
    // Find the subscribed row whose `playerId` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: bigint): Player | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.playerId, col_val)) {
          return row;
        }
      }
    },
  };
  /**
   * Access to the `name` unique index on the table `player`,
   * which allows point queries on the field of the same name
   * via the [`PlayerNameUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.player.name().find(...)`.
   *
   * Get a handle on the `name` unique index on the table `player`.
   */
  name = {
    // Find the subscribed row whose `name` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: string): Player | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.name, col_val)) {
          return row;
        }
      }
    },
  };

  onInsert = (cb: (ctx: EventContext, row: Player) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: Player) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: Player) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: Player) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }

  // Updates are only defined for tables with primary keys.
  onUpdate = (cb: (ctx: EventContext, oldRow: Player, newRow: Player) => void) => {
    return this.tableCache.onUpdate(cb);
  }

  removeOnUpdate = (cb: (ctx: EventContext, onRow: Player, newRow: Player) => void) => {
    return this.tableCache.removeOnUpdate(cb);
  }}
'''
"player_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
export type Player = {
  identity: Identity,
  playerId: bigint,
  name: string,
};
export default Player;

/**
 * A namespace for generated helper functions.
 */
export namespace Player {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "identity", algebraicType: AlgebraicType.createIdentityType()},
        { name: "playerId", algebraicType: AlgebraicType.U64},
        { name: "name", algebraicType: AlgebraicType.String},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: Player): void {
    AlgebraicType.serializeValue(writer, Player.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): Player {
    return AlgebraicType.deserializeValue(reader, Player.getTypeScriptAlgebraicType());
  }

}


'''
"point_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
export type Point = {
  x: bigint,
  y: bigint,
};
export default Point;

/**
 * A namespace for generated helper functions.
 */
export namespace Point {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "x", algebraicType: AlgebraicType.I64},
        { name: "y", algebraicType: AlgebraicType.I64},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: Point): void {
    AlgebraicType.serializeValue(writer, Point.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): Point {
    return AlgebraicType.deserializeValue(reader, Point.getTypeScriptAlgebraicType());
  }

}


'''
"points_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { Point } from "./point_type";
import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `points`.
 *
 * Obtain a handle from the [`points`] property on [`RemoteTables`],
 * like `ctx.db.points`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.points.on_insert(...)`.
 */
export class PointsTableHandle {
  tableCache: TableCache<Point>;

  constructor(tableCache: TableCache<Point>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<Point> {
    return this.tableCache.iter();
  }

  onInsert = (cb: (ctx: EventContext, row: Point) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: Point) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: Point) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: Point) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }
}
'''
"private_table_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { PrivateTable } from "./private_table_type";
import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `private_table`.
 *
 * Obtain a handle from the [`privateTable`] property on [`RemoteTables`],
 * like `ctx.db.privateTable`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.privateTable.on_insert(...)`.
 */
export class PrivateTableTableHandle {
  tableCache: TableCache<PrivateTable>;

  constructor(tableCache: TableCache<PrivateTable>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<PrivateTable> {
    return this.tableCache.iter();
  }

  onInsert = (cb: (ctx: EventContext, row: PrivateTable) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: PrivateTable) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: PrivateTable) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: PrivateTable) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }
}
'''
"private_table_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
export type PrivateTable = {
  name: string,
};
export default PrivateTable;

/**
 * A namespace for generated helper functions.
 */
export namespace PrivateTable {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "name", algebraicType: AlgebraicType.String},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: PrivateTable): void {
    AlgebraicType.serializeValue(writer, PrivateTable.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): PrivateTable {
    return AlgebraicType.deserializeValue(reader, PrivateTable.getTypeScriptAlgebraicType());
  }

}


'''
"query_private_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type QueryPrivate = {};
export default QueryPrivate;

/**
 * A namespace for generated helper functions.
 */
export namespace QueryPrivate {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: QueryPrivate): void {
    AlgebraicType.serializeValue(writer, QueryPrivate.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): QueryPrivate {
    return AlgebraicType.deserializeValue(reader, QueryPrivate.getTypeScriptAlgebraicType());
  }

}

'''
"repeating_test_arg_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { RepeatingTestArg } from "./repeating_test_arg_type";
import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `repeating_test_arg`.
 *
 * Obtain a handle from the [`repeatingTestArg`] property on [`RemoteTables`],
 * like `ctx.db.repeatingTestArg`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.repeatingTestArg.on_insert(...)`.
 */
export class RepeatingTestArgTableHandle {
  tableCache: TableCache<RepeatingTestArg>;

  constructor(tableCache: TableCache<RepeatingTestArg>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<RepeatingTestArg> {
    return this.tableCache.iter();
  }
  /**
   * Access to the `scheduledId` unique index on the table `repeating_test_arg`,
   * which allows point queries on the field of the same name
   * via the [`RepeatingTestArgScheduledIdUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.repeatingTestArg.scheduledId().find(...)`.
   *
   * Get a handle on the `scheduledId` unique index on the table `repeating_test_arg`.
   */
  scheduledId = {
    // Find the subscribed row whose `scheduledId` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: bigint): RepeatingTestArg | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.scheduledId, col_val)) {
          return row;
        }
      }
    },
  };

  onInsert = (cb: (ctx: EventContext, row: RepeatingTestArg) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: RepeatingTestArg) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: RepeatingTestArg) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: RepeatingTestArg) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }

  // Updates are only defined for tables with primary keys.
  onUpdate = (cb: (ctx: EventContext, oldRow: RepeatingTestArg, newRow: RepeatingTestArg) => void) => {
    return this.tableCache.onUpdate(cb);
  }

  removeOnUpdate = (cb: (ctx: EventContext, onRow: RepeatingTestArg, newRow: RepeatingTestArg) => void) => {
    return this.tableCache.removeOnUpdate(cb);
  }}
'''
"repeating_test_arg_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
export type RepeatingTestArg = {
  scheduledId: bigint,
  scheduledAt: { tag: "Interval", value: TimeDuration } | { tag: "Time", value: Timestamp },
  prevTime: Timestamp,
};
export default RepeatingTestArg;

/**
 * A namespace for generated helper functions.
 */
export namespace RepeatingTestArg {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "scheduledId", algebraicType: AlgebraicType.U64},
        { name: "scheduledAt", algebraicType: AlgebraicType.createScheduleAtType()},
        { name: "prevTime", algebraicType: AlgebraicType.createTimestampType()},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: RepeatingTestArg): void {
    AlgebraicType.serializeValue(writer, RepeatingTestArg.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): RepeatingTestArg {
    return AlgebraicType.deserializeValue(reader, RepeatingTestArg.getTypeScriptAlgebraicType());
  }

}


'''
"repeating_test_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

import { RepeatingTestArg as __RepeatingTestArg } from "./repeating_test_arg_type";

export type RepeatingTest = {
  arg: __RepeatingTestArg,
};
export default RepeatingTest;

/**
 * A namespace for generated helper functions.
 */
export namespace RepeatingTest {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "arg", algebraicType: __RepeatingTestArg.getTypeScriptAlgebraicType()},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: RepeatingTest): void {
    AlgebraicType.serializeValue(writer, RepeatingTest.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): RepeatingTest {
    return AlgebraicType.deserializeValue(reader, RepeatingTest.getTypeScriptAlgebraicType());
  }

}

'''
"say_hello_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type SayHello = {};
export default SayHello;

/**
 * A namespace for generated helper functions.
 */
export namespace SayHello {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: SayHello): void {
    AlgebraicType.serializeValue(writer, SayHello.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): SayHello {
    return AlgebraicType.deserializeValue(reader, SayHello.getTypeScriptAlgebraicType());
  }

}

'''
"test_a_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { TestA } from "./test_a_type";
import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `test_a`.
 *
 * Obtain a handle from the [`testA`] property on [`RemoteTables`],
 * like `ctx.db.testA`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.testA.on_insert(...)`.
 */
export class TestATableHandle {
  tableCache: TableCache<TestA>;

  constructor(tableCache: TableCache<TestA>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<TestA> {
    return this.tableCache.iter();
  }

  onInsert = (cb: (ctx: EventContext, row: TestA) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: TestA) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: TestA) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: TestA) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }
}
'''
"test_a_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
export type TestA = {
  x: number,
  y: number,
  z: string,
};
export default TestA;

/**
 * A namespace for generated helper functions.
 */
export namespace TestA {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "x", algebraicType: AlgebraicType.U32},
        { name: "y", algebraicType: AlgebraicType.U32},
        { name: "z", algebraicType: AlgebraicType.String},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: TestA): void {
    AlgebraicType.serializeValue(writer, TestA.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): TestA {
    return AlgebraicType.deserializeValue(reader, TestA.getTypeScriptAlgebraicType());
  }

}


'''
"test_b_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
export type TestB = {
  foo: string,
};
export default TestB;

/**
 * A namespace for generated helper functions.
 */
export namespace TestB {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "foo", algebraicType: AlgebraicType.String},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: TestB): void {
    AlgebraicType.serializeValue(writer, TestB.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): TestB {
    return AlgebraicType.deserializeValue(reader, TestB.getTypeScriptAlgebraicType());
  }

}


'''
"test_btree_index_args_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

export type TestBtreeIndexArgs = {};
export default TestBtreeIndexArgs;

/**
 * A namespace for generated helper functions.
 */
export namespace TestBtreeIndexArgs {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: TestBtreeIndexArgs): void {
    AlgebraicType.serializeValue(writer, TestBtreeIndexArgs.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): TestBtreeIndexArgs {
    return AlgebraicType.deserializeValue(reader, TestBtreeIndexArgs.getTypeScriptAlgebraicType());
  }

}

'''
"test_d_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { TestD } from "./test_d_type";
import { NamespaceTestC as __NamespaceTestC } from "./namespace_test_c_type";

import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `test_d`.
 *
 * Obtain a handle from the [`testD`] property on [`RemoteTables`],
 * like `ctx.db.testD`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.testD.on_insert(...)`.
 */
export class TestDTableHandle {
  tableCache: TableCache<TestD>;

  constructor(tableCache: TableCache<TestD>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<TestD> {
    return this.tableCache.iter();
  }

  onInsert = (cb: (ctx: EventContext, row: TestD) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: TestD) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: TestD) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: TestD) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }
}
'''
"test_d_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { NamespaceTestC as __NamespaceTestC } from "./namespace_test_c_type";

export type TestD = {
  testC: __NamespaceTestC | undefined,
};
export default TestD;

/**
 * A namespace for generated helper functions.
 */
export namespace TestD {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "testC", algebraicType: AlgebraicType.createOptionType(__NamespaceTestC.getTypeScriptAlgebraicType())},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: TestD): void {
    AlgebraicType.serializeValue(writer, TestD.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): TestD {
    return AlgebraicType.deserializeValue(reader, TestD.getTypeScriptAlgebraicType());
  }

}


'''
"test_e_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { TestE } from "./test_e_type";
import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `test_e`.
 *
 * Obtain a handle from the [`testE`] property on [`RemoteTables`],
 * like `ctx.db.testE`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.testE.on_insert(...)`.
 */
export class TestETableHandle {
  tableCache: TableCache<TestE>;

  constructor(tableCache: TableCache<TestE>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<TestE> {
    return this.tableCache.iter();
  }
  /**
   * Access to the `id` unique index on the table `test_e`,
   * which allows point queries on the field of the same name
   * via the [`TestEIdUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.testE.id().find(...)`.
   *
   * Get a handle on the `id` unique index on the table `test_e`.
   */
  id = {
    // Find the subscribed row whose `id` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: bigint): TestE | undefined => {
      for (let row of this.tableCache.iter()) {
        if (deepEqual(row.id, col_val)) {
          return row;
        }
      }
    },
  };

  onInsert = (cb: (ctx: EventContext, row: TestE) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: TestE) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: TestE) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: TestE) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }

  // Updates are only defined for tables with primary keys.
  onUpdate = (cb: (ctx: EventContext, oldRow: TestE, newRow: TestE) => void) => {
    return this.tableCache.onUpdate(cb);
  }

  removeOnUpdate = (cb: (ctx: EventContext, onRow: TestE, newRow: TestE) => void) => {
    return this.tableCache.removeOnUpdate(cb);
  }}
'''
"test_e_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
export type TestE = {
  id: bigint,
  name: string,
};
export default TestE;

/**
 * A namespace for generated helper functions.
 */
export namespace TestE {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "id", algebraicType: AlgebraicType.U64},
        { name: "name", algebraicType: AlgebraicType.String},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: TestE): void {
    AlgebraicType.serializeValue(writer, TestE.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): TestE {
    return AlgebraicType.deserializeValue(reader, TestE.getTypeScriptAlgebraicType());
  }

}


'''
"test_f_table.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { TestFoobar } from "./test_foobar_type";
import { Foobar as __Foobar } from "./foobar_type";

import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";

/**
 * Table handle for the table `test_f`.
 *
 * Obtain a handle from the [`testF`] property on [`RemoteTables`],
 * like `ctx.db.testF`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.testF.on_insert(...)`.
 */
export class TestFTableHandle {
  tableCache: TableCache<TestFoobar>;

  constructor(tableCache: TableCache<TestFoobar>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<TestFoobar> {
    return this.tableCache.iter();
  }

  onInsert = (cb: (ctx: EventContext, row: TestFoobar) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: TestFoobar) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: TestFoobar) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: TestFoobar) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }
}
'''
"test_foobar_type.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { Foobar as __Foobar } from "./foobar_type";

export type TestFoobar = {
  field: __Foobar,
};
export default TestFoobar;

/**
 * A namespace for generated helper functions.
 */
export namespace TestFoobar {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "field", algebraicType: __Foobar.getTypeScriptAlgebraicType()},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: TestFoobar): void {
    AlgebraicType.serializeValue(writer, TestFoobar.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): TestFoobar {
    return AlgebraicType.deserializeValue(reader, TestFoobar.getTypeScriptAlgebraicType());
  }

}


'''
"test_reducer.ts" = '''
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

VERSION_COMMENT

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

import { TestA as __TestA } from "./test_a_type";
import { TestB as __TestB } from "./test_b_type";
import { NamespaceTestC as __NamespaceTestC } from "./namespace_test_c_type";
import { NamespaceTestF as __NamespaceTestF } from "./namespace_test_f_type";

export type Test = {
  arg: __TestA,
  arg2: __TestB,
  arg3: __NamespaceTestC,
  arg4: __NamespaceTestF,
};
export default Test;

/**
 * A namespace for generated helper functions.
 */
export namespace Test {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "arg", algebraicType: __TestA.getTypeScriptAlgebraicType()},
        { name: "arg2", algebraicType: __TestB.getTypeScriptAlgebraicType()},
        { name: "arg3", algebraicType: __NamespaceTestC.getTypeScriptAlgebraicType()},
        { name: "arg4", algebraicType: __NamespaceTestF.getTypeScriptAlgebraicType()},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: Test): void {
    AlgebraicType.serializeValue(writer, Test.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): Test {
    return AlgebraicType.deserializeValue(reader, Test.getTypeScriptAlgebraicType());
  }

}

'''
