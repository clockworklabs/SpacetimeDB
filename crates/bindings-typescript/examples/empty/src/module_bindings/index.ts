// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.6.0 (commit 64812908d1dd2fb0ac1a44ae8c669306ce3f001e).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
  type TableHandle as __TableHandle,
} from 'spacetimedb';

// Import and reexport all reducer arg types
import { Init } from './init_reducer.ts';
export { Init };
import { ClientConnected } from './client_connected_reducer.ts';
export { ClientConnected };
import { ClientDisconnected } from './client_disconnected_reducer.ts';
export { ClientDisconnected };
import { Add } from './add_reducer.ts';
export { Add };
import { SayHello } from './say_hello_reducer.ts';
export { SayHello };

// Import and reexport all table handle types
import { PersonTableHandle } from './person_table.ts';
export { PersonTableHandle };

// Import and reexport all types
import { Person } from './person_type.ts';
export { Person };

const REMOTE_MODULE = {
  tables: {
    person: {
      tableName: 'person' as const,
      rowType: Person.getTypeScriptAlgebraicType(),
    },
  },
  reducers: {
    init: {
      reducerName: 'init',
      argsType: Init.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: 'client_connected',
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    client_disconnected: {
      reducerName: 'client_disconnected',
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    add: {
      reducerName: 'add',
      argsType: Add.getTypeScriptAlgebraicType(),
    },
    say_hello: {
      reducerName: 'say_hello',
      argsType: SayHello.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: '1.6.0',
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (
    imp: __DbConnectionImpl,
    event: __Event<Reducer>
  ) => {
    return {
      ...(imp as DbConnection),
      event,
    };
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (
    imp: __DbConnectionImpl,
    setReducerFlags: SetReducerFlags
  ) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  },
};

// A type representing all the possible variants of a reducer.
export type Reducer =
  | never
  | { name: 'Init'; args: Init }
  | { name: 'ClientConnected'; args: ClientConnected }
  | { name: 'ClientDisconnected'; args: ClientDisconnected }
  | { name: 'Add'; args: Add }
  | { name: 'SayHello'; args: SayHello };

export class RemoteReducers {
  constructor(
    private connection: __DbConnectionImpl,
    private setCallReducerFlags: SetReducerFlags
  ) {}

  init() {
    this.connection.callReducer(
      'init',
      new Uint8Array(0),
      this.setCallReducerFlags.initFlags
    );
  }

  onInit(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('init', callback);
  }

  removeOnInit(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('init', callback);
  }

  clientConnected() {
    this.connection.callReducer(
      'client_connected',
      new Uint8Array(0),
      this.setCallReducerFlags.clientConnectedFlags
    );
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('client_connected', callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('client_connected', callback);
  }

  clientDisconnected() {
    this.connection.callReducer(
      'client_disconnected',
      new Uint8Array(0),
      this.setCallReducerFlags.clientDisconnectedFlags
    );
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('client_disconnected', callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('client_disconnected', callback);
  }

  add(name: string) {
    const __args = { name };
    let __writer = new __BinaryWriter(1024);
    Add.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer(
      'add',
      __argsBuffer,
      this.setCallReducerFlags.addFlags
    );
  }

  onAdd(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer('add', callback);
  }

  removeOnAdd(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer('add', callback);
  }

  sayHello() {
    this.connection.callReducer(
      'say_hello',
      new Uint8Array(0),
      this.setCallReducerFlags.sayHelloFlags
    );
  }

  onSayHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('say_hello', callback);
  }

  removeOnSayHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('say_hello', callback);
  }
}

export class SetReducerFlags {
  initFlags: __CallReducerFlags = 'FullUpdate';
  init(flags: __CallReducerFlags) {
    this.initFlags = flags;
  }

  clientConnectedFlags: __CallReducerFlags = 'FullUpdate';
  clientConnected(flags: __CallReducerFlags) {
    this.clientConnectedFlags = flags;
  }

  clientDisconnectedFlags: __CallReducerFlags = 'FullUpdate';
  clientDisconnected(flags: __CallReducerFlags) {
    this.clientDisconnectedFlags = flags;
  }

  addFlags: __CallReducerFlags = 'FullUpdate';
  add(flags: __CallReducerFlags) {
    this.addFlags = flags;
  }

  sayHelloFlags: __CallReducerFlags = 'FullUpdate';
  sayHello(flags: __CallReducerFlags) {
    this.sayHelloFlags = flags;
  }
}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get person(): PersonTableHandle<'person'> {
    // clientCache is a private property
    return new PersonTableHandle(
      (
        this.connection as unknown as { clientCache: __ClientCache }
      ).clientCache.getOrCreateTable<Person>(REMOTE_MODULE.tables.person)
    );
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
> {}

export class DbConnection extends __DbConnectionImpl<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
> {
  static builder = (): __DbConnectionBuilder<
    DbConnection,
    ErrorContext,
    SubscriptionEventContext
  > => {
    return new __DbConnectionBuilder<
      DbConnection,
      ErrorContext,
      SubscriptionEventContext
    >(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  };
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  };
}

export type EventContext = __EventContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags,
  Reducer
>;
export type ReducerEventContext = __ReducerEventContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags,
  Reducer
>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
>;
export type ErrorContext = __ErrorContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
>;
