// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
  type TableHandle as __TableHandle,
} from 'spacetimedb';
import { Person } from './person_type';
import {
  type EventContext,
  type Reducer,
  RemoteReducers,
  RemoteTables,
} from '.';
declare type __keep = [EventContext, Reducer, RemoteReducers, RemoteTables];

/**
 * Table handle for the table `person`.
 *
 * Obtain a handle from the [`person`] property on [`RemoteTables`],
 * like `ctx.db.person`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.person.on_insert(...)`.
 */
export class PersonTableHandle<TableName extends string>
  implements __TableHandle<TableName>
{
  // phantom type to track the table name
  readonly tableName!: TableName;
  tableCache: __TableCache<Person>;

  constructor(tableCache: __TableCache<Person>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<Person> {
    return this.tableCache.iter();
  }

  onInsert = (cb: (ctx: EventContext, row: Person) => void) => {
    return this.tableCache.onInsert(cb);
  };

  removeOnInsert = (cb: (ctx: EventContext, row: Person) => void) => {
    return this.tableCache.removeOnInsert(cb);
  };

  onDelete = (cb: (ctx: EventContext, row: Person) => void) => {
    return this.tableCache.onDelete(cb);
  };

  removeOnDelete = (cb: (ctx: EventContext, row: Person) => void) => {
    return this.tableCache.removeOnDelete(cb);
  };
}
