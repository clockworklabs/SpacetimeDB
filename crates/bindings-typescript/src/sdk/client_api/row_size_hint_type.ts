// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
  type TableHandle as __TableHandle,
} from '../../index';
import * as RowSizeHintVariants from './row_size_hint_variants';

// The tagged union or sum type for the algebraic type `RowSizeHint`.
export type RowSizeHint =
  | RowSizeHintVariants.FixedSize
  | RowSizeHintVariants.RowOffsets;

// A value with helper functions to construct the type.
export const RowSizeHint = {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  FixedSize: (value: number): RowSizeHint => ({ tag: 'FixedSize', value }),
  RowOffsets: (value: bigint[]): RowSizeHint => ({ tag: 'RowOffsets', value }),

  getTypeScriptAlgebraicType(): __AlgebraicTypeType {
    return __AlgebraicTypeValue.Sum({
      variants: [
        { name: 'FixedSize', algebraicType: __AlgebraicTypeValue.U16 },
        {
          name: 'RowOffsets',
          algebraicType: __AlgebraicTypeValue.Array(__AlgebraicTypeValue.U64),
        },
      ],
    });
  },

  serialize(writer: __BinaryWriter, value: RowSizeHint): void {
    __AlgebraicTypeValue.serializeValue(
      writer,
      RowSizeHint.getTypeScriptAlgebraicType(),
      value
    );
  },

  deserialize(reader: __BinaryReader): RowSizeHint {
    return __AlgebraicTypeValue.deserializeValue(
      reader,
      RowSizeHint.getTypeScriptAlgebraicType()
    );
  },
};

export default RowSizeHint;
