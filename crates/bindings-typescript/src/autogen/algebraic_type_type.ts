// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.4.0 (commit c9276358a10fa5dcbee7683260a68b8f9aef3361).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from '../index';
import { SumType } from './sum_type_type';
import { ProductType } from './product_type_type';

import * as AlgebraicTypeVariants from './algebraic_type_variants';

// The tagged union or sum type for the algebraic type `AlgebraicType`.
export type AlgebraicType =
  | AlgebraicTypeVariants.Ref
  | AlgebraicTypeVariants.Sum
  | AlgebraicTypeVariants.Product
  | AlgebraicTypeVariants.Array
  | AlgebraicTypeVariants.String
  | AlgebraicTypeVariants.Bool
  | AlgebraicTypeVariants.I8
  | AlgebraicTypeVariants.U8
  | AlgebraicTypeVariants.I16
  | AlgebraicTypeVariants.U16
  | AlgebraicTypeVariants.I32
  | AlgebraicTypeVariants.U32
  | AlgebraicTypeVariants.I64
  | AlgebraicTypeVariants.U64
  | AlgebraicTypeVariants.I128
  | AlgebraicTypeVariants.U128
  | AlgebraicTypeVariants.I256
  | AlgebraicTypeVariants.U256
  | AlgebraicTypeVariants.F32
  | AlgebraicTypeVariants.F64;

// A value with helper functions to construct the type.
export const AlgebraicType = {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  Ref: (value: number): AlgebraicType => ({ tag: 'Ref', value }),
  Sum: (value: SumType): AlgebraicType => ({ tag: 'Sum', value }),
  Product: (value: ProductType): AlgebraicType => ({ tag: 'Product', value }),
  Array: (value: AlgebraicType): AlgebraicType => ({ tag: 'Array', value }),
  String: { tag: 'String' } as const,
  Bool: { tag: 'Bool' } as const,
  I8: { tag: 'I8' } as const,
  U8: { tag: 'U8' } as const,
  I16: { tag: 'I16' } as const,
  U16: { tag: 'U16' } as const,
  I32: { tag: 'I32' } as const,
  U32: { tag: 'U32' } as const,
  I64: { tag: 'I64' } as const,
  U64: { tag: 'U64' } as const,
  I128: { tag: 'I128' } as const,
  U128: { tag: 'U128' } as const,
  I256: { tag: 'I256' } as const,
  U256: { tag: 'U256' } as const,
  F32: { tag: 'F32' } as const,
  F64: { tag: 'F64' } as const,

  getTypeScriptAlgebraicType(): __AlgebraicTypeType {
    return __AlgebraicTypeValue.Sum({
      variants: [
        { name: 'Ref', algebraicType: __AlgebraicTypeValue.U32 },
        { name: 'Sum', algebraicType: SumType.getTypeScriptAlgebraicType() },
        {
          name: 'Product',
          algebraicType: ProductType.getTypeScriptAlgebraicType(),
        },
        {
          name: 'Array',
          algebraicType: AlgebraicType.getTypeScriptAlgebraicType(),
        },
        {
          name: 'String',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'Bool',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'I8',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'U8',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'I16',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'U16',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'I32',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'U32',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'I64',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'U64',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'I128',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'U128',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'I256',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'U256',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'F32',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
        {
          name: 'F64',
          algebraicType: __AlgebraicTypeValue.Product({ elements: [] }),
        },
      ],
    });
  },

  serialize(writer: __BinaryWriter, value: AlgebraicType): void {
    __AlgebraicTypeValue.serializeValue(
      writer,
      AlgebraicType.getTypeScriptAlgebraicType(),
      value
    );
  },

  deserialize(reader: __BinaryReader): AlgebraicType {
    return __AlgebraicTypeValue.deserializeValue(
      reader,
      AlgebraicType.getTypeScriptAlgebraicType()
    );
  },
};

export default AlgebraicType;
