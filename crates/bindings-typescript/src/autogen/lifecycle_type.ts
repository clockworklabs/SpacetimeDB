// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit be6130a209e59b047af47123db3be3182ede6d36).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from '../index';
// These are the generated variant types for each variant of the tagged union.
// One type is generated per variant and will be used in the `value` field of
// the tagged union.
// NOTE: These are generated in a separate namespace because TypeScript
// interprets `Foo` in the statement `const x: Foo.Variant = ...` as the type `Foo` instead of
// the namespace `Foo` which includes types within it. Therefore we generate the `FooVariants`
// type. e.g. `const x: FooVariants.Variant`
export namespace LifecycleVariants {
  export type Init = { tag: 'Init' };
  export type OnConnect = { tag: 'OnConnect' };
  export type OnDisconnect = { tag: 'OnDisconnect' };
}

// A namespace for generated variants and helper functions.
export namespace Lifecycle {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Init: { tag: 'Init' } = { tag: 'Init' };
  export const OnConnect: { tag: 'OnConnect' } = { tag: 'OnConnect' };
  export const OnDisconnect: { tag: 'OnDisconnect' } = { tag: 'OnDisconnect' };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Sum({
      variants: [
        {
          name: 'Init',
          algebraicType: AlgebraicType.Product({ elements: [] }),
        },
        {
          name: 'OnConnect',
          algebraicType: AlgebraicType.Product({ elements: [] }),
        },
        {
          name: 'OnDisconnect',
          algebraicType: AlgebraicType.Product({ elements: [] }),
        },
      ],
    });
  }

  export function serialize(writer: BinaryWriter, value: Lifecycle): void {
    AlgebraicType.serializeValue(
      writer,
      Lifecycle.getTypeScriptAlgebraicType(),
      value
    );
  }

  export function deserialize(reader: BinaryReader): Lifecycle {
    return AlgebraicType.deserializeValue(
      reader,
      Lifecycle.getTypeScriptAlgebraicType()
    );
  }
}

// The tagged union or sum type for the algebraic type `Lifecycle`.
export type Lifecycle =
  | LifecycleVariants.Init
  | LifecycleVariants.OnConnect
  | LifecycleVariants.OnDisconnect;

export default Lifecycle;
