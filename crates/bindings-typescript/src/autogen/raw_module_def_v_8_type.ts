// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit be6130a209e59b047af47123db3be3182ede6d36).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "../index";
import { Typespace as __Typespace } from "./typespace_type";
import { TableDesc as __TableDesc } from "./table_desc_type";
import { ReducerDef as __ReducerDef } from "./reducer_def_type";
import { MiscModuleExport as __MiscModuleExport } from "./misc_module_export_type";

export type RawModuleDefV8 = {
  typespace: __Typespace,
  tables: __TableDesc[],
  reducers: __ReducerDef[],
  miscExports: __MiscModuleExport[],
};
export default RawModuleDefV8;

/**
 * A namespace for generated helper functions.
 */
export namespace RawModuleDefV8 {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.Product({
      elements: [
        { name: "typespace", algebraicType: __Typespace.getTypeScriptAlgebraicType()},
        { name: "tables", algebraicType: AlgebraicType.Array(__TableDesc.getTypeScriptAlgebraicType())},
        { name: "reducers", algebraicType: AlgebraicType.Array(__ReducerDef.getTypeScriptAlgebraicType())},
        { name: "miscExports", algebraicType: AlgebraicType.Array(__MiscModuleExport.getTypeScriptAlgebraicType())},
      ]
    });
  }

  export function serialize(writer: BinaryWriter, value: RawModuleDefV8): void {
    AlgebraicType.serializeValue(writer, RawModuleDefV8.getTypeScriptAlgebraicType(), value);
  }

  export function deserialize(reader: BinaryReader): RawModuleDefV8 {
    return AlgebraicType.deserializeValue(reader, RawModuleDefV8.getTypeScriptAlgebraicType());
  }

}


