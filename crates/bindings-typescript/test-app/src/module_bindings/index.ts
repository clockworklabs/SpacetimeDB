// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using ../../../src/index cli version 1.5.0 (commit 5bfc84351742a6a8dc717b6c0011946f2d1b632d).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
  type TableHandle as __TableHandle,
} from '../../../src/index';

// Import and reexport all reducer arg types
import { CreatePlayer } from './create_player_reducer.ts';
export { CreatePlayer };

// Import and reexport all table handle types
import { PlayerTableHandle } from './player_table.ts';
export { PlayerTableHandle };
import { UnindexedPlayerTableHandle } from './unindexed_player_table.ts';
export { UnindexedPlayerTableHandle };
import { UserTableHandle } from './user_table.ts';
export { UserTableHandle };

// Import and reexport all types
import { Player } from './player_type.ts';
export { Player };
import { Point } from './point_type.ts';
export { Point };
import { UnindexedPlayer } from './unindexed_player_type.ts';
export { UnindexedPlayer };
import { User } from './user_type.ts';
export { User };

const REMOTE_MODULE = {
  tables: {
    player: {
      tableName: 'player' as const,
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: 'ownerId',
      primaryKeyInfo: {
        colName: 'ownerId',
        colType: (
          Player.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product
        ).value.elements[0].algebraicType,
      },
    },
    unindexed_player: {
      tableName: 'unindexed_player' as const,
      rowType: UnindexedPlayer.getTypeScriptAlgebraicType(),
    },
    user: {
      tableName: 'user' as const,
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: 'identity',
      primaryKeyInfo: {
        colName: 'identity',
        colType: (
          User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product
        ).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    create_player: {
      reducerName: 'create_player',
      argsType: CreatePlayer.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: '1.5.0',
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (
    imp: __DbConnectionImpl,
    event: __Event<Reducer>
  ) => {
    return {
      ...(imp as DbConnection),
      event,
    };
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (
    imp: __DbConnectionImpl,
    setReducerFlags: SetReducerFlags
  ) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  },
};

// A type representing all the possible variants of a reducer.
export type Reducer = never | { name: 'CreatePlayer'; args: CreatePlayer };

export class RemoteReducers {
  constructor(
    private connection: __DbConnectionImpl,
    private setCallReducerFlags: SetReducerFlags
  ) {}

  createPlayer(name: string, location: Point) {
    const __args = { name, location };
    let __writer = new __BinaryWriter(1024);
    CreatePlayer.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer(
      'create_player',
      __argsBuffer,
      this.setCallReducerFlags.createPlayerFlags
    );
  }

  onCreatePlayer(
    callback: (ctx: ReducerEventContext, name: string, location: Point) => void
  ) {
    this.connection.onReducer('create_player', callback);
  }

  removeOnCreatePlayer(
    callback: (ctx: ReducerEventContext, name: string, location: Point) => void
  ) {
    this.connection.offReducer('create_player', callback);
  }
}

export class SetReducerFlags {
  createPlayerFlags: __CallReducerFlags = 'FullUpdate';
  createPlayer(flags: __CallReducerFlags) {
    this.createPlayerFlags = flags;
  }
}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get player(): PlayerTableHandle<'player'> {
    // clientCache is a private property
    return new PlayerTableHandle(
      (
        this.connection as unknown as { clientCache: __ClientCache }
      ).clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player)
    );
  }

  get unindexedPlayer(): UnindexedPlayerTableHandle<'unindexed_player'> {
    // clientCache is a private property
    return new UnindexedPlayerTableHandle(
      (
        this.connection as unknown as { clientCache: __ClientCache }
      ).clientCache.getOrCreateTable<UnindexedPlayer>(
        REMOTE_MODULE.tables.unindexed_player
      )
    );
  }

  get user(): UserTableHandle<'user'> {
    // clientCache is a private property
    return new UserTableHandle(
      (
        this.connection as unknown as { clientCache: __ClientCache }
      ).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user)
    );
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
> {}

export class DbConnection extends __DbConnectionImpl<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
> {
  static builder = (): __DbConnectionBuilder<
    DbConnection,
    ErrorContext,
    SubscriptionEventContext
  > => {
    return new __DbConnectionBuilder<
      DbConnection,
      ErrorContext,
      SubscriptionEventContext
    >(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  };
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  };
}

export type EventContext = __EventContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags,
  Reducer
>;
export type ReducerEventContext = __ReducerEventContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags,
  Reducer
>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
>;
export type ErrorContext = __ErrorContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
>;
