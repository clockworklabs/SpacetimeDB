// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using ../../../src/index cli version 1.6.0 (commit 542d26d7ffecafe93e40ac1a991c2ef2b4e4d0cb).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
  type TableHandle as __TableHandle,
} from '../../../src/index';

// Import and reexport all reducer arg types
import { ClearCounter } from './clear_counter_reducer.ts';
export { ClearCounter };
import { ClientConnected } from './client_connected_reducer.ts';
export { ClientConnected };
import { ClientDisconnected } from './client_disconnected_reducer.ts';
export { ClientDisconnected };
import { IncrementCounter } from './increment_counter_reducer.ts';
export { IncrementCounter };

// Import and reexport all table handle types
import { CounterTableHandle } from './counter_table.ts';
export { CounterTableHandle };
import { OfflineUserTableHandle } from './offline_user_table.ts';
export { OfflineUserTableHandle };
import { UserTableHandle } from './user_table.ts';
export { UserTableHandle };

// Import and reexport all types
import { Counter } from './counter_type.ts';
export { Counter };
import { User } from './user_type.ts';
export { User };

const REMOTE_MODULE = {
  tables: {
    counter: {
      tableName: 'counter' as const,
      rowType: Counter.getTypeScriptAlgebraicType(),
      primaryKey: 'id',
      primaryKeyInfo: {
        colName: 'id',
        colType: (
          Counter.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product
        ).value.elements[0].algebraicType,
      },
    },
    offline_user: {
      tableName: 'offline_user' as const,
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: 'identity',
      primaryKeyInfo: {
        colName: 'identity',
        colType: (
          User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product
        ).value.elements[0].algebraicType,
      },
    },
    user: {
      tableName: 'user' as const,
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: 'identity',
      primaryKeyInfo: {
        colName: 'identity',
        colType: (
          User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product
        ).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    clear_counter: {
      reducerName: 'clear_counter',
      argsType: ClearCounter.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: 'client_connected',
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    client_disconnected: {
      reducerName: 'client_disconnected',
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    increment_counter: {
      reducerName: 'increment_counter',
      argsType: IncrementCounter.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: '1.6.0',
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (
    imp: __DbConnectionImpl,
    event: __Event<Reducer>
  ) => {
    return {
      ...(imp as DbConnection),
      event,
    };
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (
    imp: __DbConnectionImpl,
    setReducerFlags: SetReducerFlags
  ) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  },
};

// A type representing all the possible variants of a reducer.
export type Reducer =
  | never
  | { name: 'ClearCounter'; args: ClearCounter }
  | { name: 'ClientConnected'; args: ClientConnected }
  | { name: 'ClientDisconnected'; args: ClientDisconnected }
  | { name: 'IncrementCounter'; args: IncrementCounter };

export class RemoteReducers {
  constructor(
    private connection: __DbConnectionImpl,
    private setCallReducerFlags: SetReducerFlags
  ) {}

  clearCounter() {
    this.connection.callReducer(
      'clear_counter',
      new Uint8Array(0),
      this.setCallReducerFlags.clearCounterFlags
    );
  }

  onClearCounter(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('clear_counter', callback);
  }

  removeOnClearCounter(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('clear_counter', callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('client_connected', callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('client_connected', callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('client_disconnected', callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('client_disconnected', callback);
  }

  incrementCounter() {
    this.connection.callReducer(
      'increment_counter',
      new Uint8Array(0),
      this.setCallReducerFlags.incrementCounterFlags
    );
  }

  onIncrementCounter(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer('increment_counter', callback);
  }

  removeOnIncrementCounter(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer('increment_counter', callback);
  }
}

export class SetReducerFlags {
  clearCounterFlags: __CallReducerFlags = 'FullUpdate';
  clearCounter(flags: __CallReducerFlags) {
    this.clearCounterFlags = flags;
  }

  incrementCounterFlags: __CallReducerFlags = 'FullUpdate';
  incrementCounter(flags: __CallReducerFlags) {
    this.incrementCounterFlags = flags;
  }
}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get counter(): CounterTableHandle<'counter'> {
    // clientCache is a private property
    return new CounterTableHandle(
      (
        this.connection as unknown as { clientCache: __ClientCache }
      ).clientCache.getOrCreateTable<Counter>(REMOTE_MODULE.tables.counter)
    );
  }

  get offlineUser(): OfflineUserTableHandle<'offline_user'> {
    // clientCache is a private property
    return new OfflineUserTableHandle(
      (
        this.connection as unknown as { clientCache: __ClientCache }
      ).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.offline_user)
    );
  }

  get user(): UserTableHandle<'user'> {
    // clientCache is a private property
    return new UserTableHandle(
      (
        this.connection as unknown as { clientCache: __ClientCache }
      ).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user)
    );
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
> {}

export class DbConnection extends __DbConnectionImpl<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
> {
  static builder = (): __DbConnectionBuilder<
    DbConnection,
    ErrorContext,
    SubscriptionEventContext
  > => {
    return new __DbConnectionBuilder<
      DbConnection,
      ErrorContext,
      SubscriptionEventContext
    >(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  };
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  };
}

export type EventContext = __EventContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags,
  Reducer
>;
export type ReducerEventContext = __ReducerEventContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags,
  Reducer
>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
>;
export type ErrorContext = __ErrorContextInterface<
  RemoteTables,
  RemoteReducers,
  SetReducerFlags
>;
