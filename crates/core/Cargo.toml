[package]
name = "spacetimedb-core"
version.workspace = true
edition.workspace = true
license-file = "LICENSE"
description = "The core library for SpacetimeDB"
rust-version.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
name = "spacetimedb"   # The name of the target.
path = "src/lib.rs"    # The source file of the target.

# Benching off, because of https://bheisler.github.io/criterion.rs/book/faq.html#cargo-bench-gives-unrecognized-option-errors-for-valid-command-line-options
bench = false

[[bench]]
name = "odb_flavor_bench"
harness = false

[dependencies]
spacetimedb-lib = { workspace = true, features = ["serde"] }
spacetimedb-client-api-messages.workspace = true
spacetimedb-metrics.workspace = true
spacetimedb-primitives.workspace = true
spacetimedb-sats = { workspace = true, features = ["serde"] }
spacetimedb-table.workspace = true
spacetimedb-vm.workspace = true

anyhow.workspace = true
async-trait.workspace = true
backtrace.workspace = true
base64.workspace = true
blake3.workspace = true
brotli.workspace = true
bytes.workspace = true
bytestring.workspace = true
chrono.workspace = true
clap.workspace = true
crossbeam-channel.workspace = true
derive_more.workspace = true
dirs.workspace = true
email_address.workspace = true
enum-map.workspace = true
flate2.workspace = true
fs2.workspace = true
futures.workspace = true
hex.workspace = true
hostname.workspace = true
hyper.workspace = true
imara-diff.workspace = true
indexmap.workspace = true
itertools.workspace = true
jsonwebtoken.workspace = true
lazy_static.workspace = true
log.workspace = true
once_cell.workspace = true
openssl.workspace = true
parking_lot.workspace = true
paste.workspace = true
pin-project-lite.workspace = true
prometheus.workspace = true
prost.workspace = true
rayon.workspace = true
rayon-core.workspace = true
regex.workspace = true
rustc-demangle.workspace = true
rustc-hash.workspace = true
scopeguard.workspace = true
sendgrid.workspace = true
serde.workspace = true
serde_json.workspace = true
serde_path_to_error.workspace = true
serde_with = { workspace = true, features = ["chrono_0_4"] }
sha1.workspace = true
similar.workspace = true
slab.workspace = true
sled.workspace = true
smallvec.workspace = true
sqlparser.workspace = true
strum.workspace = true
tempfile.workspace = true
thiserror.workspace = true
tokio-util.workspace = true
tokio.workspace = true
tokio-stream = "0.1"
toml.workspace = true
tracing-appender.workspace = true
tracing-core.workspace = true
tracing-flame.workspace = true
tracing-log.workspace = true
tracing-subscriber.workspace = true
tracing-tracy.workspace = true
tracing.workspace = true
url.workspace = true
urlencoding.workspace = true
uuid.workspace = true
wasmtime.workspace = true
# Rocksdb ostorage backend, linked only if "rocksdb" feature enabled.
rocksdb = {workspace = true, optional = true}

[features]
# Print a warning when doing an unindexed `iter_by_col_range` on a large table.
unindexed_iter_by_col_range_warn = []
# Enable metrics in spacetimedb.
metrics = []
# Optional storage engines.
odb_rocksdb = ["dep:rocksdb"]
odb_sled = []
default = ["odb_sled", "metrics", "unindexed_iter_by_col_range_warn"]

[dev-dependencies]
spacetimedb-lib = { path = "../lib", features = ["proptest"] }
spacetimedb-sats = { path = "../sats", features = ["proptest"] }

rusqlite.workspace = true
criterion.workspace = true
# Also as dev-dependencies for use in _this_ crate's tests.
proptest.workspace = true
proptest-derive.workspace = true
rand.workspace = true

[build-dependencies]
prost-build.workspace = true
