syntax = "proto3";

package client_api;

////// Generic Message //////
// TODO: Theoretically this format could be replaced by AlgebraicValue/AlgebraicType
// but I don't think we want to do that yet.
// TODO: Split this up into ServerBound and ClientBound if there's no overlap
message Message {
    oneof type {
        // client -> database, request a reducer run.
        FunctionCall functionCall = 1;
        // database -> client, contained in `TransactionUpdate`, informs of changes to
        // subscribed rows.
        SubscriptionUpdate subscriptionUpdate = 2;
        // database -> client, contained in `TransactionUpdate`, describes a reducer run.
        Event event = 3;
        // database -> client, upon reducer run.
        TransactionUpdate transactionUpdate = 4;
        // database -> client, after connecting, to inform client of its identity.
        IdentityToken identityToken = 5;
        // client -> database, register SQL queries on which to receive updates.
        Subscribe subscribe = 6;
    }
}

/// Received by database from client to inform of user's identity and token.
///
/// The database will always send an `IdentityToken` message
/// as the first message for a new WebSocket connection.
/// If the client is re-connecting with existing credentials,
/// the message will include those credentials.
/// If the client connected anonymously,
/// the database will generate new credentials to identify it.
message IdentityToken {
    bytes identity = 1;
    string token = 2;
}

// TODO: Evaluate if it makes sense for this to also include the
// address of the database this is calling

/// Sent by client to database to request a reducer runs.
///
/// - `reducer` is the string name of a reducer to run.
///
/// - `argBytes` is the arguments to the reducer, encoded as BSATN.
///
/// SpacetimeDB models reducers as taking a single `AlgebraicValue` as an argument, which
/// generally will be a `ProductValue` containing all of the args (except the
/// `ReducerContext`, which is injected by the host, not provided in this API).
message FunctionCall {
    // TODO: Maybe this should be replaced with an int identifier for performance?
    string reducer = 1;
    bytes argBytes = 2;
}

/// Sent by client to database to register a set of queries, about which the client will
/// receive `TransactionUpdate`s.
///
/// `query_strings` is a sequence of strings, each of which is a SQL query.
///
/// After issuing a `Subscribe` message, the client will receive a single
/// `SubscriptionUpdate` message containing every current row of every table which matches
/// the subscribed queries. Then, after each reducer run which updates one or more
/// subscribed rows, the client will receive a `TransactionUpdate` containing the updates.
///
/// A `Subscribe` message sets or replaces the entire set of queries to which the client
/// is subscribed. If the client is previously subscribed to some set of queries `A`, and
/// then sends a `Subscribe` message to subscribe to a set `B`, afterwards, the client
/// will be subscribed to `B` but not `A`. In this case, the client will receive a
/// `SubscriptionUpdate` containing every existing row that matches `B`, even if some were
/// already in `A`.
message Subscribe {
    repeated string query_strings = 1;
}

/// Part of a `TransactionUpdate` received by client from database upon a reducer run.
///
/// - `timestamp` is the time when the reducer started,
///               as microseconds since the Unix epoch.
///
/// - `callerIdentity` is the identity of the user who requested the reducer run.
///                    For event-driven and scheduled reducers,
///                    it is the identity of the database owner.
///
/// - `functionCall` contains the name of the reducer which ran and the arguments it
///                  received.
///
/// - `status` of `committed` means that the reducer ran successfully and its changes were
///                           committed to the database. The rows altered in the database
///                           will be recorded in the parent `TransactionUpdate`'s
///                           `SubscriptionUpdate`.
///
/// - `status` of `failed` means that the reducer panicked, and any changes it attempted to
///                        make were rolled back.
///
/// - `status` of `out_of_energy` means that the reducer was interrupted
///                               due to insufficient energy/funds,
///                               and any changes it attempted to make were rolled back.
///
/// - `message` is the error message with which the reducer failed.
///             For `committed` or `out_of_energy` statuses,
///             it is the empty string.
///
/// - `energy_quanta_used` and `host_execution_duration_micros` seem self-explanatory;
///   they describe the amount of energy credits consumed by running the reducer,
///   and how long it took to run.
message Event {
    enum Status {
        committed = 0;
        failed = 1;
        out_of_energy = 2;
    }
    uint64 timestamp = 1;
    bytes callerIdentity = 2;
    FunctionCall functionCall = 3;

    // TODO: arguably these should go inside an EventStatus message
    // since success doesn't have a message
    Status status = 4;
    string message = 5;

    int64 energy_quanta_used = 6;

    uint64 host_execution_duration_micros = 7;
}

// TODO: Maybe call this StateUpdate if it's implied to be a subscription update

/// Part of a `TransactionUpdate` received by client from database when subscribed rows in
/// a table are altered, or received alone after a `Subscription` to initialize the
/// client's mirror of the database.
///
/// A single `SubscriptionUpdate` may contain `TableUpdate` messages for multiple
/// tables.
message SubscriptionUpdate {
    repeated TableUpdate tableUpdates = 1;
}

/// Part of a `SubscriptionUpdate` received by client from database for alterations to a
/// single table.
///
/// `tableId` and `tableName` identify the table. Clients should use the `tableName`, as
///                           it is a stable part of a module's API, whereas `tableId` may
///                           or may not change between runs.
///
/// `tableRowOperations` are actual modified rows.
message TableUpdate {
    uint32 tableId = 1;
    string tableName = 2;
    repeated TableRowOperation tableRowOperations = 3;
}

/// Part of a `TableUpdate` received by client from database for alteration to a single
/// row of a table.
///
/// The table being altered is identified by the parent `TableUpdate`.
///
/// - `op` of `DELETE` means that the row in question has been removed and is no longer
///                    resident in the table.
///
/// - `op` of `INSERT` means that the row in question has been either newly inserted or
///                    updated, and is resident in the table.
///
/// - `row_pk` is a hash of the row computed by the database. As of 2023-06-13, even for
///            tables with a `#[primarykey]` annotation on one column, the `row_pk` is not
///            that primary key.
///
/// - `row` is the row itself, encoded as BSATN.
message TableRowOperation {
    enum OperationType {
        DELETE = 0;
        INSERT = 1;
    }
    OperationType op = 1;
    bytes row_pk = 2;
    bytes row = 3;
}

/// Received by client from database upon a reducer run.
///
/// Clients receive `TransactionUpdate`s only for reducers
/// which update at least one of their subscribed rows,
/// or for their own `failed` or `out_of_energy` reducer invocations.
///
/// - `event` contains information about the reducer.
///
/// - `subscriptionUpdate` contains changes to subscribed rows.
message TransactionUpdate {
    Event event = 1;
    SubscriptionUpdate subscriptionUpdate = 2;
}
