//HintName: ContainsNestedLists.cs
// <auto-generated />
#nullable enable

partial class ContainsNestedLists
    : System.IEquatable<ContainsNestedLists>,
        SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        IntList = BSATN.IntList.Read(reader);
        StringList = BSATN.StringList.Read(reader);
        IntArray = BSATN.IntArray.Read(reader);
        StringArray = BSATN.StringArray.Read(reader);
        IntArrayArrayList = BSATN.IntArrayArrayList.Read(reader);
        IntListListArray = BSATN.IntListListArray.Read(reader);
        StringArrayArrayList = BSATN.StringArrayArrayList.Read(reader);
        StringListListArray = BSATN.StringListListArray.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.IntList.Write(writer, IntList);
        BSATN.StringList.Write(writer, StringList);
        BSATN.IntArray.Write(writer, IntArray);
        BSATN.StringArray.Write(writer, StringArray);
        BSATN.IntArrayArrayList.Write(writer, IntArrayArrayList);
        BSATN.IntListListArray.Write(writer, IntListListArray);
        BSATN.StringArrayArrayList.Write(writer, StringArrayArrayList);
        BSATN.StringListListArray.Write(writer, StringListListArray);
    }

    object SpacetimeDB.BSATN.IStructuralReadWrite.GetSerializer()
    {
        return new BSATN();
    }

    public override string ToString() =>
        $"ContainsNestedLists {{ IntList = {SpacetimeDB.BSATN.StringUtil.GenericToString(IntList)}, StringList = {SpacetimeDB.BSATN.StringUtil.GenericToString(StringList)}, IntArray = {SpacetimeDB.BSATN.StringUtil.GenericToString(IntArray)}, StringArray = {SpacetimeDB.BSATN.StringUtil.GenericToString(StringArray)}, IntArrayArrayList = {SpacetimeDB.BSATN.StringUtil.GenericToString(IntArrayArrayList)}, IntListListArray = {SpacetimeDB.BSATN.StringUtil.GenericToString(IntListListArray)}, StringArrayArrayList = {SpacetimeDB.BSATN.StringUtil.GenericToString(StringArrayArrayList)}, StringListListArray = {SpacetimeDB.BSATN.StringUtil.GenericToString(StringListListArray)} }}";

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<ContainsNestedLists>
    {
        internal static readonly SpacetimeDB.BSATN.List<int, SpacetimeDB.BSATN.I32> IntList = new();
        internal static readonly SpacetimeDB.BSATN.List<
            string,
            SpacetimeDB.BSATN.String
        > StringList = new();
        internal static readonly SpacetimeDB.BSATN.Array<int, SpacetimeDB.BSATN.I32> IntArray =
            new();
        internal static readonly SpacetimeDB.BSATN.Array<
            string,
            SpacetimeDB.BSATN.String
        > StringArray = new();
        internal static readonly SpacetimeDB.BSATN.List<
            int[][],
            SpacetimeDB.BSATN.Array<int[], SpacetimeDB.BSATN.Array<int, SpacetimeDB.BSATN.I32>>
        > IntArrayArrayList = new();
        internal static readonly SpacetimeDB.BSATN.Array<
            System.Collections.Generic.List<System.Collections.Generic.List<int>>,
            SpacetimeDB.BSATN.List<
                System.Collections.Generic.List<int>,
                SpacetimeDB.BSATN.List<int, SpacetimeDB.BSATN.I32>
            >
        > IntListListArray = new();
        internal static readonly SpacetimeDB.BSATN.List<
            string[][],
            SpacetimeDB.BSATN.Array<
                string[],
                SpacetimeDB.BSATN.Array<string, SpacetimeDB.BSATN.String>
            >
        > StringArrayArrayList = new();
        internal static readonly SpacetimeDB.BSATN.Array<
            System.Collections.Generic.List<System.Collections.Generic.List<string>>,
            SpacetimeDB.BSATN.List<
                System.Collections.Generic.List<string>,
                SpacetimeDB.BSATN.List<string, SpacetimeDB.BSATN.String>
            >
        > StringListListArray = new();

        public ContainsNestedLists Read(System.IO.BinaryReader reader)
        {
            var ___result = new ContainsNestedLists();
            ___result.ReadFields(reader);
            return ___result;
        }

        public void Write(System.IO.BinaryWriter writer, ContainsNestedLists value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<ContainsNestedLists>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new(nameof(IntList), IntList.GetAlgebraicType(registrar)),
                        new(nameof(StringList), StringList.GetAlgebraicType(registrar)),
                        new(nameof(IntArray), IntArray.GetAlgebraicType(registrar)),
                        new(nameof(StringArray), StringArray.GetAlgebraicType(registrar)),
                        new(
                            nameof(IntArrayArrayList),
                            IntArrayArrayList.GetAlgebraicType(registrar)
                        ),
                        new(nameof(IntListListArray), IntListListArray.GetAlgebraicType(registrar)),
                        new(
                            nameof(StringArrayArrayList),
                            StringArrayArrayList.GetAlgebraicType(registrar)
                        ),
                        new(
                            nameof(StringListListArray),
                            StringListListArray.GetAlgebraicType(registrar)
                        )
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<ContainsNestedLists>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        var ___hashIntList = 0;
        if (IntList != null)
        {
            var ___hc0 = new System.HashCode();
            for (int ___i0 = 0; ___i0 < IntList.Count; ___i0++)
            {
                var ___tmp0 = IntList[___i0];
                var ___out1 = ___tmp0.GetHashCode();
                ___hc0.Add(___out1);
            }
            ___hashIntList = ___hc0.ToHashCode();
        }
        var ___hashStringList = 0;
        if (StringList != null)
        {
            var ___hc0 = new System.HashCode();
            for (int ___i0 = 0; ___i0 < StringList.Count; ___i0++)
            {
                var ___tmp0 = StringList[___i0];
                var ___out1 = ___tmp0 == null ? 0 : ___tmp0.GetHashCode();
                ___hc0.Add(___out1);
            }
            ___hashStringList = ___hc0.ToHashCode();
        }
        var ___hashIntArray = 0;
        if (IntArray != null)
        {
            var ___hc0 = new System.HashCode();
            for (int ___i0 = 0; ___i0 < IntArray.Length; ___i0++)
            {
                var ___out1 = IntArray[___i0].GetHashCode();
                ___hc0.Add(___out1);
            }
            ___hashIntArray = ___hc0.ToHashCode();
        }
        var ___hashStringArray = 0;
        if (StringArray != null)
        {
            var ___hc0 = new System.HashCode();
            for (int ___i0 = 0; ___i0 < StringArray.Length; ___i0++)
            {
                var ___out1 = StringArray[___i0] == null ? 0 : StringArray[___i0].GetHashCode();
                ___hc0.Add(___out1);
            }
            ___hashStringArray = ___hc0.ToHashCode();
        }
        var ___hashIntArrayArrayList = 0;
        if (IntArrayArrayList != null)
        {
            var ___hc0 = new System.HashCode();
            for (int ___i0 = 0; ___i0 < IntArrayArrayList.Count; ___i0++)
            {
                var ___tmp0 = IntArrayArrayList[___i0];
                var ___out1 = 0;
                if (___tmp0 != null)
                {
                    var ___hc1 = new System.HashCode();
                    for (int ___i1 = 0; ___i1 < ___tmp0.Length; ___i1++)
                    {
                        var ___out2 = 0;
                        if (___tmp0[___i1] != null)
                        {
                            var ___hc2 = new System.HashCode();
                            for (int ___i2 = 0; ___i2 < ___tmp0[___i1].Length; ___i2++)
                            {
                                var ___out3 = ___tmp0[___i1][___i2].GetHashCode();
                                ___hc2.Add(___out3);
                            }
                            ___out2 = ___hc2.ToHashCode();
                        }
                        ___hc1.Add(___out2);
                    }
                    ___out1 = ___hc1.ToHashCode();
                }
                ___hc0.Add(___out1);
            }
            ___hashIntArrayArrayList = ___hc0.ToHashCode();
        }
        var ___hashIntListListArray = 0;
        if (IntListListArray != null)
        {
            var ___hc0 = new System.HashCode();
            for (int ___i0 = 0; ___i0 < IntListListArray.Length; ___i0++)
            {
                var ___out1 = 0;
                if (IntListListArray[___i0] != null)
                {
                    var ___hc1 = new System.HashCode();
                    for (int ___i1 = 0; ___i1 < IntListListArray[___i0].Count; ___i1++)
                    {
                        var ___tmp1 = IntListListArray[___i0][___i1];
                        var ___out2 = 0;
                        if (___tmp1 != null)
                        {
                            var ___hc2 = new System.HashCode();
                            for (int ___i2 = 0; ___i2 < ___tmp1.Count; ___i2++)
                            {
                                var ___tmp2 = ___tmp1[___i2];
                                var ___out3 = ___tmp2.GetHashCode();
                                ___hc2.Add(___out3);
                            }
                            ___out2 = ___hc2.ToHashCode();
                        }
                        ___hc1.Add(___out2);
                    }
                    ___out1 = ___hc1.ToHashCode();
                }
                ___hc0.Add(___out1);
            }
            ___hashIntListListArray = ___hc0.ToHashCode();
        }
        var ___hashStringArrayArrayList = 0;
        if (StringArrayArrayList != null)
        {
            var ___hc0 = new System.HashCode();
            for (int ___i0 = 0; ___i0 < StringArrayArrayList.Count; ___i0++)
            {
                var ___tmp0 = StringArrayArrayList[___i0];
                var ___out1 = 0;
                if (___tmp0 != null)
                {
                    var ___hc1 = new System.HashCode();
                    for (int ___i1 = 0; ___i1 < ___tmp0.Length; ___i1++)
                    {
                        var ___out2 = 0;
                        if (___tmp0[___i1] != null)
                        {
                            var ___hc2 = new System.HashCode();
                            for (int ___i2 = 0; ___i2 < ___tmp0[___i1].Length; ___i2++)
                            {
                                var ___out3 =
                                    ___tmp0[___i1][___i2] == null
                                        ? 0
                                        : ___tmp0[___i1][___i2].GetHashCode();
                                ___hc2.Add(___out3);
                            }
                            ___out2 = ___hc2.ToHashCode();
                        }
                        ___hc1.Add(___out2);
                    }
                    ___out1 = ___hc1.ToHashCode();
                }
                ___hc0.Add(___out1);
            }
            ___hashStringArrayArrayList = ___hc0.ToHashCode();
        }
        var ___hashStringListListArray = 0;
        if (StringListListArray != null)
        {
            var ___hc0 = new System.HashCode();
            for (int ___i0 = 0; ___i0 < StringListListArray.Length; ___i0++)
            {
                var ___out1 = 0;
                if (StringListListArray[___i0] != null)
                {
                    var ___hc1 = new System.HashCode();
                    for (int ___i1 = 0; ___i1 < StringListListArray[___i0].Count; ___i1++)
                    {
                        var ___tmp1 = StringListListArray[___i0][___i1];
                        var ___out2 = 0;
                        if (___tmp1 != null)
                        {
                            var ___hc2 = new System.HashCode();
                            for (int ___i2 = 0; ___i2 < ___tmp1.Count; ___i2++)
                            {
                                var ___tmp2 = ___tmp1[___i2];
                                var ___out3 = ___tmp2 == null ? 0 : ___tmp2.GetHashCode();
                                ___hc2.Add(___out3);
                            }
                            ___out2 = ___hc2.ToHashCode();
                        }
                        ___hc1.Add(___out2);
                    }
                    ___out1 = ___hc1.ToHashCode();
                }
                ___hc0.Add(___out1);
            }
            ___hashStringListListArray = ___hc0.ToHashCode();
        }
        return ___hashIntList
            ^ ___hashStringList
            ^ ___hashIntArray
            ^ ___hashStringArray
            ^ ___hashIntArrayArrayList
            ^ ___hashIntListListArray
            ^ ___hashStringArrayArrayList
            ^ ___hashStringListListArray;
    }

#nullable enable
    public bool Equals(ContainsNestedLists? that)
    {
        if (((object?)that) == null)
        {
            return false;
        }

        var ___eqIntList = true;
        if (this.IntList == null || that.IntList == null)
        {
            ___eqIntList = this.IntList == that.IntList;
        }
        else if (this.IntList.Count != that.IntList.Count)
        {
            ___eqIntList = false;
        }
        else
        {
            for (int ___i0 = 0; ___i0 < this.IntList.Count; ___i0++)
            {
                var ___tmpA0 = this.IntList[___i0];
                var ___tmpB0 = that.IntList[___i0];
                var ___out1 = ___tmpA0.Equals(___tmpB0);
                if (!___out1)
                {
                    ___eqIntList = false;
                    break;
                }
            }
        }
        var ___eqStringList = true;
        if (this.StringList == null || that.StringList == null)
        {
            ___eqStringList = this.StringList == that.StringList;
        }
        else if (this.StringList.Count != that.StringList.Count)
        {
            ___eqStringList = false;
        }
        else
        {
            for (int ___i0 = 0; ___i0 < this.StringList.Count; ___i0++)
            {
                var ___tmpA0 = this.StringList[___i0];
                var ___tmpB0 = that.StringList[___i0];
                var ___out1 = ___tmpA0 == null ? ___tmpB0 == null : ___tmpA0.Equals(___tmpB0);
                if (!___out1)
                {
                    ___eqStringList = false;
                    break;
                }
            }
        }
        var ___eqIntArray = true;
        if (this.IntArray == null || that.IntArray == null)
        {
            ___eqIntArray = this.IntArray == that.IntArray;
        }
        else if (this.IntArray.Length != that.IntArray.Length)
        {
            ___eqIntArray = false;
        }
        else
        {
            for (int ___i0 = 0; ___i0 < this.IntArray.Length; ___i0++)
            {
                var ___out1 = this.IntArray[___i0].Equals(that.IntArray[___i0]);
                if (!___out1)
                {
                    ___eqIntArray = false;
                    break;
                }
            }
        }
        var ___eqStringArray = true;
        if (this.StringArray == null || that.StringArray == null)
        {
            ___eqStringArray = this.StringArray == that.StringArray;
        }
        else if (this.StringArray.Length != that.StringArray.Length)
        {
            ___eqStringArray = false;
        }
        else
        {
            for (int ___i0 = 0; ___i0 < this.StringArray.Length; ___i0++)
            {
                var ___out1 =
                    this.StringArray[___i0] == null
                        ? that.StringArray[___i0] == null
                        : this.StringArray[___i0].Equals(that.StringArray[___i0]);
                if (!___out1)
                {
                    ___eqStringArray = false;
                    break;
                }
            }
        }
        var ___eqIntArrayArrayList = true;
        if (this.IntArrayArrayList == null || that.IntArrayArrayList == null)
        {
            ___eqIntArrayArrayList = this.IntArrayArrayList == that.IntArrayArrayList;
        }
        else if (this.IntArrayArrayList.Count != that.IntArrayArrayList.Count)
        {
            ___eqIntArrayArrayList = false;
        }
        else
        {
            for (int ___i0 = 0; ___i0 < this.IntArrayArrayList.Count; ___i0++)
            {
                var ___tmpA0 = this.IntArrayArrayList[___i0];
                var ___tmpB0 = that.IntArrayArrayList[___i0];
                var ___out1 = true;
                if (___tmpA0 == null || ___tmpB0 == null)
                {
                    ___out1 = ___tmpA0 == ___tmpB0;
                }
                else if (___tmpA0.Length != ___tmpB0.Length)
                {
                    ___out1 = false;
                }
                else
                {
                    for (int ___i1 = 0; ___i1 < ___tmpA0.Length; ___i1++)
                    {
                        var ___out2 = true;
                        if (___tmpA0[___i1] == null || ___tmpB0[___i1] == null)
                        {
                            ___out2 = ___tmpA0[___i1] == ___tmpB0[___i1];
                        }
                        else if (___tmpA0[___i1].Length != ___tmpB0[___i1].Length)
                        {
                            ___out2 = false;
                        }
                        else
                        {
                            for (int ___i2 = 0; ___i2 < ___tmpA0[___i1].Length; ___i2++)
                            {
                                var ___out3 = ___tmpA0[___i1][___i2].Equals(___tmpB0[___i1][___i2]);
                                if (!___out3)
                                {
                                    ___out2 = false;
                                    break;
                                }
                            }
                        }
                        if (!___out2)
                        {
                            ___out1 = false;
                            break;
                        }
                    }
                }
                if (!___out1)
                {
                    ___eqIntArrayArrayList = false;
                    break;
                }
            }
        }
        var ___eqIntListListArray = true;
        if (this.IntListListArray == null || that.IntListListArray == null)
        {
            ___eqIntListListArray = this.IntListListArray == that.IntListListArray;
        }
        else if (this.IntListListArray.Length != that.IntListListArray.Length)
        {
            ___eqIntListListArray = false;
        }
        else
        {
            for (int ___i0 = 0; ___i0 < this.IntListListArray.Length; ___i0++)
            {
                var ___out1 = true;
                if (this.IntListListArray[___i0] == null || that.IntListListArray[___i0] == null)
                {
                    ___out1 = this.IntListListArray[___i0] == that.IntListListArray[___i0];
                }
                else if (this.IntListListArray[___i0].Count != that.IntListListArray[___i0].Count)
                {
                    ___out1 = false;
                }
                else
                {
                    for (int ___i1 = 0; ___i1 < this.IntListListArray[___i0].Count; ___i1++)
                    {
                        var ___tmpA1 = this.IntListListArray[___i0][___i1];
                        var ___tmpB1 = that.IntListListArray[___i0][___i1];
                        var ___out2 = true;
                        if (___tmpA1 == null || ___tmpB1 == null)
                        {
                            ___out2 = ___tmpA1 == ___tmpB1;
                        }
                        else if (___tmpA1.Count != ___tmpB1.Count)
                        {
                            ___out2 = false;
                        }
                        else
                        {
                            for (int ___i2 = 0; ___i2 < ___tmpA1.Count; ___i2++)
                            {
                                var ___tmpA2 = ___tmpA1[___i2];
                                var ___tmpB2 = ___tmpB1[___i2];
                                var ___out3 = ___tmpA2.Equals(___tmpB2);
                                if (!___out3)
                                {
                                    ___out2 = false;
                                    break;
                                }
                            }
                        }
                        if (!___out2)
                        {
                            ___out1 = false;
                            break;
                        }
                    }
                }
                if (!___out1)
                {
                    ___eqIntListListArray = false;
                    break;
                }
            }
        }
        var ___eqStringArrayArrayList = true;
        if (this.StringArrayArrayList == null || that.StringArrayArrayList == null)
        {
            ___eqStringArrayArrayList = this.StringArrayArrayList == that.StringArrayArrayList;
        }
        else if (this.StringArrayArrayList.Count != that.StringArrayArrayList.Count)
        {
            ___eqStringArrayArrayList = false;
        }
        else
        {
            for (int ___i0 = 0; ___i0 < this.StringArrayArrayList.Count; ___i0++)
            {
                var ___tmpA0 = this.StringArrayArrayList[___i0];
                var ___tmpB0 = that.StringArrayArrayList[___i0];
                var ___out1 = true;
                if (___tmpA0 == null || ___tmpB0 == null)
                {
                    ___out1 = ___tmpA0 == ___tmpB0;
                }
                else if (___tmpA0.Length != ___tmpB0.Length)
                {
                    ___out1 = false;
                }
                else
                {
                    for (int ___i1 = 0; ___i1 < ___tmpA0.Length; ___i1++)
                    {
                        var ___out2 = true;
                        if (___tmpA0[___i1] == null || ___tmpB0[___i1] == null)
                        {
                            ___out2 = ___tmpA0[___i1] == ___tmpB0[___i1];
                        }
                        else if (___tmpA0[___i1].Length != ___tmpB0[___i1].Length)
                        {
                            ___out2 = false;
                        }
                        else
                        {
                            for (int ___i2 = 0; ___i2 < ___tmpA0[___i1].Length; ___i2++)
                            {
                                var ___out3 =
                                    ___tmpA0[___i1][___i2] == null
                                        ? ___tmpB0[___i1][___i2] == null
                                        : ___tmpA0[___i1][___i2].Equals(___tmpB0[___i1][___i2]);
                                if (!___out3)
                                {
                                    ___out2 = false;
                                    break;
                                }
                            }
                        }
                        if (!___out2)
                        {
                            ___out1 = false;
                            break;
                        }
                    }
                }
                if (!___out1)
                {
                    ___eqStringArrayArrayList = false;
                    break;
                }
            }
        }
        var ___eqStringListListArray = true;
        if (this.StringListListArray == null || that.StringListListArray == null)
        {
            ___eqStringListListArray = this.StringListListArray == that.StringListListArray;
        }
        else if (this.StringListListArray.Length != that.StringListListArray.Length)
        {
            ___eqStringListListArray = false;
        }
        else
        {
            for (int ___i0 = 0; ___i0 < this.StringListListArray.Length; ___i0++)
            {
                var ___out1 = true;
                if (
                    this.StringListListArray[___i0] == null
                    || that.StringListListArray[___i0] == null
                )
                {
                    ___out1 = this.StringListListArray[___i0] == that.StringListListArray[___i0];
                }
                else if (
                    this.StringListListArray[___i0].Count != that.StringListListArray[___i0].Count
                )
                {
                    ___out1 = false;
                }
                else
                {
                    for (int ___i1 = 0; ___i1 < this.StringListListArray[___i0].Count; ___i1++)
                    {
                        var ___tmpA1 = this.StringListListArray[___i0][___i1];
                        var ___tmpB1 = that.StringListListArray[___i0][___i1];
                        var ___out2 = true;
                        if (___tmpA1 == null || ___tmpB1 == null)
                        {
                            ___out2 = ___tmpA1 == ___tmpB1;
                        }
                        else if (___tmpA1.Count != ___tmpB1.Count)
                        {
                            ___out2 = false;
                        }
                        else
                        {
                            for (int ___i2 = 0; ___i2 < ___tmpA1.Count; ___i2++)
                            {
                                var ___tmpA2 = ___tmpA1[___i2];
                                var ___tmpB2 = ___tmpB1[___i2];
                                var ___out3 =
                                    ___tmpA2 == null ? ___tmpB2 == null : ___tmpA2.Equals(___tmpB2);
                                if (!___out3)
                                {
                                    ___out2 = false;
                                    break;
                                }
                            }
                        }
                        if (!___out2)
                        {
                            ___out1 = false;
                            break;
                        }
                    }
                }
                if (!___out1)
                {
                    ___eqStringListListArray = false;
                    break;
                }
            }
        }
        return ___eqIntList
            && ___eqStringList
            && ___eqIntArray
            && ___eqStringArray
            && ___eqIntArrayArrayList
            && ___eqIntListListArray
            && ___eqStringArrayArrayList
            && ___eqStringListListArray;
    }

    public override bool Equals(object? that)
    {
        if (that == null)
        {
            return false;
        }
        var that_ = that as ContainsNestedLists;
        if (((object?)that_) == null)
        {
            return false;
        }
        return Equals(that_);
    }

    public static bool operator ==(ContainsNestedLists? this_, ContainsNestedLists? that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return object.Equals(this_, that);
        }
        return this_.Equals(that);
    }

    public static bool operator !=(ContainsNestedLists? this_, ContainsNestedLists? that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return !object.Equals(this_, that);
        }
        return !this_.Equals(that);
    }
#nullable restore
} // ContainsNestedLists
