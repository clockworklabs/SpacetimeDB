//HintName: FormerlyForbiddenFieldNames.cs
// <auto-generated />
#nullable enable

partial struct FormerlyForbiddenFieldNames
    : System.IEquatable<FormerlyForbiddenFieldNames>,
        SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        Read = BSATN.ReadRW.Read(reader);
        Write = BSATN.WriteRW.Read(reader);
        GetAlgebraicType = BSATN.GetAlgebraicTypeRW.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.ReadRW.Write(writer, Read);
        BSATN.WriteRW.Write(writer, Write);
        BSATN.GetAlgebraicTypeRW.Write(writer, GetAlgebraicType);
    }

    object SpacetimeDB.BSATN.IStructuralReadWrite.GetSerializer()
    {
        return new BSATN();
    }

    public override string ToString() =>
        $"FormerlyForbiddenFieldNames {{ Read = {SpacetimeDB.BSATN.StringUtil.GenericToString(Read)}, Write = {SpacetimeDB.BSATN.StringUtil.GenericToString(Write)}, GetAlgebraicType = {SpacetimeDB.BSATN.StringUtil.GenericToString(GetAlgebraicType)} }}";

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<FormerlyForbiddenFieldNames>
    {
        internal static readonly SpacetimeDB.BSATN.U32 ReadRW = new();
        internal static readonly SpacetimeDB.BSATN.U32 WriteRW = new();
        internal static readonly SpacetimeDB.BSATN.U32 GetAlgebraicTypeRW = new();

        public FormerlyForbiddenFieldNames Read(System.IO.BinaryReader reader)
        {
            var ___result = new FormerlyForbiddenFieldNames();
            ___result.ReadFields(reader);
            return ___result;
        }

        public void Write(System.IO.BinaryWriter writer, FormerlyForbiddenFieldNames value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<FormerlyForbiddenFieldNames>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new("Read", ReadRW.GetAlgebraicType(registrar)),
                        new("Write", WriteRW.GetAlgebraicType(registrar)),
                        new("GetAlgebraicType", GetAlgebraicTypeRW.GetAlgebraicType(registrar))
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<FormerlyForbiddenFieldNames>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        var ___hashRead = Read.GetHashCode();
        var ___hashWrite = Write.GetHashCode();
        var ___hashGetAlgebraicType = GetAlgebraicType.GetHashCode();
        return ___hashRead ^ ___hashWrite ^ ___hashGetAlgebraicType;
    }

#nullable enable
    public bool Equals(FormerlyForbiddenFieldNames that)
    {
        var ___eqRead = this.Read.Equals(that.Read);
        var ___eqWrite = this.Write.Equals(that.Write);
        var ___eqGetAlgebraicType = this.GetAlgebraicType.Equals(that.GetAlgebraicType);
        return ___eqRead && ___eqWrite && ___eqGetAlgebraicType;
    }

    public override bool Equals(object? that)
    {
        if (that == null)
        {
            return false;
        }
        var that_ = that as FormerlyForbiddenFieldNames?;
        if (((object?)that_) == null)
        {
            return false;
        }
        return Equals(that_);
    }

    public static bool operator ==(
        FormerlyForbiddenFieldNames this_,
        FormerlyForbiddenFieldNames that
    )
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return object.Equals(this_, that);
        }
        return this_.Equals(that);
    }

    public static bool operator !=(
        FormerlyForbiddenFieldNames this_,
        FormerlyForbiddenFieldNames that
    )
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return !object.Equals(this_, that);
        }
        return !this_.Equals(that);
    }
#nullable restore
} // FormerlyForbiddenFieldNames
