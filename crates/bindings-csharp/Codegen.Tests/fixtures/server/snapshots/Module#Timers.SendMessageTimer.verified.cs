//HintName: Timers.SendMessageTimer.cs
// <auto-generated />
#nullable enable

partial class Timers
{
    partial struct SendMessageTimer
        : System.IEquatable<SendMessageTimer>,
            SpacetimeDB.BSATN.IStructuralReadWrite
    {
        public void ReadFields(System.IO.BinaryReader reader)
        {
            ScheduledId = BSATN.ScheduledId.Read(reader);
            ScheduledAt = BSATN.ScheduledAt.Read(reader);
            Text = BSATN.Text.Read(reader);
        }

        public void WriteFields(System.IO.BinaryWriter writer)
        {
            BSATN.ScheduledId.Write(writer, ScheduledId);
            BSATN.ScheduledAt.Write(writer, ScheduledAt);
            BSATN.Text.Write(writer, Text);
        }

        object SpacetimeDB.BSATN.IStructuralReadWrite.GetSerializer()
        {
            return new BSATN();
        }

        public override string ToString() =>
            $"SendMessageTimer {{ ScheduledId = {SpacetimeDB.BSATN.StringUtil.GenericToString(ScheduledId)}, ScheduledAt = {SpacetimeDB.BSATN.StringUtil.GenericToString(ScheduledAt)}, Text = {SpacetimeDB.BSATN.StringUtil.GenericToString(Text)} }}";

        public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<Timers.SendMessageTimer>
        {
            internal static readonly SpacetimeDB.BSATN.U64 ScheduledId = new();
            internal static readonly SpacetimeDB.ScheduleAt.BSATN ScheduledAt = new();
            internal static readonly SpacetimeDB.BSATN.String Text = new();

            public Timers.SendMessageTimer Read(System.IO.BinaryReader reader)
            {
                var ___result = new Timers.SendMessageTimer();
                ___result.ReadFields(reader);
                return ___result;
            }

            public void Write(System.IO.BinaryWriter writer, Timers.SendMessageTimer value)
            {
                value.WriteFields(writer);
            }

            public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
                SpacetimeDB.BSATN.ITypeRegistrar registrar
            ) =>
                registrar.RegisterType<Timers.SendMessageTimer>(
                    _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                        new SpacetimeDB.BSATN.AggregateElement[]
                        {
                            new(nameof(ScheduledId), ScheduledId.GetAlgebraicType(registrar)),
                            new(nameof(ScheduledAt), ScheduledAt.GetAlgebraicType(registrar)),
                            new(nameof(Text), Text.GetAlgebraicType(registrar))
                        }
                    )
                );

            SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<Timers.SendMessageTimer>.GetAlgebraicType(
                SpacetimeDB.BSATN.ITypeRegistrar registrar
            ) => GetAlgebraicType(registrar);
        }

        public override int GetHashCode()
        {
            var ___hashScheduledId = ScheduledId.GetHashCode();
            var ___hashScheduledAt = ScheduledAt == null ? 0 : ScheduledAt.GetHashCode();
            var ___hashText = Text == null ? 0 : Text.GetHashCode();
            return ___hashScheduledId ^ ___hashScheduledAt ^ ___hashText;
        }

#nullable enable
        public bool Equals(Timers.SendMessageTimer that)
        {
            var ___eqScheduledId = this.ScheduledId.Equals(that.ScheduledId);
            var ___eqScheduledAt =
                this.ScheduledAt == null
                    ? that.ScheduledAt == null
                    : this.ScheduledAt.Equals(that.ScheduledAt);
            var ___eqText = this.Text == null ? that.Text == null : this.Text.Equals(that.Text);
            return ___eqScheduledId && ___eqScheduledAt && ___eqText;
        }

        public override bool Equals(object? that)
        {
            if (that == null)
            {
                return false;
            }
            var that_ = that as Timers.SendMessageTimer?;
            if (((object?)that_) == null)
            {
                return false;
            }
            return Equals(that_);
        }

        public static bool operator ==(Timers.SendMessageTimer this_, Timers.SendMessageTimer that)
        {
            if (((object?)this_) == null || ((object?)that) == null)
            {
                return object.Equals(this_, that);
            }
            return this_.Equals(that);
        }

        public static bool operator !=(Timers.SendMessageTimer this_, Timers.SendMessageTimer that)
        {
            if (((object?)this_) == null || ((object?)that) == null)
            {
                return !object.Equals(this_, that);
            }
            return !this_.Equals(that);
        }
#nullable restore
    } // SendMessageTimer
} // Timers
