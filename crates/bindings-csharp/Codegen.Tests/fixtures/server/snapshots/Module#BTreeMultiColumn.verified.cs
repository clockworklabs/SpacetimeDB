//HintName: BTreeMultiColumn.cs
// <auto-generated />
#nullable enable

partial struct BTreeMultiColumn : SpacetimeDB.Internal.ITable<BTreeMultiColumn>
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        X = BSATN.X.Read(reader);
        Y = BSATN.Y.Read(reader);
        Z = BSATN.Z.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.X.Write(writer, X);
        BSATN.Y.Write(writer, Y);
        BSATN.Z.Write(writer, Z);
    }

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<BTreeMultiColumn>
    {
        internal static readonly SpacetimeDB.BSATN.U32 X = new();
        internal static readonly SpacetimeDB.BSATN.U32 Y = new();
        internal static readonly SpacetimeDB.BSATN.U32 Z = new();

        public BTreeMultiColumn Read(System.IO.BinaryReader reader) =>
            SpacetimeDB.BSATN.IStructuralReadWrite.Read<BTreeMultiColumn>(reader);

        public void Write(System.IO.BinaryWriter writer, BTreeMultiColumn value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<BTreeMultiColumn>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new(nameof(X), X.GetAlgebraicType(registrar)),
                        new(nameof(Y), Y.GetAlgebraicType(registrar)),
                        new(nameof(Z), Z.GetAlgebraicType(registrar))
                    }
                )
            );
    }

    static IEnumerable<SpacetimeDB.Internal.TableDesc> SpacetimeDB.Internal.ITable<BTreeMultiColumn>.MakeTableDesc(
        SpacetimeDB.BSATN.ITypeRegistrar registrar
    ) =>
        [
            new(
                new(
                    TableName: nameof(SpacetimeDB.Local.BTreeMultiColumn),
                    Columns:
                    [
                        new(nameof(X), BSATN.X.GetAlgebraicType(registrar)),
                        new(nameof(Y), BSATN.Y.GetAlgebraicType(registrar)),
                        new(nameof(Z), BSATN.Z.GetAlgebraicType(registrar))
                    ],
                    Indexes:
                    [
                        new(
                            "BTreeMultiColumn_X_Y_Z_idx_btree",
                            false,
                            SpacetimeDB.Internal.IndexType.BTree,
                            [0, 1, 2]
                        )
                    ],
                    Constraints: [],
                    Sequences: [],
                    // "system" | "user"
                    TableType: "user",
                    // "public" | "private"
                    TableAccess: "private",
                    Scheduled: null
                ),
                (uint)
                    (
                        (SpacetimeDB.BSATN.AlgebraicType.Ref)new BSATN().GetAlgebraicType(registrar)
                    ).Ref_
            ),
        ];
} // BTreeMultiColumn
