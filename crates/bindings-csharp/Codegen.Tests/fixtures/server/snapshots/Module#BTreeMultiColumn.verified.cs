//HintName: BTreeMultiColumn.cs
// <auto-generated />
#nullable enable

partial struct BTreeMultiColumn
    : System.IEquatable<BTreeMultiColumn>,
        SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        X = BSATN.X.Read(reader);
        Y = BSATN.Y.Read(reader);
        Z = BSATN.Z.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.X.Write(writer, X);
        BSATN.Y.Write(writer, Y);
        BSATN.Z.Write(writer, Z);
    }

    object SpacetimeDB.BSATN.IStructuralReadWrite.GetSerializer()
    {
        return new BSATN();
    }

    public override string ToString() =>
        $"BTreeMultiColumn {{ X = {SpacetimeDB.BSATN.StringUtil.GenericToString(X)}, Y = {SpacetimeDB.BSATN.StringUtil.GenericToString(Y)}, Z = {SpacetimeDB.BSATN.StringUtil.GenericToString(Z)} }}";

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<BTreeMultiColumn>
    {
        internal static readonly SpacetimeDB.BSATN.U32 X = new();
        internal static readonly SpacetimeDB.BSATN.U32 Y = new();
        internal static readonly SpacetimeDB.BSATN.U32 Z = new();

        public BTreeMultiColumn Read(System.IO.BinaryReader reader)
        {
            var ___result = new BTreeMultiColumn();
            ___result.ReadFields(reader);
            return ___result;
        }

        public void Write(System.IO.BinaryWriter writer, BTreeMultiColumn value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<BTreeMultiColumn>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new(nameof(X), X.GetAlgebraicType(registrar)),
                        new(nameof(Y), Y.GetAlgebraicType(registrar)),
                        new(nameof(Z), Z.GetAlgebraicType(registrar))
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<BTreeMultiColumn>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        var ___hashX = X.GetHashCode();
        var ___hashY = Y.GetHashCode();
        var ___hashZ = Z.GetHashCode();
        return ___hashX ^ ___hashY ^ ___hashZ;
    }

#nullable enable
    public bool Equals(BTreeMultiColumn that)
    {
        var ___eqX = this.X.Equals(that.X);
        var ___eqY = this.Y.Equals(that.Y);
        var ___eqZ = this.Z.Equals(that.Z);
        return ___eqX && ___eqY && ___eqZ;
    }

    public override bool Equals(object? that)
    {
        if (that == null)
        {
            return false;
        }
        var that_ = that as BTreeMultiColumn?;
        if (((object?)that_) == null)
        {
            return false;
        }
        return Equals(that_);
    }

    public static bool operator ==(BTreeMultiColumn this_, BTreeMultiColumn that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return object.Equals(this_, that);
        }
        return this_.Equals(that);
    }

    public static bool operator !=(BTreeMultiColumn this_, BTreeMultiColumn that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return !object.Equals(this_, that);
        }
        return !this_.Equals(that);
    }
#nullable restore
} // BTreeMultiColumn
