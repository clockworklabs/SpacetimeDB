//HintName: TestUniqueNotEquatable.cs
// <auto-generated />
#nullable enable

partial struct TestUniqueNotEquatable
    : System.IEquatable<TestUniqueNotEquatable>,
        SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        UniqueField = BSATN.UniqueField.Read(reader);
        PrimaryKeyField = BSATN.PrimaryKeyField.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.UniqueField.Write(writer, UniqueField);
        BSATN.PrimaryKeyField.Write(writer, PrimaryKeyField);
    }

    object SpacetimeDB.BSATN.IStructuralReadWrite.GetSerializer()
    {
        return new BSATN();
    }

    public override string ToString() =>
        $"TestUniqueNotEquatable {{ UniqueField = {SpacetimeDB.BSATN.StringUtil.GenericToString(UniqueField)}, PrimaryKeyField = {SpacetimeDB.BSATN.StringUtil.GenericToString(PrimaryKeyField)} }}";

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<TestUniqueNotEquatable>
    {
        internal static readonly SpacetimeDB.BSATN.ValueOption<
            int,
            SpacetimeDB.BSATN.I32
        > UniqueField = new();
        internal static readonly SpacetimeDB.BSATN.Enum<TestEnumWithExplicitValues> PrimaryKeyField =
            new();

        public TestUniqueNotEquatable Read(System.IO.BinaryReader reader)
        {
            var ___result = new TestUniqueNotEquatable();
            ___result.ReadFields(reader);
            return ___result;
        }

        public void Write(System.IO.BinaryWriter writer, TestUniqueNotEquatable value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<TestUniqueNotEquatable>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new(nameof(UniqueField), UniqueField.GetAlgebraicType(registrar)),
                        new(nameof(PrimaryKeyField), PrimaryKeyField.GetAlgebraicType(registrar))
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<TestUniqueNotEquatable>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        var ___hashUniqueField = UniqueField.GetHashCode();
        var ___hashPrimaryKeyField = PrimaryKeyField.GetHashCode();
        return ___hashUniqueField ^ ___hashPrimaryKeyField;
    }

#nullable enable
    public bool Equals(TestUniqueNotEquatable that)
    {
        var ___eqUniqueField = this.UniqueField.Equals(that.UniqueField);
        var ___eqPrimaryKeyField = this.PrimaryKeyField.Equals(that.PrimaryKeyField);
        return ___eqUniqueField && ___eqPrimaryKeyField;
    }

    public override bool Equals(object? that)
    {
        if (that == null)
        {
            return false;
        }
        var that_ = that as TestUniqueNotEquatable?;
        if (((object?)that_) == null)
        {
            return false;
        }
        return Equals(that_);
    }

    public static bool operator ==(TestUniqueNotEquatable this_, TestUniqueNotEquatable that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return object.Equals(this_, that);
        }
        return this_.Equals(that);
    }

    public static bool operator !=(TestUniqueNotEquatable this_, TestUniqueNotEquatable that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return !object.Equals(this_, that);
        }
        return !this_.Equals(that);
    }
#nullable restore
} // TestUniqueNotEquatable
