//HintName: TestScheduleIssues.cs
// <auto-generated />
#nullable enable

partial struct TestScheduleIssues
    : System.IEquatable<TestScheduleIssues>,
        SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        IdWrongType = BSATN.IdWrongType.Read(reader);
        IdCorrectType = BSATN.IdCorrectType.Read(reader);
        ScheduleAtWrongType = BSATN.ScheduleAtWrongType.Read(reader);
        ScheduleAtCorrectType = BSATN.ScheduleAtCorrectType.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.IdWrongType.Write(writer, IdWrongType);
        BSATN.IdCorrectType.Write(writer, IdCorrectType);
        BSATN.ScheduleAtWrongType.Write(writer, ScheduleAtWrongType);
        BSATN.ScheduleAtCorrectType.Write(writer, ScheduleAtCorrectType);
    }

    object SpacetimeDB.BSATN.IStructuralReadWrite.GetSerializer()
    {
        return new BSATN();
    }

    public override string ToString() =>
        $"TestScheduleIssues {{ IdWrongType = {SpacetimeDB.BSATN.StringUtil.GenericToString(IdWrongType)}, IdCorrectType = {SpacetimeDB.BSATN.StringUtil.GenericToString(IdCorrectType)}, ScheduleAtWrongType = {SpacetimeDB.BSATN.StringUtil.GenericToString(ScheduleAtWrongType)}, ScheduleAtCorrectType = {SpacetimeDB.BSATN.StringUtil.GenericToString(ScheduleAtCorrectType)} }}";

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<TestScheduleIssues>
    {
        internal static readonly SpacetimeDB.BSATN.String IdWrongType = new();
        internal static readonly SpacetimeDB.BSATN.I32 IdCorrectType = new();
        internal static readonly SpacetimeDB.BSATN.I32 ScheduleAtWrongType = new();
        internal static readonly SpacetimeDB.ScheduleAt.BSATN ScheduleAtCorrectType = new();

        public TestScheduleIssues Read(System.IO.BinaryReader reader)
        {
            var ___result = new TestScheduleIssues();
            ___result.ReadFields(reader);
            return ___result;
        }

        public void Write(System.IO.BinaryWriter writer, TestScheduleIssues value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<TestScheduleIssues>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new(nameof(IdWrongType), IdWrongType.GetAlgebraicType(registrar)),
                        new(nameof(IdCorrectType), IdCorrectType.GetAlgebraicType(registrar)),
                        new(
                            nameof(ScheduleAtWrongType),
                            ScheduleAtWrongType.GetAlgebraicType(registrar)
                        ),
                        new(
                            nameof(ScheduleAtCorrectType),
                            ScheduleAtCorrectType.GetAlgebraicType(registrar)
                        )
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<TestScheduleIssues>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        var ___hashIdWrongType = IdWrongType == null ? 0 : IdWrongType.GetHashCode();
        var ___hashIdCorrectType = IdCorrectType.GetHashCode();
        var ___hashScheduleAtWrongType = ScheduleAtWrongType.GetHashCode();
        var ___hashScheduleAtCorrectType =
            ScheduleAtCorrectType == null ? 0 : ScheduleAtCorrectType.GetHashCode();
        return ___hashIdWrongType
            ^ ___hashIdCorrectType
            ^ ___hashScheduleAtWrongType
            ^ ___hashScheduleAtCorrectType;
    }

#nullable enable
    public bool Equals(TestScheduleIssues that)
    {
        var ___eqIdWrongType =
            this.IdWrongType == null
                ? that.IdWrongType == null
                : this.IdWrongType.Equals(that.IdWrongType);
        var ___eqIdCorrectType = this.IdCorrectType.Equals(that.IdCorrectType);
        var ___eqScheduleAtWrongType = this.ScheduleAtWrongType.Equals(that.ScheduleAtWrongType);
        var ___eqScheduleAtCorrectType =
            this.ScheduleAtCorrectType == null
                ? that.ScheduleAtCorrectType == null
                : this.ScheduleAtCorrectType.Equals(that.ScheduleAtCorrectType);
        return ___eqIdWrongType
            && ___eqIdCorrectType
            && ___eqScheduleAtWrongType
            && ___eqScheduleAtCorrectType;
    }

    public override bool Equals(object? that)
    {
        if (that == null)
        {
            return false;
        }
        var that_ = that as TestScheduleIssues?;
        if (((object?)that_) == null)
        {
            return false;
        }
        return Equals(that_);
    }

    public static bool operator ==(TestScheduleIssues this_, TestScheduleIssues that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return object.Equals(this_, that);
        }
        return this_.Equals(that);
    }

    public static bool operator !=(TestScheduleIssues this_, TestScheduleIssues that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return !object.Equals(this_, that);
        }
        return !this_.Equals(that);
    }
#nullable restore
} // TestScheduleIssues
