//HintName: MyStruct.cs
// <auto-generated />
#nullable enable

partial struct MyStruct : System.IEquatable<MyStruct>, SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        x = BSATN.xRW.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.xRW.Write(writer, x);
    }

    object SpacetimeDB.BSATN.IStructuralReadWrite.GetSerializer()
    {
        return new BSATN();
    }

    public override string ToString() =>
        $"MyStruct {{ x = {SpacetimeDB.BSATN.StringUtil.GenericToString(x)} }}";

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<MyStruct>
    {
        internal static readonly SpacetimeDB.BSATN.I32 xRW = new();

        public MyStruct Read(System.IO.BinaryReader reader)
        {
            var ___result = new MyStruct();
            ___result.ReadFields(reader);
            return ___result;
        }

        public void Write(System.IO.BinaryWriter writer, MyStruct value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<MyStruct>(_ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                new SpacetimeDB.BSATN.AggregateElement[]
                {
                    new("x", xRW.GetAlgebraicType(registrar))
                }
            ));

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<MyStruct>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        var ___hashx = x.GetHashCode();
        return ___hashx;
    }

#nullable enable
    public bool Equals(MyStruct that)
    {
        var ___eqx = this.x.Equals(that.x);
        return ___eqx;
    }

    public override bool Equals(object? that)
    {
        if (that == null)
        {
            return false;
        }
        var that_ = that as MyStruct?;
        if (((object?)that_) == null)
        {
            return false;
        }
        return Equals(that_);
    }

    public static bool operator ==(MyStruct this_, MyStruct that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return object.Equals(this_, that);
        }
        return this_.Equals(that);
    }

    public static bool operator !=(MyStruct this_, MyStruct that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return !object.Equals(this_, that);
        }
        return !this_.Equals(that);
    }
#nullable restore
} // MyStruct
