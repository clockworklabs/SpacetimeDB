//HintName: FFI.cs
// <auto-generated />
#nullable enable

using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SpacetimeDB
{
    public sealed record ReducerContext : DbContext<Local>, Internal.IReducerContext
    {
        public readonly Identity Sender;
        public readonly Address? Address;
        public readonly Random Random;
        public readonly DateTimeOffset Time;

        internal ReducerContext(
            Identity sender,
            Address? address,
            Random random,
            DateTimeOffset time
        )
        {
            Sender = sender;
            Address = address;
            Random = random;
            Time = time;
        }
    }

    namespace Internal.TableHandles
    {
        public readonly struct TestAutoIncNotInteger
            : SpacetimeDB.Internal.ITableView<TestAutoIncNotInteger, global::TestAutoIncNotInteger>
        {
            static global::TestAutoIncNotInteger SpacetimeDB.Internal.ITableView<
                TestAutoIncNotInteger,
                global::TestAutoIncNotInteger
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestAutoIncNotInteger row)
            {
                return row;
            }

            public IEnumerable<global::TestAutoIncNotInteger> Iter() =>
                SpacetimeDB.Internal.ITableView<
                    TestAutoIncNotInteger,
                    global::TestAutoIncNotInteger
                >.Iter();

            public global::TestAutoIncNotInteger Insert(global::TestAutoIncNotInteger row) =>
                SpacetimeDB.Internal.ITableView<
                    TestAutoIncNotInteger,
                    global::TestAutoIncNotInteger
                >.Insert(row);

            public IEnumerable<global::TestAutoIncNotInteger> FilterByIdentityField(
                string IdentityField
            ) =>
                SpacetimeDB
                    .Internal.ITableView<
                        TestAutoIncNotInteger,
                        global::TestAutoIncNotInteger
                    >.ColEq.Where(
                        1,
                        IdentityField,
                        global::TestAutoIncNotInteger.BSATN.IdentityField
                    )
                    .Iter();
        }

        public readonly struct TestTableTaggedEnum
            : SpacetimeDB.Internal.ITableView<TestTableTaggedEnum, global::TestTableTaggedEnum>
        {
            static global::TestTableTaggedEnum SpacetimeDB.Internal.ITableView<
                TestTableTaggedEnum,
                global::TestTableTaggedEnum
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestTableTaggedEnum row)
            {
                return row;
            }

            public IEnumerable<global::TestTableTaggedEnum> Iter() =>
                SpacetimeDB.Internal.ITableView<
                    TestTableTaggedEnum,
                    global::TestTableTaggedEnum
                >.Iter();

            public global::TestTableTaggedEnum Insert(global::TestTableTaggedEnum row) =>
                SpacetimeDB.Internal.ITableView<
                    TestTableTaggedEnum,
                    global::TestTableTaggedEnum
                >.Insert(row);

            public IEnumerable<global::TestTableTaggedEnum> FilterByX(int X) =>
                SpacetimeDB
                    .Internal.ITableView<
                        TestTableTaggedEnum,
                        global::TestTableTaggedEnum
                    >.ColEq.Where(0, X, global::TestTableTaggedEnum.BSATN.X)
                    .Iter();

            public IEnumerable<global::TestTableTaggedEnum> FilterByY(int Y) =>
                SpacetimeDB
                    .Internal.ITableView<
                        TestTableTaggedEnum,
                        global::TestTableTaggedEnum
                    >.ColEq.Where(1, Y, global::TestTableTaggedEnum.BSATN.Y)
                    .Iter();
        }

        public readonly struct TestUniqueNotEquatable
            : SpacetimeDB.Internal.ITableView<
                TestUniqueNotEquatable,
                global::TestUniqueNotEquatable
            >
        {
            static global::TestUniqueNotEquatable SpacetimeDB.Internal.ITableView<
                TestUniqueNotEquatable,
                global::TestUniqueNotEquatable
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestUniqueNotEquatable row)
            {
                return row;
            }

            public IEnumerable<global::TestUniqueNotEquatable> Iter() =>
                SpacetimeDB.Internal.ITableView<
                    TestUniqueNotEquatable,
                    global::TestUniqueNotEquatable
                >.Iter();

            public global::TestUniqueNotEquatable Insert(global::TestUniqueNotEquatable row) =>
                SpacetimeDB.Internal.ITableView<
                    TestUniqueNotEquatable,
                    global::TestUniqueNotEquatable
                >.Insert(row);
        }
    }

    public sealed class Local
    {
        public Internal.TableHandles.TestAutoIncNotInteger TestAutoIncNotInteger => new();
        public Internal.TableHandles.TestTableTaggedEnum TestTableTaggedEnum => new();
        public Internal.TableHandles.TestUniqueNotEquatable TestUniqueNotEquatable => new();
    }
}

static class ModuleRegistration
{
#if EXPERIMENTAL_WASM_AOT
    // In AOT mode we're building a library.
    // Main method won't be called automatically, so we need to export it as a preinit function.
    [UnmanagedCallersOnly(EntryPoint = "__preinit__10_init_csharp")]
#else
    // Prevent trimming of FFI exports that are invoked from C and not visible to C# trimmer.
    [DynamicDependency(
        DynamicallyAccessedMemberTypes.PublicMethods,
        typeof(SpacetimeDB.Internal.Module)
    )]
#endif
    public static void Main()
    {
        SpacetimeDB.Internal.Module.SetReducerContextConstructor(
            (identity, address, random, time) =>
                new SpacetimeDB.ReducerContext(identity, address, random, time)
        );

        SpacetimeDB.Internal.Module.RegisterTable<global::TestAutoIncNotInteger>();
        SpacetimeDB.Internal.Module.RegisterTable<global::TestTableTaggedEnum>();
        SpacetimeDB.Internal.Module.RegisterTable<global::TestUniqueNotEquatable>();
    }

    // Exports only work from the main assembly, so we need to generate forwarding methods.
#if EXPERIMENTAL_WASM_AOT
    [UnmanagedCallersOnly(EntryPoint = "__describe_module__")]
    public static void __describe_module__(SpacetimeDB.Internal.BytesSink d) =>
        SpacetimeDB.Internal.Module.__describe_module__(d);

    [UnmanagedCallersOnly(EntryPoint = "__call_reducer__")]
    public static SpacetimeDB.Internal.Errno __call_reducer__(
        uint id,
        ulong sender_0,
        ulong sender_1,
        ulong sender_2,
        ulong sender_3,
        ulong address_0,
        ulong address_1,
        SpacetimeDB.Internal.DateTimeOffsetRepr timestamp,
        SpacetimeDB.Internal.BytesSource args,
        SpacetimeDB.Internal.BytesSink error
    ) =>
        SpacetimeDB.Internal.Module.__call_reducer__(
            id,
            sender_0,
            sender_1,
            sender_2,
            sender_3,
            address_0,
            address_1,
            timestamp,
            args,
            error
        );
#endif
}
