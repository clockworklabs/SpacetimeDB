//HintName: FFI.cs
// <auto-generated />
#nullable enable

using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SpacetimeDB
{
    public sealed record ReducerContext : DbContext<Local>, Internal.IReducerContext
    {
        public readonly Identity Sender;
        public readonly ConnectionId? ConnectionId;
        public readonly Random Rng;
        public readonly Timestamp Timestamp;

        // We need this property to be non-static for parity with client SDK.
        public Identity Identity => Internal.IReducerContext.GetIdentity();

        internal ReducerContext(
            Identity identity,
            ConnectionId? connectionId,
            Random random,
            Timestamp time
        )
        {
            Sender = identity;
            ConnectionId = connectionId;
            Rng = random;
            Timestamp = time;
        }
    }

    namespace Internal.TableHandles
    {
        public readonly struct TestAutoIncNotInteger
            : SpacetimeDB.Internal.ITableView<TestAutoIncNotInteger, global::TestAutoIncNotInteger>
        {
            static global::TestAutoIncNotInteger SpacetimeDB.Internal.ITableView<
                TestAutoIncNotInteger,
                global::TestAutoIncNotInteger
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestAutoIncNotInteger row)
            {
                if (row.AutoIncField == default)
                {
                    row.AutoIncField = global::TestAutoIncNotInteger.BSATN.AutoIncField.Read(
                        reader
                    );
                }
                if (row.IdentityField == default)
                {
                    row.IdentityField = global::TestAutoIncNotInteger.BSATN.IdentityField.Read(
                        reader
                    );
                }
                return row;
            }

            static SpacetimeDB.Internal.RawTableDefV9 SpacetimeDB.Internal.ITableView<
                TestAutoIncNotInteger,
                global::TestAutoIncNotInteger
            >.MakeTableDesc(SpacetimeDB.BSATN.ITypeRegistrar registrar) =>
                new(
                    Name: nameof(TestAutoIncNotInteger),
                    ProductTypeRef: (uint)
                        new global::TestAutoIncNotInteger.BSATN().GetAlgebraicType(registrar).Ref_,
                    PrimaryKey: [],
                    Indexes:
                    [
                        new(
                            Name: null,
                            AccessorName: "IdentityField",
                            Algorithm: new SpacetimeDB.Internal.RawIndexAlgorithm.BTree([1])
                        )
                    ],
                    Constraints:
                    [
                        SpacetimeDB.Internal.ITableView<
                            TestAutoIncNotInteger,
                            global::TestAutoIncNotInteger
                        >.MakeUniqueConstraint(1)
                    ],
                    Sequences:
                    [
                        SpacetimeDB.Internal.ITableView<
                            TestAutoIncNotInteger,
                            global::TestAutoIncNotInteger
                        >.MakeSequence(0),
                        SpacetimeDB.Internal.ITableView<
                            TestAutoIncNotInteger,
                            global::TestAutoIncNotInteger
                        >.MakeSequence(1)
                    ],
                    Schedule: null,
                    TableType: SpacetimeDB.Internal.TableType.User,
                    TableAccess: SpacetimeDB.Internal.TableAccess.Private
                );

            public ulong Count =>
                SpacetimeDB.Internal.ITableView<
                    TestAutoIncNotInteger,
                    global::TestAutoIncNotInteger
                >.DoCount();

            public IEnumerable<global::TestAutoIncNotInteger> Iter() =>
                SpacetimeDB.Internal.ITableView<
                    TestAutoIncNotInteger,
                    global::TestAutoIncNotInteger
                >.DoIter();

            public global::TestAutoIncNotInteger Insert(global::TestAutoIncNotInteger row) =>
                SpacetimeDB.Internal.ITableView<
                    TestAutoIncNotInteger,
                    global::TestAutoIncNotInteger
                >.DoInsert(row);

            public bool Delete(global::TestAutoIncNotInteger row) =>
                SpacetimeDB.Internal.ITableView<
                    TestAutoIncNotInteger,
                    global::TestAutoIncNotInteger
                >.DoDelete(row);

            public sealed class IdentityFieldUniqueIndex
                : UniqueIndex<
                    TestAutoIncNotInteger,
                    global::TestAutoIncNotInteger,
                    string,
                    SpacetimeDB.BSATN.String
                >
            {
                internal IdentityFieldUniqueIndex()
                    : base("TestAutoIncNotInteger_IdentityField_idx_btree") { }

                // Important: don't move this to the base class.
                // C# generics don't play well with nullable types and can't accept both struct-type-based and class-type-based
                // `globalName` in one generic definition, leading to buggy `Row?` expansion for either one or another.
                public global::TestAutoIncNotInteger? Find(string key) =>
                    DoFilter(key).Cast<global::TestAutoIncNotInteger?>().SingleOrDefault();

                public global::TestAutoIncNotInteger Update(global::TestAutoIncNotInteger row) =>
                    DoUpdate(row);
            }

            public IdentityFieldUniqueIndex IdentityField => new();
        }

        public readonly struct TestDuplicateTableName
            : SpacetimeDB.Internal.ITableView<
                TestDuplicateTableName,
                global::TestDuplicateTableName
            >
        {
            static global::TestDuplicateTableName SpacetimeDB.Internal.ITableView<
                TestDuplicateTableName,
                global::TestDuplicateTableName
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestDuplicateTableName row)
            {
                return row;
            }

            static SpacetimeDB.Internal.RawTableDefV9 SpacetimeDB.Internal.ITableView<
                TestDuplicateTableName,
                global::TestDuplicateTableName
            >.MakeTableDesc(SpacetimeDB.BSATN.ITypeRegistrar registrar) =>
                new(
                    Name: nameof(TestDuplicateTableName),
                    ProductTypeRef: (uint)
                        new global::TestDuplicateTableName.BSATN().GetAlgebraicType(registrar).Ref_,
                    PrimaryKey: [],
                    Indexes: [],
                    Constraints: [],
                    Sequences: [],
                    Schedule: null,
                    TableType: SpacetimeDB.Internal.TableType.User,
                    TableAccess: SpacetimeDB.Internal.TableAccess.Private
                );

            public ulong Count =>
                SpacetimeDB.Internal.ITableView<
                    TestDuplicateTableName,
                    global::TestDuplicateTableName
                >.DoCount();

            public IEnumerable<global::TestDuplicateTableName> Iter() =>
                SpacetimeDB.Internal.ITableView<
                    TestDuplicateTableName,
                    global::TestDuplicateTableName
                >.DoIter();

            public global::TestDuplicateTableName Insert(global::TestDuplicateTableName row) =>
                SpacetimeDB.Internal.ITableView<
                    TestDuplicateTableName,
                    global::TestDuplicateTableName
                >.DoInsert(row);

            public bool Delete(global::TestDuplicateTableName row) =>
                SpacetimeDB.Internal.ITableView<
                    TestDuplicateTableName,
                    global::TestDuplicateTableName
                >.DoDelete(row);
        }

        public readonly struct TestIndexIssues
            : SpacetimeDB.Internal.ITableView<TestIndexIssues, global::TestIndexIssues>
        {
            static global::TestIndexIssues SpacetimeDB.Internal.ITableView<
                TestIndexIssues,
                global::TestIndexIssues
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestIndexIssues row)
            {
                return row;
            }

            static SpacetimeDB.Internal.RawTableDefV9 SpacetimeDB.Internal.ITableView<
                TestIndexIssues,
                global::TestIndexIssues
            >.MakeTableDesc(SpacetimeDB.BSATN.ITypeRegistrar registrar) =>
                new(
                    Name: nameof(TestIndexIssues),
                    ProductTypeRef: (uint)
                        new global::TestIndexIssues.BSATN().GetAlgebraicType(registrar).Ref_,
                    PrimaryKey: [],
                    Indexes:
                    [
                        new(
                            Name: null,
                            AccessorName: "TestIndexWithoutColumns",
                            Algorithm: new SpacetimeDB.Internal.RawIndexAlgorithm.BTree([])
                        ),
                        new(
                            Name: null,
                            AccessorName: "TestIndexWithEmptyColumns",
                            Algorithm: new SpacetimeDB.Internal.RawIndexAlgorithm.BTree([])
                        ),
                        new(
                            Name: null,
                            AccessorName: "TestUnknownColumns",
                            Algorithm: new SpacetimeDB.Internal.RawIndexAlgorithm.BTree([])
                        ),
                        new(
                            Name: null,
                            AccessorName: "TestUnexpectedColumns",
                            Algorithm: new SpacetimeDB.Internal.RawIndexAlgorithm.BTree([0])
                        )
                    ],
                    Constraints: [],
                    Sequences: [],
                    Schedule: null,
                    TableType: SpacetimeDB.Internal.TableType.User,
                    TableAccess: SpacetimeDB.Internal.TableAccess.Private
                );

            public ulong Count =>
                SpacetimeDB.Internal.ITableView<TestIndexIssues, global::TestIndexIssues>.DoCount();

            public IEnumerable<global::TestIndexIssues> Iter() =>
                SpacetimeDB.Internal.ITableView<TestIndexIssues, global::TestIndexIssues>.DoIter();

            public global::TestIndexIssues Insert(global::TestIndexIssues row) =>
                SpacetimeDB.Internal.ITableView<TestIndexIssues, global::TestIndexIssues>.DoInsert(
                    row
                );

            public bool Delete(global::TestIndexIssues row) =>
                SpacetimeDB.Internal.ITableView<TestIndexIssues, global::TestIndexIssues>.DoDelete(
                    row
                );

            public sealed class TestIndexWithoutColumnsIndex()
                : SpacetimeDB.Internal.IndexBase<global::TestIndexIssues>(
                    "TestIndexIssues__idx_btree"
                ) { }

            public TestIndexWithoutColumnsIndex TestIndexWithoutColumns => new();

            public sealed class TestIndexWithEmptyColumnsIndex()
                : SpacetimeDB.Internal.IndexBase<global::TestIndexIssues>(
                    "TestIndexIssues__idx_btree"
                ) { }

            public TestIndexWithEmptyColumnsIndex TestIndexWithEmptyColumns => new();

            public sealed class TestUnknownColumnsIndex()
                : SpacetimeDB.Internal.IndexBase<global::TestIndexIssues>(
                    "TestIndexIssues__idx_btree"
                ) { }

            public TestUnknownColumnsIndex TestUnknownColumns => new();

            public sealed class TestUnexpectedColumnsIndex()
                : SpacetimeDB.Internal.IndexBase<global::TestIndexIssues>(
                    "TestIndexIssues_SelfIndexingColumn_idx_btree"
                )
            {
                public IEnumerable<global::TestIndexIssues> Filter(int SelfIndexingColumn) =>
                    DoFilter(
                        new SpacetimeDB.Internal.BTreeIndexBounds<int, SpacetimeDB.BSATN.I32>(
                            SelfIndexingColumn
                        )
                    );

                public ulong Delete(int SelfIndexingColumn) =>
                    DoDelete(
                        new SpacetimeDB.Internal.BTreeIndexBounds<int, SpacetimeDB.BSATN.I32>(
                            SelfIndexingColumn
                        )
                    );

                public IEnumerable<global::TestIndexIssues> Filter(Bound<int> SelfIndexingColumn) =>
                    DoFilter(
                        new SpacetimeDB.Internal.BTreeIndexBounds<int, SpacetimeDB.BSATN.I32>(
                            SelfIndexingColumn
                        )
                    );

                public ulong Delete(Bound<int> SelfIndexingColumn) =>
                    DoDelete(
                        new SpacetimeDB.Internal.BTreeIndexBounds<int, SpacetimeDB.BSATN.I32>(
                            SelfIndexingColumn
                        )
                    );
            }

            public TestUnexpectedColumnsIndex TestUnexpectedColumns => new();
        }

        public readonly struct TestScheduleWithMissingScheduleAtField
            : SpacetimeDB.Internal.ITableView<
                TestScheduleWithMissingScheduleAtField,
                global::TestScheduleIssues
            >
        {
            static global::TestScheduleIssues SpacetimeDB.Internal.ITableView<
                TestScheduleWithMissingScheduleAtField,
                global::TestScheduleIssues
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestScheduleIssues row)
            {
                return row;
            }

            static SpacetimeDB.Internal.RawTableDefV9 SpacetimeDB.Internal.ITableView<
                TestScheduleWithMissingScheduleAtField,
                global::TestScheduleIssues
            >.MakeTableDesc(SpacetimeDB.BSATN.ITypeRegistrar registrar) =>
                new(
                    Name: nameof(TestScheduleWithMissingScheduleAtField),
                    ProductTypeRef: (uint)
                        new global::TestScheduleIssues.BSATN().GetAlgebraicType(registrar).Ref_,
                    PrimaryKey: [],
                    Indexes: [],
                    Constraints: [],
                    Sequences: [],
                    Schedule: null,
                    TableType: SpacetimeDB.Internal.TableType.User,
                    TableAccess: SpacetimeDB.Internal.TableAccess.Private
                );

            public ulong Count =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithMissingScheduleAtField,
                    global::TestScheduleIssues
                >.DoCount();

            public IEnumerable<global::TestScheduleIssues> Iter() =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithMissingScheduleAtField,
                    global::TestScheduleIssues
                >.DoIter();

            public global::TestScheduleIssues Insert(global::TestScheduleIssues row) =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithMissingScheduleAtField,
                    global::TestScheduleIssues
                >.DoInsert(row);

            public bool Delete(global::TestScheduleIssues row) =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithMissingScheduleAtField,
                    global::TestScheduleIssues
                >.DoDelete(row);
        }

        public readonly struct TestScheduleWithoutPrimaryKey
            : SpacetimeDB.Internal.ITableView<
                TestScheduleWithoutPrimaryKey,
                global::TestScheduleIssues
            >
        {
            static global::TestScheduleIssues SpacetimeDB.Internal.ITableView<
                TestScheduleWithoutPrimaryKey,
                global::TestScheduleIssues
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestScheduleIssues row)
            {
                return row;
            }

            static SpacetimeDB.Internal.RawTableDefV9 SpacetimeDB.Internal.ITableView<
                TestScheduleWithoutPrimaryKey,
                global::TestScheduleIssues
            >.MakeTableDesc(SpacetimeDB.BSATN.ITypeRegistrar registrar) =>
                new(
                    Name: nameof(TestScheduleWithoutPrimaryKey),
                    ProductTypeRef: (uint)
                        new global::TestScheduleIssues.BSATN().GetAlgebraicType(registrar).Ref_,
                    PrimaryKey: [],
                    Indexes: [],
                    Constraints: [],
                    Sequences: [],
                    Schedule: SpacetimeDB.Internal.ITableView<
                        TestScheduleWithoutPrimaryKey,
                        global::TestScheduleIssues
                    >.MakeSchedule("DummyScheduledReducer", 3),
                    TableType: SpacetimeDB.Internal.TableType.User,
                    TableAccess: SpacetimeDB.Internal.TableAccess.Private
                );

            public ulong Count =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithoutPrimaryKey,
                    global::TestScheduleIssues
                >.DoCount();

            public IEnumerable<global::TestScheduleIssues> Iter() =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithoutPrimaryKey,
                    global::TestScheduleIssues
                >.DoIter();

            public global::TestScheduleIssues Insert(global::TestScheduleIssues row) =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithoutPrimaryKey,
                    global::TestScheduleIssues
                >.DoInsert(row);

            public bool Delete(global::TestScheduleIssues row) =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithoutPrimaryKey,
                    global::TestScheduleIssues
                >.DoDelete(row);
        }

        public readonly struct TestScheduleWithoutScheduleAt
            : SpacetimeDB.Internal.ITableView<
                TestScheduleWithoutScheduleAt,
                global::TestScheduleIssues
            >
        {
            static global::TestScheduleIssues SpacetimeDB.Internal.ITableView<
                TestScheduleWithoutScheduleAt,
                global::TestScheduleIssues
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestScheduleIssues row)
            {
                return row;
            }

            static SpacetimeDB.Internal.RawTableDefV9 SpacetimeDB.Internal.ITableView<
                TestScheduleWithoutScheduleAt,
                global::TestScheduleIssues
            >.MakeTableDesc(SpacetimeDB.BSATN.ITypeRegistrar registrar) =>
                new(
                    Name: nameof(TestScheduleWithoutScheduleAt),
                    ProductTypeRef: (uint)
                        new global::TestScheduleIssues.BSATN().GetAlgebraicType(registrar).Ref_,
                    PrimaryKey: [1],
                    Indexes:
                    [
                        new(
                            Name: null,
                            AccessorName: "IdCorrectType",
                            Algorithm: new SpacetimeDB.Internal.RawIndexAlgorithm.BTree([1])
                        )
                    ],
                    Constraints:
                    [
                        SpacetimeDB.Internal.ITableView<
                            TestScheduleWithoutScheduleAt,
                            global::TestScheduleIssues
                        >.MakeUniqueConstraint(1)
                    ],
                    Sequences: [],
                    Schedule: null,
                    TableType: SpacetimeDB.Internal.TableType.User,
                    TableAccess: SpacetimeDB.Internal.TableAccess.Private
                );

            public ulong Count =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithoutScheduleAt,
                    global::TestScheduleIssues
                >.DoCount();

            public IEnumerable<global::TestScheduleIssues> Iter() =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithoutScheduleAt,
                    global::TestScheduleIssues
                >.DoIter();

            public global::TestScheduleIssues Insert(global::TestScheduleIssues row) =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithoutScheduleAt,
                    global::TestScheduleIssues
                >.DoInsert(row);

            public bool Delete(global::TestScheduleIssues row) =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithoutScheduleAt,
                    global::TestScheduleIssues
                >.DoDelete(row);

            public sealed class IdCorrectTypeUniqueIndex
                : UniqueIndex<
                    TestScheduleWithoutScheduleAt,
                    global::TestScheduleIssues,
                    int,
                    SpacetimeDB.BSATN.I32
                >
            {
                internal IdCorrectTypeUniqueIndex()
                    : base("TestScheduleWithoutScheduleAt_IdCorrectType_idx_btree") { }

                // Important: don't move this to the base class.
                // C# generics don't play well with nullable types and can't accept both struct-type-based and class-type-based
                // `globalName` in one generic definition, leading to buggy `Row?` expansion for either one or another.
                public global::TestScheduleIssues? Find(int key) =>
                    DoFilter(key).Cast<global::TestScheduleIssues?>().SingleOrDefault();

                public global::TestScheduleIssues Update(global::TestScheduleIssues row) =>
                    DoUpdate(row);
            }

            public IdCorrectTypeUniqueIndex IdCorrectType => new();
        }

        public readonly struct TestScheduleWithWrongPrimaryKeyType
            : SpacetimeDB.Internal.ITableView<
                TestScheduleWithWrongPrimaryKeyType,
                global::TestScheduleIssues
            >
        {
            static global::TestScheduleIssues SpacetimeDB.Internal.ITableView<
                TestScheduleWithWrongPrimaryKeyType,
                global::TestScheduleIssues
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestScheduleIssues row)
            {
                return row;
            }

            static SpacetimeDB.Internal.RawTableDefV9 SpacetimeDB.Internal.ITableView<
                TestScheduleWithWrongPrimaryKeyType,
                global::TestScheduleIssues
            >.MakeTableDesc(SpacetimeDB.BSATN.ITypeRegistrar registrar) =>
                new(
                    Name: nameof(TestScheduleWithWrongPrimaryKeyType),
                    ProductTypeRef: (uint)
                        new global::TestScheduleIssues.BSATN().GetAlgebraicType(registrar).Ref_,
                    PrimaryKey: [0],
                    Indexes:
                    [
                        new(
                            Name: null,
                            AccessorName: "IdWrongType",
                            Algorithm: new SpacetimeDB.Internal.RawIndexAlgorithm.BTree([0])
                        )
                    ],
                    Constraints:
                    [
                        SpacetimeDB.Internal.ITableView<
                            TestScheduleWithWrongPrimaryKeyType,
                            global::TestScheduleIssues
                        >.MakeUniqueConstraint(0)
                    ],
                    Sequences: [],
                    Schedule: SpacetimeDB.Internal.ITableView<
                        TestScheduleWithWrongPrimaryKeyType,
                        global::TestScheduleIssues
                    >.MakeSchedule("DummyScheduledReducer", 3),
                    TableType: SpacetimeDB.Internal.TableType.User,
                    TableAccess: SpacetimeDB.Internal.TableAccess.Private
                );

            public ulong Count =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithWrongPrimaryKeyType,
                    global::TestScheduleIssues
                >.DoCount();

            public IEnumerable<global::TestScheduleIssues> Iter() =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithWrongPrimaryKeyType,
                    global::TestScheduleIssues
                >.DoIter();

            public global::TestScheduleIssues Insert(global::TestScheduleIssues row) =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithWrongPrimaryKeyType,
                    global::TestScheduleIssues
                >.DoInsert(row);

            public bool Delete(global::TestScheduleIssues row) =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithWrongPrimaryKeyType,
                    global::TestScheduleIssues
                >.DoDelete(row);

            public sealed class IdWrongTypeUniqueIndex
                : UniqueIndex<
                    TestScheduleWithWrongPrimaryKeyType,
                    global::TestScheduleIssues,
                    string,
                    SpacetimeDB.BSATN.String
                >
            {
                internal IdWrongTypeUniqueIndex()
                    : base("TestScheduleWithWrongPrimaryKeyType_IdWrongType_idx_btree") { }

                // Important: don't move this to the base class.
                // C# generics don't play well with nullable types and can't accept both struct-type-based and class-type-based
                // `globalName` in one generic definition, leading to buggy `Row?` expansion for either one or another.
                public global::TestScheduleIssues? Find(string key) =>
                    DoFilter(key).Cast<global::TestScheduleIssues?>().SingleOrDefault();

                public global::TestScheduleIssues Update(global::TestScheduleIssues row) =>
                    DoUpdate(row);
            }

            public IdWrongTypeUniqueIndex IdWrongType => new();
        }

        public readonly struct TestScheduleWithWrongScheduleAtType
            : SpacetimeDB.Internal.ITableView<
                TestScheduleWithWrongScheduleAtType,
                global::TestScheduleIssues
            >
        {
            static global::TestScheduleIssues SpacetimeDB.Internal.ITableView<
                TestScheduleWithWrongScheduleAtType,
                global::TestScheduleIssues
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestScheduleIssues row)
            {
                return row;
            }

            static SpacetimeDB.Internal.RawTableDefV9 SpacetimeDB.Internal.ITableView<
                TestScheduleWithWrongScheduleAtType,
                global::TestScheduleIssues
            >.MakeTableDesc(SpacetimeDB.BSATN.ITypeRegistrar registrar) =>
                new(
                    Name: nameof(TestScheduleWithWrongScheduleAtType),
                    ProductTypeRef: (uint)
                        new global::TestScheduleIssues.BSATN().GetAlgebraicType(registrar).Ref_,
                    PrimaryKey: [1],
                    Indexes:
                    [
                        new(
                            Name: null,
                            AccessorName: "IdCorrectType",
                            Algorithm: new SpacetimeDB.Internal.RawIndexAlgorithm.BTree([1])
                        )
                    ],
                    Constraints:
                    [
                        SpacetimeDB.Internal.ITableView<
                            TestScheduleWithWrongScheduleAtType,
                            global::TestScheduleIssues
                        >.MakeUniqueConstraint(1)
                    ],
                    Sequences: [],
                    Schedule: SpacetimeDB.Internal.ITableView<
                        TestScheduleWithWrongScheduleAtType,
                        global::TestScheduleIssues
                    >.MakeSchedule("DummyScheduledReducer", 2),
                    TableType: SpacetimeDB.Internal.TableType.User,
                    TableAccess: SpacetimeDB.Internal.TableAccess.Private
                );

            public ulong Count =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithWrongScheduleAtType,
                    global::TestScheduleIssues
                >.DoCount();

            public IEnumerable<global::TestScheduleIssues> Iter() =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithWrongScheduleAtType,
                    global::TestScheduleIssues
                >.DoIter();

            public global::TestScheduleIssues Insert(global::TestScheduleIssues row) =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithWrongScheduleAtType,
                    global::TestScheduleIssues
                >.DoInsert(row);

            public bool Delete(global::TestScheduleIssues row) =>
                SpacetimeDB.Internal.ITableView<
                    TestScheduleWithWrongScheduleAtType,
                    global::TestScheduleIssues
                >.DoDelete(row);

            public sealed class IdCorrectTypeUniqueIndex
                : UniqueIndex<
                    TestScheduleWithWrongScheduleAtType,
                    global::TestScheduleIssues,
                    int,
                    SpacetimeDB.BSATN.I32
                >
            {
                internal IdCorrectTypeUniqueIndex()
                    : base("TestScheduleWithWrongScheduleAtType_IdCorrectType_idx_btree") { }

                // Important: don't move this to the base class.
                // C# generics don't play well with nullable types and can't accept both struct-type-based and class-type-based
                // `globalName` in one generic definition, leading to buggy `Row?` expansion for either one or another.
                public global::TestScheduleIssues? Find(int key) =>
                    DoFilter(key).Cast<global::TestScheduleIssues?>().SingleOrDefault();

                public global::TestScheduleIssues Update(global::TestScheduleIssues row) =>
                    DoUpdate(row);
            }

            public IdCorrectTypeUniqueIndex IdCorrectType => new();
        }

        public readonly struct TestUniqueNotEquatable
            : SpacetimeDB.Internal.ITableView<
                TestUniqueNotEquatable,
                global::TestUniqueNotEquatable
            >
        {
            static global::TestUniqueNotEquatable SpacetimeDB.Internal.ITableView<
                TestUniqueNotEquatable,
                global::TestUniqueNotEquatable
            >.ReadGenFields(System.IO.BinaryReader reader, global::TestUniqueNotEquatable row)
            {
                return row;
            }

            static SpacetimeDB.Internal.RawTableDefV9 SpacetimeDB.Internal.ITableView<
                TestUniqueNotEquatable,
                global::TestUniqueNotEquatable
            >.MakeTableDesc(SpacetimeDB.BSATN.ITypeRegistrar registrar) =>
                new(
                    Name: nameof(TestUniqueNotEquatable),
                    ProductTypeRef: (uint)
                        new global::TestUniqueNotEquatable.BSATN().GetAlgebraicType(registrar).Ref_,
                    PrimaryKey: [1],
                    Indexes:
                    [
                        new(
                            Name: null,
                            AccessorName: "UniqueField",
                            Algorithm: new SpacetimeDB.Internal.RawIndexAlgorithm.BTree([0])
                        ),
                        new(
                            Name: null,
                            AccessorName: "PrimaryKeyField",
                            Algorithm: new SpacetimeDB.Internal.RawIndexAlgorithm.BTree([1])
                        )
                    ],
                    Constraints:
                    [
                        SpacetimeDB.Internal.ITableView<
                            TestUniqueNotEquatable,
                            global::TestUniqueNotEquatable
                        >.MakeUniqueConstraint(0),
                        SpacetimeDB.Internal.ITableView<
                            TestUniqueNotEquatable,
                            global::TestUniqueNotEquatable
                        >.MakeUniqueConstraint(1)
                    ],
                    Sequences: [],
                    Schedule: null,
                    TableType: SpacetimeDB.Internal.TableType.User,
                    TableAccess: SpacetimeDB.Internal.TableAccess.Private
                );

            public ulong Count =>
                SpacetimeDB.Internal.ITableView<
                    TestUniqueNotEquatable,
                    global::TestUniqueNotEquatable
                >.DoCount();

            public IEnumerable<global::TestUniqueNotEquatable> Iter() =>
                SpacetimeDB.Internal.ITableView<
                    TestUniqueNotEquatable,
                    global::TestUniqueNotEquatable
                >.DoIter();

            public global::TestUniqueNotEquatable Insert(global::TestUniqueNotEquatable row) =>
                SpacetimeDB.Internal.ITableView<
                    TestUniqueNotEquatable,
                    global::TestUniqueNotEquatable
                >.DoInsert(row);

            public bool Delete(global::TestUniqueNotEquatable row) =>
                SpacetimeDB.Internal.ITableView<
                    TestUniqueNotEquatable,
                    global::TestUniqueNotEquatable
                >.DoDelete(row);
        }
    }

    public sealed class Local
    {
        public Internal.TableHandles.TestAutoIncNotInteger TestAutoIncNotInteger => new();
        public Internal.TableHandles.TestDuplicateTableName TestDuplicateTableName => new();
        public Internal.TableHandles.TestIndexIssues TestIndexIssues => new();
        public Internal.TableHandles.TestScheduleWithMissingScheduleAtField TestScheduleWithMissingScheduleAtField =>
            new();
        public Internal.TableHandles.TestScheduleWithoutPrimaryKey TestScheduleWithoutPrimaryKey =>
            new();
        public Internal.TableHandles.TestScheduleWithoutScheduleAt TestScheduleWithoutScheduleAt =>
            new();
        public Internal.TableHandles.TestScheduleWithWrongPrimaryKeyType TestScheduleWithWrongPrimaryKeyType =>
            new();
        public Internal.TableHandles.TestScheduleWithWrongScheduleAtType TestScheduleWithWrongScheduleAtType =>
            new();
        public Internal.TableHandles.TestUniqueNotEquatable TestUniqueNotEquatable => new();
    }
}

static class ModuleRegistration
{
    class __ReducerWithReservedPrefix : SpacetimeDB.Internal.IReducer
    {
        public SpacetimeDB.Internal.RawReducerDefV9 MakeReducerDef(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => new(nameof(__ReducerWithReservedPrefix), [], null);

        public void Invoke(BinaryReader reader, SpacetimeDB.Internal.IReducerContext ctx)
        {
            Reducers.__ReducerWithReservedPrefix((SpacetimeDB.ReducerContext)ctx);
        }
    }

    class DummyScheduledReducer : SpacetimeDB.Internal.IReducer
    {
        private static readonly TestScheduleIssues.BSATN table = new();

        public SpacetimeDB.Internal.RawReducerDefV9 MakeReducerDef(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            new(
                nameof(DummyScheduledReducer),
                [new(nameof(table), table.GetAlgebraicType(registrar))],
                null
            );

        public void Invoke(BinaryReader reader, SpacetimeDB.Internal.IReducerContext ctx)
        {
            TestScheduleIssues.DummyScheduledReducer(
                (SpacetimeDB.ReducerContext)ctx,
                table.Read(reader)
            );
        }
    }

    class OnReducerWithReservedPrefix : SpacetimeDB.Internal.IReducer
    {
        public SpacetimeDB.Internal.RawReducerDefV9 MakeReducerDef(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => new(nameof(OnReducerWithReservedPrefix), [], null);

        public void Invoke(BinaryReader reader, SpacetimeDB.Internal.IReducerContext ctx)
        {
            Reducers.OnReducerWithReservedPrefix((SpacetimeDB.ReducerContext)ctx);
        }
    }

    class TestDuplicateReducerKind1 : SpacetimeDB.Internal.IReducer
    {
        public SpacetimeDB.Internal.RawReducerDefV9 MakeReducerDef(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => new(nameof(TestDuplicateReducerKind1), [], SpacetimeDB.Internal.Lifecycle.Init);

        public void Invoke(BinaryReader reader, SpacetimeDB.Internal.IReducerContext ctx)
        {
            Reducers.TestDuplicateReducerKind1((SpacetimeDB.ReducerContext)ctx);
        }
    }

    class TestDuplicateReducerKind2 : SpacetimeDB.Internal.IReducer
    {
        public SpacetimeDB.Internal.RawReducerDefV9 MakeReducerDef(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => new(nameof(TestDuplicateReducerKind2), [], SpacetimeDB.Internal.Lifecycle.Init);

        public void Invoke(BinaryReader reader, SpacetimeDB.Internal.IReducerContext ctx)
        {
            Reducers.TestDuplicateReducerKind2((SpacetimeDB.ReducerContext)ctx);
        }
    }

    class TestDuplicateReducerName : SpacetimeDB.Internal.IReducer
    {
        public SpacetimeDB.Internal.RawReducerDefV9 MakeReducerDef(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => new(nameof(TestDuplicateReducerName), [], null);

        public void Invoke(BinaryReader reader, SpacetimeDB.Internal.IReducerContext ctx)
        {
            Reducers.TestDuplicateReducerName((SpacetimeDB.ReducerContext)ctx);
        }
    }

    class TestReducerReturnType : SpacetimeDB.Internal.IReducer
    {
        public SpacetimeDB.Internal.RawReducerDefV9 MakeReducerDef(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => new(nameof(TestReducerReturnType), [], null);

        public void Invoke(BinaryReader reader, SpacetimeDB.Internal.IReducerContext ctx)
        {
            Reducers.TestReducerReturnType((SpacetimeDB.ReducerContext)ctx);
        }
    }

    class TestReducerWithoutContext : SpacetimeDB.Internal.IReducer
    {
        public SpacetimeDB.Internal.RawReducerDefV9 MakeReducerDef(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => new(nameof(TestReducerWithoutContext), [], null);

        public void Invoke(BinaryReader reader, SpacetimeDB.Internal.IReducerContext ctx)
        {
            throw new System.InvalidOperationException();
        }
    }

#if EXPERIMENTAL_WASM_AOT
    // In AOT mode we're building a library.
    // Main method won't be called automatically, so we need to export it as a preinit function.
    [UnmanagedCallersOnly(EntryPoint = "__preinit__10_init_csharp")]
#else
    // Prevent trimming of FFI exports that are invoked from C and not visible to C# trimmer.
    [DynamicDependency(
        DynamicallyAccessedMemberTypes.PublicMethods,
        typeof(SpacetimeDB.Internal.Module)
    )]
#endif
    public static void Main()
    {
        SpacetimeDB.Internal.Module.SetReducerContextConstructor(
            (identity, connectionId, random, time) =>
                new SpacetimeDB.ReducerContext(identity, connectionId, random, time)
        );

        SpacetimeDB.Internal.Module.RegisterReducer<__ReducerWithReservedPrefix>();
        SpacetimeDB.Internal.Module.RegisterReducer<DummyScheduledReducer>();
        SpacetimeDB.Internal.Module.RegisterReducer<OnReducerWithReservedPrefix>();
        SpacetimeDB.Internal.Module.RegisterReducer<TestDuplicateReducerKind1>();
        SpacetimeDB.Internal.Module.RegisterReducer<TestDuplicateReducerKind2>();
        SpacetimeDB.Internal.Module.RegisterReducer<TestDuplicateReducerName>();
        SpacetimeDB.Internal.Module.RegisterReducer<TestReducerReturnType>();
        SpacetimeDB.Internal.Module.RegisterReducer<TestReducerWithoutContext>();
        SpacetimeDB.Internal.Module.RegisterTable<
            global::TestAutoIncNotInteger,
            SpacetimeDB.Internal.TableHandles.TestAutoIncNotInteger
        >();
        SpacetimeDB.Internal.Module.RegisterTable<
            global::TestDuplicateTableName,
            SpacetimeDB.Internal.TableHandles.TestDuplicateTableName
        >();
        SpacetimeDB.Internal.Module.RegisterTable<
            global::TestIndexIssues,
            SpacetimeDB.Internal.TableHandles.TestIndexIssues
        >();
        SpacetimeDB.Internal.Module.RegisterTable<
            global::TestScheduleIssues,
            SpacetimeDB.Internal.TableHandles.TestScheduleWithMissingScheduleAtField
        >();
        SpacetimeDB.Internal.Module.RegisterTable<
            global::TestScheduleIssues,
            SpacetimeDB.Internal.TableHandles.TestScheduleWithoutPrimaryKey
        >();
        SpacetimeDB.Internal.Module.RegisterTable<
            global::TestScheduleIssues,
            SpacetimeDB.Internal.TableHandles.TestScheduleWithoutScheduleAt
        >();
        SpacetimeDB.Internal.Module.RegisterTable<
            global::TestScheduleIssues,
            SpacetimeDB.Internal.TableHandles.TestScheduleWithWrongPrimaryKeyType
        >();
        SpacetimeDB.Internal.Module.RegisterTable<
            global::TestScheduleIssues,
            SpacetimeDB.Internal.TableHandles.TestScheduleWithWrongScheduleAtType
        >();
        SpacetimeDB.Internal.Module.RegisterTable<
            global::TestUniqueNotEquatable,
            SpacetimeDB.Internal.TableHandles.TestUniqueNotEquatable
        >();
        SpacetimeDB.Internal.Module.RegisterClientVisibilityFilter(global::Module.MY_FILTER);
        SpacetimeDB.Internal.Module.RegisterClientVisibilityFilter(global::Module.MY_SECOND_FILTER);
        SpacetimeDB.Internal.Module.RegisterClientVisibilityFilter(global::Module.MY_THIRD_FILTER);
    }

    // Exports only work from the main assembly, so we need to generate forwarding methods.
#if EXPERIMENTAL_WASM_AOT
    [UnmanagedCallersOnly(EntryPoint = "__describe_module__")]
    public static void __describe_module__(SpacetimeDB.Internal.BytesSink d) =>
        SpacetimeDB.Internal.Module.__describe_module__(d);

    [UnmanagedCallersOnly(EntryPoint = "__call_reducer__")]
    public static SpacetimeDB.Internal.Errno __call_reducer__(
        uint id,
        ulong sender_0,
        ulong sender_1,
        ulong sender_2,
        ulong sender_3,
        ulong conn_id_0,
        ulong conn_id_1,
        SpacetimeDB.Timestamp timestamp,
        SpacetimeDB.Internal.BytesSource args,
        SpacetimeDB.Internal.BytesSink error
    ) =>
        SpacetimeDB.Internal.Module.__call_reducer__(
            id,
            sender_0,
            sender_1,
            sender_2,
            sender_3,
            conn_id_0,
            conn_id_1,
            timestamp,
            args,
            error
        );
#endif
}
