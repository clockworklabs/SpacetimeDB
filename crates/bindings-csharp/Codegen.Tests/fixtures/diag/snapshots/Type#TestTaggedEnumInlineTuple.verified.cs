//HintName: TestTaggedEnumInlineTuple.cs
// <auto-generated />
#nullable enable

partial record TestTaggedEnumInlineTuple : System.IEquatable<TestTaggedEnumInlineTuple>
{
    public sealed record Item1(int Item1_) : TestTaggedEnumInlineTuple
    {
        public override string ToString() =>
            $"Item1({SpacetimeDB.BSATN.StringUtil.GenericToString(Item1_)})";
    }

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<TestTaggedEnumInlineTuple>
    {
        internal static readonly SpacetimeDB.BSATN.I32 Item1 = new();

        public TestTaggedEnumInlineTuple Read(System.IO.BinaryReader reader)
        {
            return reader.ReadByte() switch
            {
                0 => new Item1(Item1.Read(reader)),
                _
                    => throw new System.InvalidOperationException(
                        "Invalid tag value, this state should be unreachable."
                    )
            };
        }

        public void Write(System.IO.BinaryWriter writer, TestTaggedEnumInlineTuple value)
        {
            switch (value)
            {
                case Item1(var inner):
                    writer.Write((byte)0);
                    Item1.Write(writer, inner);
                    break;
            }
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<TestTaggedEnumInlineTuple>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Sum(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new(nameof(Item1), Item1.GetAlgebraicType(registrar))
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<TestTaggedEnumInlineTuple>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        switch (this)
        {
            case Item1(var inner):
                var ___hashItem1 = inner.GetHashCode();
                return ___hashItem1;
            default:
                return 0;
        }
    }
} // TestTaggedEnumInlineTuple
