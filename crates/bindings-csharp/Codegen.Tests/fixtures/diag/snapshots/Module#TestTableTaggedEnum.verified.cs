//HintName: TestTableTaggedEnum.cs
// <auto-generated />
#nullable enable

partial record TestTableTaggedEnum : System.IEquatable<TestTableTaggedEnum>
{
    public sealed record X(int X_) : TestTableTaggedEnum
    {
        public override string ToString() =>
            $"X({SpacetimeDB.BSATN.StringUtil.GenericToString(X_)})";
    }

    public sealed record Y(int Y_) : TestTableTaggedEnum
    {
        public override string ToString() =>
            $"Y({SpacetimeDB.BSATN.StringUtil.GenericToString(Y_)})";
    }

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<TestTableTaggedEnum>
    {
        internal static readonly SpacetimeDB.BSATN.I32 XRW = new();
        internal static readonly SpacetimeDB.BSATN.I32 YRW = new();

        public TestTableTaggedEnum Read(System.IO.BinaryReader reader)
        {
            return reader.ReadByte() switch
            {
                0 => new X(XRW.Read(reader)),
                1 => new Y(YRW.Read(reader)),
                _
                    => throw new System.InvalidOperationException(
                        "Invalid tag value, this state should be unreachable."
                    )
            };
        }

        public void Write(System.IO.BinaryWriter writer, TestTableTaggedEnum value)
        {
            switch (value)
            {
                case X(var inner):
                    writer.Write((byte)0);
                    XRW.Write(writer, inner);
                    break;
                case Y(var inner):
                    writer.Write((byte)1);
                    YRW.Write(writer, inner);
                    break;
            }
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<TestTableTaggedEnum>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Sum(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new("X", XRW.GetAlgebraicType(registrar)),
                        new("Y", YRW.GetAlgebraicType(registrar))
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<TestTableTaggedEnum>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        switch (this)
        {
            case X(var inner):
                var ___hashX = inner.GetHashCode();
                return ___hashX;
            case Y(var inner):
                var ___hashY = inner.GetHashCode();
                return ___hashY;
            default:
                return 0;
        }
    }
} // TestTableTaggedEnum
