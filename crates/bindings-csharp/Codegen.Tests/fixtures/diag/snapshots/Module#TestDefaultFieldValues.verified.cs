//HintName: TestDefaultFieldValues.cs
// <auto-generated />
#nullable enable

partial struct TestDefaultFieldValues
    : System.IEquatable<TestDefaultFieldValues>,
        SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        UniqueField = BSATN.UniqueFieldRW.Read(reader);
        DefaultString = BSATN.DefaultStringRW.Read(reader);
        DefaultBool = BSATN.DefaultBoolRW.Read(reader);
        DefaultI8 = BSATN.DefaultI8RW.Read(reader);
        DefaultU8 = BSATN.DefaultU8RW.Read(reader);
        DefaultI16 = BSATN.DefaultI16RW.Read(reader);
        DefaultU16 = BSATN.DefaultU16RW.Read(reader);
        DefaultI32 = BSATN.DefaultI32RW.Read(reader);
        DefaultU32 = BSATN.DefaultU32RW.Read(reader);
        DefaultI64 = BSATN.DefaultI64RW.Read(reader);
        DefaultU64 = BSATN.DefaultU64RW.Read(reader);
        DefaultHex = BSATN.DefaultHexRW.Read(reader);
        DefaultBin = BSATN.DefaultBinRW.Read(reader);
        DefaultF32 = BSATN.DefaultF32RW.Read(reader);
        DefaultF64 = BSATN.DefaultF64RW.Read(reader);
        DefaultEnum = BSATN.DefaultEnumRW.Read(reader);
        DefaultNull = BSATN.DefaultNullRW.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.UniqueFieldRW.Write(writer, UniqueField);
        BSATN.DefaultStringRW.Write(writer, DefaultString);
        BSATN.DefaultBoolRW.Write(writer, DefaultBool);
        BSATN.DefaultI8RW.Write(writer, DefaultI8);
        BSATN.DefaultU8RW.Write(writer, DefaultU8);
        BSATN.DefaultI16RW.Write(writer, DefaultI16);
        BSATN.DefaultU16RW.Write(writer, DefaultU16);
        BSATN.DefaultI32RW.Write(writer, DefaultI32);
        BSATN.DefaultU32RW.Write(writer, DefaultU32);
        BSATN.DefaultI64RW.Write(writer, DefaultI64);
        BSATN.DefaultU64RW.Write(writer, DefaultU64);
        BSATN.DefaultHexRW.Write(writer, DefaultHex);
        BSATN.DefaultBinRW.Write(writer, DefaultBin);
        BSATN.DefaultF32RW.Write(writer, DefaultF32);
        BSATN.DefaultF64RW.Write(writer, DefaultF64);
        BSATN.DefaultEnumRW.Write(writer, DefaultEnum);
        BSATN.DefaultNullRW.Write(writer, DefaultNull);
    }

    object SpacetimeDB.BSATN.IStructuralReadWrite.GetSerializer()
    {
        return new BSATN();
    }

    public override string ToString() =>
        $"TestDefaultFieldValues {{ UniqueField = {SpacetimeDB.BSATN.StringUtil.GenericToString(UniqueField)}, DefaultString = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultString)}, DefaultBool = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultBool)}, DefaultI8 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultI8)}, DefaultU8 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultU8)}, DefaultI16 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultI16)}, DefaultU16 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultU16)}, DefaultI32 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultI32)}, DefaultU32 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultU32)}, DefaultI64 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultI64)}, DefaultU64 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultU64)}, DefaultHex = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultHex)}, DefaultBin = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultBin)}, DefaultF32 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultF32)}, DefaultF64 = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultF64)}, DefaultEnum = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultEnum)}, DefaultNull = {SpacetimeDB.BSATN.StringUtil.GenericToString(DefaultNull)} }}";

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<TestDefaultFieldValues>
    {
        internal static readonly SpacetimeDB.BSATN.ValueOption<
            int,
            SpacetimeDB.BSATN.I32
        > UniqueFieldRW = new();
        internal static readonly SpacetimeDB.BSATN.String DefaultStringRW = new();
        internal static readonly SpacetimeDB.BSATN.Bool DefaultBoolRW = new();
        internal static readonly SpacetimeDB.BSATN.I8 DefaultI8RW = new();
        internal static readonly SpacetimeDB.BSATN.U8 DefaultU8RW = new();
        internal static readonly SpacetimeDB.BSATN.I16 DefaultI16RW = new();
        internal static readonly SpacetimeDB.BSATN.U16 DefaultU16RW = new();
        internal static readonly SpacetimeDB.BSATN.I32 DefaultI32RW = new();
        internal static readonly SpacetimeDB.BSATN.U32 DefaultU32RW = new();
        internal static readonly SpacetimeDB.BSATN.I64 DefaultI64RW = new();
        internal static readonly SpacetimeDB.BSATN.U64 DefaultU64RW = new();
        internal static readonly SpacetimeDB.BSATN.I32 DefaultHexRW = new();
        internal static readonly SpacetimeDB.BSATN.I32 DefaultBinRW = new();
        internal static readonly SpacetimeDB.BSATN.F32 DefaultF32RW = new();
        internal static readonly SpacetimeDB.BSATN.F64 DefaultF64RW = new();
        internal static readonly SpacetimeDB.BSATN.Enum<MyEnum> DefaultEnumRW = new();
        internal static readonly SpacetimeDB.BSATN.ValueOption<
            MyStruct,
            MyStruct.BSATN
        > DefaultNullRW = new();

        public TestDefaultFieldValues Read(System.IO.BinaryReader reader)
        {
            var ___result = new TestDefaultFieldValues();
            ___result.ReadFields(reader);
            return ___result;
        }

        public void Write(System.IO.BinaryWriter writer, TestDefaultFieldValues value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<TestDefaultFieldValues>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new("UniqueField", UniqueFieldRW.GetAlgebraicType(registrar)),
                        new("DefaultString", DefaultStringRW.GetAlgebraicType(registrar)),
                        new("DefaultBool", DefaultBoolRW.GetAlgebraicType(registrar)),
                        new("DefaultI8", DefaultI8RW.GetAlgebraicType(registrar)),
                        new("DefaultU8", DefaultU8RW.GetAlgebraicType(registrar)),
                        new("DefaultI16", DefaultI16RW.GetAlgebraicType(registrar)),
                        new("DefaultU16", DefaultU16RW.GetAlgebraicType(registrar)),
                        new("DefaultI32", DefaultI32RW.GetAlgebraicType(registrar)),
                        new("DefaultU32", DefaultU32RW.GetAlgebraicType(registrar)),
                        new("DefaultI64", DefaultI64RW.GetAlgebraicType(registrar)),
                        new("DefaultU64", DefaultU64RW.GetAlgebraicType(registrar)),
                        new("DefaultHex", DefaultHexRW.GetAlgebraicType(registrar)),
                        new("DefaultBin", DefaultBinRW.GetAlgebraicType(registrar)),
                        new("DefaultF32", DefaultF32RW.GetAlgebraicType(registrar)),
                        new("DefaultF64", DefaultF64RW.GetAlgebraicType(registrar)),
                        new("DefaultEnum", DefaultEnumRW.GetAlgebraicType(registrar)),
                        new("DefaultNull", DefaultNullRW.GetAlgebraicType(registrar))
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<TestDefaultFieldValues>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        var ___hashUniqueField = UniqueField.GetHashCode();
        var ___hashDefaultString = DefaultString == null ? 0 : DefaultString.GetHashCode();
        var ___hashDefaultBool = DefaultBool.GetHashCode();
        var ___hashDefaultI8 = DefaultI8.GetHashCode();
        var ___hashDefaultU8 = DefaultU8.GetHashCode();
        var ___hashDefaultI16 = DefaultI16.GetHashCode();
        var ___hashDefaultU16 = DefaultU16.GetHashCode();
        var ___hashDefaultI32 = DefaultI32.GetHashCode();
        var ___hashDefaultU32 = DefaultU32.GetHashCode();
        var ___hashDefaultI64 = DefaultI64.GetHashCode();
        var ___hashDefaultU64 = DefaultU64.GetHashCode();
        var ___hashDefaultHex = DefaultHex.GetHashCode();
        var ___hashDefaultBin = DefaultBin.GetHashCode();
        var ___hashDefaultF32 = DefaultF32.GetHashCode();
        var ___hashDefaultF64 = DefaultF64.GetHashCode();
        var ___hashDefaultEnum = DefaultEnum.GetHashCode();
        var ___hashDefaultNull = DefaultNull.GetHashCode();
        return ___hashUniqueField
            ^ ___hashDefaultString
            ^ ___hashDefaultBool
            ^ ___hashDefaultI8
            ^ ___hashDefaultU8
            ^ ___hashDefaultI16
            ^ ___hashDefaultU16
            ^ ___hashDefaultI32
            ^ ___hashDefaultU32
            ^ ___hashDefaultI64
            ^ ___hashDefaultU64
            ^ ___hashDefaultHex
            ^ ___hashDefaultBin
            ^ ___hashDefaultF32
            ^ ___hashDefaultF64
            ^ ___hashDefaultEnum
            ^ ___hashDefaultNull;
    }

#nullable enable
    public bool Equals(TestDefaultFieldValues that)
    {
        var ___eqUniqueField = this.UniqueField.Equals(that.UniqueField);
        var ___eqDefaultString =
            this.DefaultString == null
                ? that.DefaultString == null
                : this.DefaultString.Equals(that.DefaultString);
        var ___eqDefaultBool = this.DefaultBool.Equals(that.DefaultBool);
        var ___eqDefaultI8 = this.DefaultI8.Equals(that.DefaultI8);
        var ___eqDefaultU8 = this.DefaultU8.Equals(that.DefaultU8);
        var ___eqDefaultI16 = this.DefaultI16.Equals(that.DefaultI16);
        var ___eqDefaultU16 = this.DefaultU16.Equals(that.DefaultU16);
        var ___eqDefaultI32 = this.DefaultI32.Equals(that.DefaultI32);
        var ___eqDefaultU32 = this.DefaultU32.Equals(that.DefaultU32);
        var ___eqDefaultI64 = this.DefaultI64.Equals(that.DefaultI64);
        var ___eqDefaultU64 = this.DefaultU64.Equals(that.DefaultU64);
        var ___eqDefaultHex = this.DefaultHex.Equals(that.DefaultHex);
        var ___eqDefaultBin = this.DefaultBin.Equals(that.DefaultBin);
        var ___eqDefaultF32 = this.DefaultF32.Equals(that.DefaultF32);
        var ___eqDefaultF64 = this.DefaultF64.Equals(that.DefaultF64);
        var ___eqDefaultEnum = this.DefaultEnum == that.DefaultEnum;
        var ___eqDefaultNull = this.DefaultNull.Equals(that.DefaultNull);
        return ___eqUniqueField
            && ___eqDefaultString
            && ___eqDefaultBool
            && ___eqDefaultI8
            && ___eqDefaultU8
            && ___eqDefaultI16
            && ___eqDefaultU16
            && ___eqDefaultI32
            && ___eqDefaultU32
            && ___eqDefaultI64
            && ___eqDefaultU64
            && ___eqDefaultHex
            && ___eqDefaultBin
            && ___eqDefaultF32
            && ___eqDefaultF64
            && ___eqDefaultEnum
            && ___eqDefaultNull;
    }

    public override bool Equals(object? that)
    {
        if (that == null)
        {
            return false;
        }
        var that_ = that as TestDefaultFieldValues?;
        if (((object?)that_) == null)
        {
            return false;
        }
        return Equals(that_);
    }

    public static bool operator ==(TestDefaultFieldValues this_, TestDefaultFieldValues that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return object.Equals(this_, that);
        }
        return this_.Equals(that);
    }

    public static bool operator !=(TestDefaultFieldValues this_, TestDefaultFieldValues that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return !object.Equals(this_, that);
        }
        return !this_.Equals(that);
    }
#nullable restore
} // TestDefaultFieldValues
