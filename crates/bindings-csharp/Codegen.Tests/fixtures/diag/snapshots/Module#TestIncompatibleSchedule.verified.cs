//HintName: TestIncompatibleSchedule.cs
// <auto-generated />
#nullable enable

[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
partial struct TestIncompatibleSchedule : SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        ScheduledId = BSATN.ScheduledId.Read(reader);
        ScheduledAt = BSATN.ScheduledAt.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.ScheduledId.Write(writer, ScheduledId);
        BSATN.ScheduledAt.Write(writer, ScheduledAt);
    }

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<TestIncompatibleSchedule>
    {
        internal static readonly SpacetimeDB.BSATN.U64 ScheduledId = new();
        internal static readonly SpacetimeDB.ScheduleAt.BSATN ScheduledAt = new();

        public TestIncompatibleSchedule Read(System.IO.BinaryReader reader) =>
            SpacetimeDB.BSATN.IStructuralReadWrite.Read<TestIncompatibleSchedule>(reader);

        public void Write(System.IO.BinaryWriter writer, TestIncompatibleSchedule value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<TestIncompatibleSchedule>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new(nameof(ScheduledId), ScheduledId.GetAlgebraicType(registrar)),
                        new(nameof(ScheduledAt), ScheduledAt.GetAlgebraicType(registrar))
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<TestIncompatibleSchedule>.GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) => GetAlgebraicType(registrar);
    }

    public ulong ScheduledId;
    public SpacetimeDB.ScheduleAt ScheduledAt;
} // TestIncompatibleSchedule
