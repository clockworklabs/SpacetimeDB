//HintName: TestTypeParams_T_.cs
// <auto-generated />
#nullable enable

partial struct TestTypeParams<T>
    : System.IEquatable<TestTypeParams>,
        SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        Field = BSATN.Field.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.Field.Write(writer, Field);
    }

    public override string ToString() =>
        $"TestTypeParams {{ Field = {SpacetimeDB.BSATN.StringUtil.GenericToString(Field)} }}";

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<TestTypeParams<T>>
    {
        internal static readonly TRW Field = new();

        public TestTypeParams<T> Read(System.IO.BinaryReader reader) =>
            SpacetimeDB.BSATN.IStructuralReadWrite.Read<TestTypeParams<T>>(reader);

        public void Write(System.IO.BinaryWriter writer, TestTypeParams<T> value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType.Ref GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<TestTypeParams<T>>(
                _ => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new(nameof(Field), Field.GetAlgebraicType(registrar))
                    }
                )
            );

        SpacetimeDB.BSATN.AlgebraicType SpacetimeDB.BSATN.IReadWrite<
            TestTypeParams<T>
        >.GetAlgebraicType(SpacetimeDB.BSATN.ITypeRegistrar registrar) =>
            GetAlgebraicType(registrar);
    }

    public override int GetHashCode()
    {
        return Field.GetHashCode();
    }

#nullable enable
    public bool Equals(TestTypeParams<T> that)
    {
        return Field.Equals(that.Field);
    }

    public override bool Equals(object? that)
    {
        if (that == null)
        {
            return false;
        }
        var that_ = that as TestTypeParams<T>?;
        if (((object?)that_) == null)
        {
            return false;
        }
        return Equals(that_);
    }

    public static bool operator ==(TestTypeParams<T> this_, TestTypeParams<T> that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return object.Equals(this_, that);
        }
        return this_.Equals(that);
    }

    public static bool operator !=(TestTypeParams<T> this_, TestTypeParams<T> that)
    {
        if (((object?)this_) == null || ((object?)that) == null)
        {
            return !object.Equals(this_, that);
        }
        return !this_.Equals(that);
    }
#nullable restore
} // TestTypeParams<T>
