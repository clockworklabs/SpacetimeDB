//HintName: PublicTable.cs

// <auto-generated />
#nullable enable

partial class PublicTable : SpacetimeDB.BSATN.IStructuralReadWrite
{
    public void ReadFields(System.IO.BinaryReader reader)
    {
        id = BSATN.id.Read(reader);
        byteField = BSATN.byteField.Read(reader);
        ushortField = BSATN.ushortField.Read(reader);
        uintField = BSATN.uintField.Read(reader);
        ulongField = BSATN.ulongField.Read(reader);
        uint128Field = BSATN.uint128Field.Read(reader);
        sbyteField = BSATN.sbyteField.Read(reader);
        shortField = BSATN.shortField.Read(reader);
        intField = BSATN.intField.Read(reader);
        longField = BSATN.longField.Read(reader);
        int128Field = BSATN.int128Field.Read(reader);
        boolField = BSATN.boolField.Read(reader);
        floatField = BSATN.floatField.Read(reader);
        doubleField = BSATN.doubleField.Read(reader);
        stringField = BSATN.stringField.Read(reader);
        identityField = BSATN.identityField.Read(reader);
        addressField = BSATN.addressField.Read(reader);
        customStructField = BSATN.customStructField.Read(reader);
        customClassField = BSATN.customClassField.Read(reader);
        customEnumField = BSATN.customEnumField.Read(reader);
        customTaggedEnumField = BSATN.customTaggedEnumField.Read(reader);
        listField = BSATN.listField.Read(reader);
        dictionaryField = BSATN.dictionaryField.Read(reader);
        nullableValueField = BSATN.nullableValueField.Read(reader);
        nullableReferenceField = BSATN.nullableReferenceField.Read(reader);
    }

    public void WriteFields(System.IO.BinaryWriter writer)
    {
        BSATN.id.Write(writer, id);
        BSATN.byteField.Write(writer, byteField);
        BSATN.ushortField.Write(writer, ushortField);
        BSATN.uintField.Write(writer, uintField);
        BSATN.ulongField.Write(writer, ulongField);
        BSATN.uint128Field.Write(writer, uint128Field);
        BSATN.sbyteField.Write(writer, sbyteField);
        BSATN.shortField.Write(writer, shortField);
        BSATN.intField.Write(writer, intField);
        BSATN.longField.Write(writer, longField);
        BSATN.int128Field.Write(writer, int128Field);
        BSATN.boolField.Write(writer, boolField);
        BSATN.floatField.Write(writer, floatField);
        BSATN.doubleField.Write(writer, doubleField);
        BSATN.stringField.Write(writer, stringField);
        BSATN.identityField.Write(writer, identityField);
        BSATN.addressField.Write(writer, addressField);
        BSATN.customStructField.Write(writer, customStructField);
        BSATN.customClassField.Write(writer, customClassField);
        BSATN.customEnumField.Write(writer, customEnumField);
        BSATN.customTaggedEnumField.Write(writer, customTaggedEnumField);
        BSATN.listField.Write(writer, listField);
        BSATN.dictionaryField.Write(writer, dictionaryField);
        BSATN.nullableValueField.Write(writer, nullableValueField);
        BSATN.nullableReferenceField.Write(writer, nullableReferenceField);
    }

    public readonly partial struct BSATN : SpacetimeDB.BSATN.IReadWrite<PublicTable>
    {
        internal static readonly SpacetimeDB.BSATN.I32 id = new();
        internal static readonly SpacetimeDB.BSATN.U8 byteField = new();
        internal static readonly SpacetimeDB.BSATN.U16 ushortField = new();
        internal static readonly SpacetimeDB.BSATN.U32 uintField = new();
        internal static readonly SpacetimeDB.BSATN.U64 ulongField = new();
        internal static readonly SpacetimeDB.BSATN.U128 uint128Field = new();
        internal static readonly SpacetimeDB.BSATN.I8 sbyteField = new();
        internal static readonly SpacetimeDB.BSATN.I16 shortField = new();
        internal static readonly SpacetimeDB.BSATN.I32 intField = new();
        internal static readonly SpacetimeDB.BSATN.I64 longField = new();
        internal static readonly SpacetimeDB.BSATN.I128 int128Field = new();
        internal static readonly SpacetimeDB.BSATN.Bool boolField = new();
        internal static readonly SpacetimeDB.BSATN.F32 floatField = new();
        internal static readonly SpacetimeDB.BSATN.F64 doubleField = new();
        internal static readonly SpacetimeDB.BSATN.String stringField = new();
        internal static readonly SpacetimeDB.Runtime.Identity.BSATN identityField = new();
        internal static readonly SpacetimeDB.Runtime.Address.BSATN addressField = new();
        internal static readonly CustomStruct.BSATN customStructField = new();
        internal static readonly CustomClass.BSATN customClassField = new();
        internal static readonly SpacetimeDB.BSATN.Enum<CustomEnum> customEnumField = new();
        internal static readonly CustomTaggedEnum.BSATN customTaggedEnumField = new();
        internal static readonly SpacetimeDB.BSATN.List<int, SpacetimeDB.BSATN.I32> listField =
            new();
        internal static readonly SpacetimeDB.BSATN.Dictionary<
            string,
            int,
            SpacetimeDB.BSATN.String,
            SpacetimeDB.BSATN.I32
        > dictionaryField = new();
        internal static readonly SpacetimeDB.BSATN.ValueOption<
            int,
            SpacetimeDB.BSATN.I32
        > nullableValueField = new();
        internal static readonly SpacetimeDB.BSATN.RefOption<
            string,
            SpacetimeDB.BSATN.String
        > nullableReferenceField = new();

        public PublicTable Read(System.IO.BinaryReader reader) =>
            SpacetimeDB.BSATN.IStructuralReadWrite.Read<PublicTable>(reader);

        public void Write(System.IO.BinaryWriter writer, PublicTable value)
        {
            value.WriteFields(writer);
        }

        public SpacetimeDB.BSATN.AlgebraicType GetAlgebraicType(
            SpacetimeDB.BSATN.ITypeRegistrar registrar
        ) =>
            registrar.RegisterType<PublicTable>(
                typeRef => new SpacetimeDB.BSATN.AlgebraicType.Product(
                    new SpacetimeDB.BSATN.AggregateElement[]
                    {
                        new(nameof(id), id.GetAlgebraicType(registrar)),
                        new(nameof(byteField), byteField.GetAlgebraicType(registrar)),
                        new(nameof(ushortField), ushortField.GetAlgebraicType(registrar)),
                        new(nameof(uintField), uintField.GetAlgebraicType(registrar)),
                        new(nameof(ulongField), ulongField.GetAlgebraicType(registrar)),
                        new(nameof(uint128Field), uint128Field.GetAlgebraicType(registrar)),
                        new(nameof(sbyteField), sbyteField.GetAlgebraicType(registrar)),
                        new(nameof(shortField), shortField.GetAlgebraicType(registrar)),
                        new(nameof(intField), intField.GetAlgebraicType(registrar)),
                        new(nameof(longField), longField.GetAlgebraicType(registrar)),
                        new(nameof(int128Field), int128Field.GetAlgebraicType(registrar)),
                        new(nameof(boolField), boolField.GetAlgebraicType(registrar)),
                        new(nameof(floatField), floatField.GetAlgebraicType(registrar)),
                        new(nameof(doubleField), doubleField.GetAlgebraicType(registrar)),
                        new(nameof(stringField), stringField.GetAlgebraicType(registrar)),
                        new(nameof(identityField), identityField.GetAlgebraicType(registrar)),
                        new(nameof(addressField), addressField.GetAlgebraicType(registrar)),
                        new(
                            nameof(customStructField),
                            customStructField.GetAlgebraicType(registrar)
                        ),
                        new(nameof(customClassField), customClassField.GetAlgebraicType(registrar)),
                        new(nameof(customEnumField), customEnumField.GetAlgebraicType(registrar)),
                        new(
                            nameof(customTaggedEnumField),
                            customTaggedEnumField.GetAlgebraicType(registrar)
                        ),
                        new(nameof(listField), listField.GetAlgebraicType(registrar)),
                        new(nameof(dictionaryField), dictionaryField.GetAlgebraicType(registrar)),
                        new(
                            nameof(nullableValueField),
                            nullableValueField.GetAlgebraicType(registrar)
                        ),
                        new(
                            nameof(nullableReferenceField),
                            nullableReferenceField.GetAlgebraicType(registrar)
                        )
                    }
                )
            );
    }
} // PublicTable
