namespace SpacetimeDB;

using System.Runtime.CompilerServices;
using SpacetimeDB.BSATN;
using SpacetimeDB.Internal;

// [SpacetimeDB.Type] - we have custom representation of time in microseconds, so implementing BSATN manually
public abstract partial record ScheduleAt
    : SpacetimeDB.TaggedEnum<(DateTimeOffset Time, TimeSpan Interval)>
{
    public static implicit operator ScheduleAt(DateTimeOffset time) => new Time(time);

    public static implicit operator ScheduleAt(TimeSpan interval) => new Interval(interval);

    // Manual expansion of what would be otherwise generated by the [SpacetimeDB.Type] codegen,
    // except we forward to/from a `ScheduleAtRepr` that has the actual generated implementation.

    private ScheduleAt() { }

    [SpacetimeDB.Type]
    private partial record ScheduleAtRepr
        : SpacetimeDB.TaggedEnum<(DateTimeOffsetRepr Time, TimeSpanRepr Interval)>;

    public sealed record Time(DateTimeOffset Time_) : ScheduleAt
    {
        public override void WriteFields(BinaryWriter writer) =>
            new ScheduleAtRepr.Time(new(Time_)).WriteFields(writer);
    }

    public sealed record Interval(TimeSpan Interval_) : ScheduleAt
    {
        public override void WriteFields(BinaryWriter writer) =>
            new ScheduleAtRepr.Interval(new(Interval_)).WriteFields(writer);
    }

    public readonly partial struct BSATN : IReadWrite<ScheduleAt>
    {
        private static readonly ScheduleAtRepr.BSATN ReprBSATN = new();

        public ScheduleAt Read(BinaryReader reader) =>
            ReprBSATN.Read(reader) switch
            {
                ScheduleAtRepr.Time(var timeRepr) => new Time(timeRepr.ToStd()),
                ScheduleAtRepr.Interval(var intervalRepr) => new Interval(intervalRepr.ToStd()),
                _ => throw new SwitchExpressionException(),
            };

        public void Write(BinaryWriter writer, ScheduleAt value) => value.WriteFields(writer);

        public AlgebraicType GetAlgebraicType(ITypeRegistrar registrar) =>
            // Constructing a custom one instead of ScheduleAtRepr.GetAlgebraicType()
            // to avoid leaking the internal *Repr wrappers in generated SATS.
            new AlgebraicType.Sum(
                [
                    new(nameof(Time), new AlgebraicType.U64(default)),
                    new(nameof(Interval), new AlgebraicType.U64(default)),
                ]
            );
    }
}
