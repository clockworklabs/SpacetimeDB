error: type parameters are not allowed on tables
 --> tests/ui/tables.rs:9:18
  |
9 | struct TypeParam<T> {
  |                  ^

error: const parameters are not allowed on tables
  --> tests/ui/tables.rs:14:19
   |
14 | struct ConstParam<const X: u8> {}
   |                   ^^^^^^^^^^^

error[E0277]: the column type `Test` does not implement `SpacetimeType`
 --> tests/ui/tables.rs:5:8
  |
5 |     x: Test,
  |        ^^^^ the trait `SpacetimeType` is not implemented for `Test`
  |
  = note: table column types all must implement `SpacetimeType`
  = note: if you own the type, try adding `#[derive(SpacetimeType)]` to its definition
  = help: the following other types implement trait `SpacetimeType`:
            &T
            ()
            AlgebraicTypeRef
            Alpha
            Arc<T>
            ArrayType
            Box<T>
            ColId
          and $N others
  = note: required for `Test` to implement `TableColumn`

error[E0277]: the trait bound `Test: SpacetimeType` is not satisfied
 --> tests/ui/tables.rs:5:8
  |
5 |     x: Test,
  |        ^^^^ the trait `SpacetimeType` is not implemented for `Test`
  |
  = note: if you own the type, try adding `#[derive(SpacetimeType)]` to its definition
  = help: the following other types implement trait `SpacetimeType`:
            &T
            ()
            AlgebraicTypeRef
            Alpha
            Arc<T>
            ArrayType
            Box<T>
            ColId
          and $N others

error[E0277]: the trait bound `Test: Deserialize<'de>` is not satisfied
 --> tests/ui/tables.rs:5:8
  |
3 | #[spacetimedb::table(name = table)]
  | ----------------------------------- required by a bound introduced by this call
4 | struct Table {
5 |     x: Test,
  |        ^^^^ the trait `Deserialize<'de>` is not implemented for `Test`
  |
  = help: the following other types implement trait `Deserialize<'de>`:
            &'de [u8]
            &'de str
            ()
            AlgebraicTypeRef
            Alpha
            Arc<[T]>
            ArrayType
            Box<T>
          and $N others
note: required by a bound in `spacetimedb::spacetimedb_lib::de::SeqProductAccess::next_element`
 --> $WORKSPACE/crates/sats/src/de.rs
  |
  |     fn next_element<T: Deserialize<'de>>(&mut self) -> Result<Option<T>, Self::Error> {
  |                        ^^^^^^^^^^^^^^^^ required by this bound in `SeqProductAccess::next_element`

error[E0277]: the trait bound `Test: Deserialize<'_>` is not satisfied
 --> tests/ui/tables.rs:5:8
  |
5 |     x: Test,
  |        ^^^^ the trait `Deserialize<'_>` is not implemented for `Test`
  |
  = help: the following other types implement trait `Deserialize<'de>`:
            &'de [u8]
            &'de str
            ()
            AlgebraicTypeRef
            Alpha
            Arc<[T]>
            ArrayType
            Box<T>
          and $N others
note: required by a bound in `get_field_value`
 --> $WORKSPACE/crates/sats/src/de.rs
  |
  |     fn get_field_value<T: Deserialize<'de>>(&mut self) -> Result<T, Self::Error> {
  |                           ^^^^^^^^^^^^^^^^ required by this bound in `NamedProductAccess::get_field_value`

error[E0277]: the trait bound `Test: Serialize` is not satisfied
 --> tests/ui/tables.rs:5:8
  |
5 |     x: Test,
  |        ^^^^ the trait `Serialize` is not implemented for `Test`
  |
  = help: the following other types implement trait `Serialize`:
            &T
            ()
            AlgebraicTypeRef
            Alpha
            Arc<T>
            ArrayType
            ArrayValue
            Bound<T>
          and $N others
note: required by a bound in `spacetimedb::spacetimedb_lib::ser::SerializeNamedProduct::serialize_element`
 --> $WORKSPACE/crates/sats/src/ser.rs
  |
  |     fn serialize_element<T: Serialize + ?Sized>(&mut self, name: Option<&str>, elem: &T) -> Result<(), Self::Error>;
  |                             ^^^^^^^^^ required by this bound in `SerializeNamedProduct::serialize_element`

error[E0277]: `&'a Alpha` cannot appear as an argument to an index filtering operation
  --> tests/ui/tables.rs:30:33
   |
30 |     ctx.db.delta().compound_a().find(Alpha::Beta);
   |                                 ^^^^ should be an integer type, `bool`, `String`, `&str`, `Identity`, `ConnectionId`, or `Hash`, not `&'a Alpha`
   |
   = help: the trait `for<'a> FilterableValue` is not implemented for `&'a Alpha`
   = note: The allowed set of types are limited to integers, bool, strings, `Identity`, `ConnectionId`, and `Hash`
   = help: the following other types implement trait `FilterableValue`:
             &ConnectionId
             &Identity
             &bool
             &ethnum::int::I256
             &ethnum::uint::U256
             &i128
             &i16
             &i32
           and $N others
note: required by a bound in `UniqueColumn::<Tbl, <Col as spacetimedb::table::Column>::ColType, Col>::find`
  --> src/table.rs
   |
   |     pub fn find(&self, col_val: impl Borrow<Col::ColType>) -> Option<Tbl::Row>
   |            ---- required by a bound in this associated function
   |     where
   |         for<'a> &'a Col::ColType: FilterableValue,
   |                                   ^^^^^^^^^^^^^^^ required by this bound in `UniqueColumn::<Tbl, <Col as Column>::ColType, Col>::find`

error[E0277]: the trait bound `Alpha: IndexScanRangeBounds<(Alpha,), SingleBound>` is not satisfied
  --> tests/ui/tables.rs:31:40
   |
31 |     ctx.db.delta().compound_b().filter(Alpha::Gamma);
   |                                 ------ ^^^^^^^^^^^^ the trait `FilterableValue` is not implemented for `Alpha`
   |                                 |
   |                                 required by a bound introduced by this call
   |
   = help: the following other types implement trait `FilterableValue`:
             &ConnectionId
             &Identity
             &bool
             &ethnum::int::I256
             &ethnum::uint::U256
             &i128
             &i16
             &i32
           and $N others
   = note: required for `Alpha` to implement `IndexScanRangeBounds<(Alpha,), SingleBound>`
note: required by a bound in `RangedIndex::<Tbl, IndexType, Idx>::filter`
  --> src/table.rs
   |
   |     pub fn filter<B, K>(&self, b: B) -> impl Iterator<Item = Tbl::Row>
   |            ------ required by a bound in this associated function
   |     where
   |         B: IndexScanRangeBounds<IndexType, K>,
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RangedIndex::<Tbl, IndexType, Idx>::filter`
