error: views must be declared as `#[view(public)]`; `public` is required
  --> tests/ui/views.rs:76:1
   |
76 | #[view]
   | ^^^^^^^
   |
   = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error: duplicate attribute argument: `public`
  --> tests/ui/views.rs:82:1
   |
82 | #[view(public, public)]
   | ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected `public`
  --> tests/ui/views.rs:88:16
   |
88 | #[view(public, anonymous)]
   |                ^^^^^^^^^

error: Views must always have a context parameter: `&ViewContext` or `&AnonymousViewContext`
  --> tests/ui/views.rs:95:1
   |
95 | fn view_def_no_context() -> Vec<Player> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: The first parameter of a view must be a context parameter: `&ViewContext` or `&AnonymousViewContext`; passed by reference
   --> tests/ui/views.rs:107:38
    |
107 | fn view_def_pass_context_by_value(_: ViewContext) -> Vec<Player> {
    |                                      ^^^^^^^^^^^

error: views must return `Vec<T>` or `Option<T>` where `T` is a `SpacetimeType`
   --> tests/ui/views.rs:119:1
    |
119 | fn view_def_no_return(_: &ViewContext) {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `ViewKind<ReducerContext>: ViewKindTrait` is not satisfied
   --> tests/ui/views.rs:100:1
    |
100 | #[view(public)]
    | ^^^^^^^^^^^^^^^ the trait `ViewKindTrait` is not implemented for `ViewKind<ReducerContext>`
    |
    = help: the following other types implement trait `ViewKindTrait`:
              ViewKind<AnonymousViewContext>
              ViewKind<ViewContext>
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0276]: impl has stricter requirements than trait
   --> tests/ui/views.rs:100:1
    |
100 | #[view(public)]
    | ^^^^^^^^^^^^^^^ impl has extra requirement `ViewKind<ReducerContext>: ViewKindTrait`
    |
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ViewKind<u32>: ViewKindTrait` is not satisfied
   --> tests/ui/views.rs:112:1
    |
112 | #[view(public)]
    | ^^^^^^^^^^^^^^^ the trait `ViewKindTrait` is not implemented for `ViewKind<u32>`
    |
    = help: the following other types implement trait `ViewKindTrait`:
              ViewKind<AnonymousViewContext>
              ViewKind<ViewContext>
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0276]: impl has stricter requirements than trait
   --> tests/ui/views.rs:112:1
    |
112 | #[view(public)]
    | ^^^^^^^^^^^^^^^ impl has extra requirement `ViewKind<u32>: ViewKindTrait`
    |
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `iter` found for reference `&test__ViewHandle` in the current scope
  --> tests/ui/views.rs:15:34
   |
15 |     for _ in read_only.db.test().iter() {}
   |                                  ^^^^ method not found in `&test__ViewHandle`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `iter`, perhaps you need to implement one of them:
           candidate #1: `Table`
           candidate #2: `bitflags::traits::Flags`

error[E0599]: `&test__ViewHandle` is not an iterator
  --> tests/ui/views.rs:22:33
   |
 3 | #[table(name = test)]
   | ------------------- doesn't satisfy `test__ViewHandle: Iterator`
...
22 |     let _ = read_only.db.test().count();
   |                                 ^^^^^ `&test__ViewHandle` is not an iterator
   |
   = note: the following trait bounds were not satisfied:
           `&test__ViewHandle: Iterator`
           which is required by `&mut &test__ViewHandle: Iterator`
           `test__ViewHandle: Iterator`
           which is required by `&mut test__ViewHandle: Iterator`
note: the trait `Iterator` must be implemented
  --> $RUST/core/src/iter/traits/iterator.rs
   |
   | pub trait Iterator {
   | ^^^^^^^^^^^^^^^^^^
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `count`, perhaps you need to implement one of them:
           candidate #1: `Table`
   = note: the trait `Iterator` defines an item `count`, but is explicitly unimplemented

error[E0599]: no method named `insert` found for reference `&test__ViewHandle` in the current scope
  --> tests/ui/views.rs:29:25
   |
29 |     read_only.db.test().insert(Test { id: 0, x: 0 });
   |                         ^^^^^^ method not found in `&test__ViewHandle`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `insert`, perhaps you need to implement one of them:
           candidate #1: `Table`
           candidate #2: `bitflags::traits::Flags`
           candidate #3: `ppv_lite86::types::Vec2`
           candidate #4: `ppv_lite86::types::Vec4`

error[E0599]: no method named `try_insert` found for reference `&test__ViewHandle` in the current scope
  --> tests/ui/views.rs:36:25
   |
36 |     read_only.db.test().try_insert(Test { id: 0, x: 0 });
   |                         ^^^^^^^^^^
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `try_insert`, perhaps you need to implement it:
           candidate #1: `Table`
help: there is a method `try_into` with a similar name, but with different arguments
  --> $RUST/core/src/convert/mod.rs
   |
   |     fn try_into(self) -> Result<T, Self::Error>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `delete` found for reference `&test__ViewHandle` in the current scope
  --> tests/ui/views.rs:43:25
   |
43 |     read_only.db.test().delete(Test { id: 0, x: 0 });
   |                         ^^^^^^ method not found in `&test__ViewHandle`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `delete`, perhaps you need to implement it:
           candidate #1: `Table`

error[E0599]: no method named `delete` found for struct `UniqueColumnReadOnly` in the current scope
  --> tests/ui/views.rs:50:30
   |
50 |     read_only.db.test().id().delete(&0);
   |                              ^^^^^^ method not found in `UniqueColumnReadOnly<test__TableHandle, u32, id>`

error[E0599]: no method named `update` found for struct `UniqueColumnReadOnly` in the current scope
  --> tests/ui/views.rs:57:30
   |
57 |     read_only.db.test().id().update(Test { id: 0, x: 0 });
   |                              ^^^^^^ method not found in `UniqueColumnReadOnly<test__TableHandle, u32, id>`

error[E0599]: no method named `delete` found for struct `RangedIndexReadOnly` in the current scope
  --> tests/ui/views.rs:64:29
   |
64 |     read_only.db.test().x().delete(0u32..);
   |                             ^^^^^^ method not found in `RangedIndexReadOnly<test__TableHandle, (u32,), x>`

error[E0599]: no function or associated item named `register` found for struct `ViewRegistrar<ReducerContext>` in the current scope
   --> tests/ui/views.rs:100:1
    |
100 | #[view(public)]
    | ^^^^^^^^^^^^^^^ function or associated item not found in `ViewRegistrar<ReducerContext>`
    |
    = note: the function or associated item was found for
            - `ViewRegistrar<AnonymousViewContext>`
            - `ViewRegistrar<ViewContext>`
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: The first parameter of a `#[view]` must be `&ViewContext` or `&AnonymousViewContext`
   --> tests/ui/views.rs:101:31
    |
101 | fn view_def_wrong_context(_: &ReducerContext) -> Vec<Player> {
    |                               ^^^^^^^^^^^^^^ the trait `ViewContextArg` is not implemented for `ReducerContext`
    |
    = help: the following other types implement trait `ViewContextArg`:
              AnonymousViewContext
              ViewContext

error[E0599]: no function or associated item named `invoke` found for struct `ViewDispatcher<ReducerContext>` in the current scope
   --> tests/ui/views.rs:100:1
    |
100 | #[view(public)]
    | ^^^^^^^^^^^^^^^ function or associated item not found in `ViewDispatcher<ReducerContext>`
    |
    = note: the function or associated item was found for
            - `ViewDispatcher<AnonymousViewContext>`
            - `ViewDispatcher<ViewContext>`
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no function or associated item named `register` found for struct `ViewRegistrar<u32>` in the current scope
   --> tests/ui/views.rs:112:1
    |
112 | #[view(public)]
    | ^^^^^^^^^^^^^^^ function or associated item not found in `ViewRegistrar<u32>`
    |
    = note: the function or associated item was found for
            - `ViewRegistrar<AnonymousViewContext>`
            - `ViewRegistrar<ViewContext>`
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: The first parameter of a `#[view]` must be `&ViewContext` or `&AnonymousViewContext`
   --> tests/ui/views.rs:113:40
    |
113 | fn view_def_wrong_context_position(_: &u32, _: &ViewContext) -> Vec<Player> {
    |                                        ^^^ the trait `ViewContextArg` is not implemented for `u32`
    |
    = help: the following other types implement trait `ViewContextArg`:
              AnonymousViewContext
              ViewContext

error[E0277]: the view argument `&ViewContext` does not implement `SpacetimeType`
   --> tests/ui/views.rs:113:48
    |
113 | fn view_def_wrong_context_position(_: &u32, _: &ViewContext) -> Vec<Player> {
    |                                                ^^^^^^^^^^^^ the trait `SpacetimeType` is not implemented for `ViewContext`
    |
    = note: if you own the type, try adding `#[derive(SpacetimeType)]` to its definition
    = help: the following other types implement trait `SpacetimeType`:
              &T
              ()
              AlgebraicType
              AlgebraicTypeRef
              Arc<T>
              ArrayType
              Box<T>
              ColId
            and $N others
    = note: required for `&ViewContext` to implement `SpacetimeType`
    = note: required for `&ViewContext` to implement `ViewArg`

error[E0599]: no function or associated item named `invoke` found for struct `ViewDispatcher<u32>` in the current scope
   --> tests/ui/views.rs:112:1
    |
112 | #[view(public)]
    | ^^^^^^^^^^^^^^^ function or associated item not found in `ViewDispatcher<u32>`
    |
    = note: the function or associated item was found for
            - `ViewDispatcher<AnonymousViewContext>`
            - `ViewDispatcher<ViewContext>`
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: invalid view signature
   --> tests/ui/views.rs:122:1
    |
122 | #[view(public)]
    | ^^^^^^^^^^^^^^^ this view signature is not valid
    |
    = help: the trait `spacetimedb::rt::View<'_, _, _>` is not implemented for fn item `for<'a> fn(&'a ViewContext) -> Player {view_def_wrong_return}`
    = note:
    = note: view signatures must match:
    = note:     `Fn(&ViewContext, [T1, ...]) -> Vec<Tn> | Option<Tn>`
    = note: where each `Ti` implements `SpacetimeType`.
    = note:
note: required by a bound in `ViewRegistrar::<ViewContext>::register`
   --> src/rt.rs
    |
    |     pub fn register<'a, A, I, T, V>(view: V)
    |            -------- required by a bound in this associated function
...
    |         V: View<'a, A, T>,
    |            ^^^^^^^^^^^^^^ required by this bound in `ViewRegistrar::<ViewContext>::register`
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: Views must return `Vec<T>` or `Option<T>` where `T` is a `SpacetimeType`
   --> tests/ui/views.rs:123:46
    |
123 | fn view_def_wrong_return(_: &ViewContext) -> Player {
    |                                              ^^^^^^ the trait `ViewReturn` is not implemented for `Player`
    |
    = help: the following other types implement trait `ViewReturn`:
              Option<T>
              Vec<T>

error[E0277]: invalid view signature
   --> tests/ui/views.rs:122:1
    |
122 | #[view(public)]
    | ^^^^^^^^^^^^^^^ this view signature is not valid
    |
    = help: the trait `spacetimedb::rt::View<'_, _, _>` is not implemented for fn item `for<'a> fn(&'a ViewContext) -> Player {view_def_wrong_return}`
    = note:
    = note: view signatures must match:
    = note:     `Fn(&ViewContext, [T1, ...]) -> Vec<Tn> | Option<Tn>`
    = note: where each `Ti` implements `SpacetimeType`.
    = note:
note: required by a bound in `ViewDispatcher::<ViewContext>::invoke`
   --> src/rt.rs
    |
    |     pub fn invoke<'a, A, T, V>(view: V, ctx: ViewContext, args: &'a [u8]) -> Vec<u8>
    |            ------ required by a bound in this associated function
...
    |         V: View<'a, A, T>,
    |            ^^^^^^^^^^^^^^ required by this bound in `ViewDispatcher::<ViewContext>::invoke`
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotSpacetimeType: SpacetimeType` is not satisfied
   --> tests/ui/views.rs:130:1
    |
130 | #[view(public)]
    | ^^^^^^^^^^^^^^^ the trait `SpacetimeType` is not implemented for `NotSpacetimeType`
    |
    = note: if you own the type, try adding `#[derive(SpacetimeType)]` to its definition
    = help: the following other types implement trait `SpacetimeType`:
              &T
              ()
              AlgebraicType
              AlgebraicTypeRef
              Arc<T>
              ArrayType
              Box<T>
              ColId
            and $N others
    = note: required for `for<'a> fn(&'a AnonymousViewContext) -> Option<NotSpacetimeType> {view_def_returns_not_a_spacetime_type}` to implement `AnonymousView<'_, (), NotSpacetimeType>`
note: required by a bound in `ViewRegistrar::<AnonymousViewContext>::register`
   --> src/rt.rs
    |
    |     pub fn register<'a, A, I, T, V>(view: V)
    |            -------- required by a bound in this associated function
...
    |         V: AnonymousView<'a, A, T>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ViewRegistrar::<AnonymousViewContext>::register`
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotSpacetimeType: Serialize` is not satisfied
   --> tests/ui/views.rs:130:1
    |
130 | #[view(public)]
    | ^^^^^^^^^^^^^^^ the trait `Serialize` is not implemented for `NotSpacetimeType`
    |
    = help: the following other types implement trait `Serialize`:
              &T
              ()
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
              (T0, T1, T2, T3, T4, T5)
              (T0, T1, T2, T3, T4, T5, T6)
            and $N others
    = note: required for `for<'a> fn(&'a AnonymousViewContext) -> Option<NotSpacetimeType> {view_def_returns_not_a_spacetime_type}` to implement `AnonymousView<'_, (), NotSpacetimeType>`
note: required by a bound in `ViewRegistrar::<AnonymousViewContext>::register`
   --> src/rt.rs
    |
    |     pub fn register<'a, A, I, T, V>(view: V)
    |            -------- required by a bound in this associated function
...
    |         V: AnonymousView<'a, A, T>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ViewRegistrar::<AnonymousViewContext>::register`
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotSpacetimeType: SpacetimeType` is not satisfied
   --> tests/ui/views.rs:131:71
    |
131 | fn view_def_returns_not_a_spacetime_type(_: &AnonymousViewContext) -> Option<NotSpacetimeType> {
    |                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SpacetimeType` is not implemented for `NotSpacetimeType`
    |
    = note: if you own the type, try adding `#[derive(SpacetimeType)]` to its definition
    = help: the following other types implement trait `SpacetimeType`:
              &T
              ()
              AlgebraicType
              AlgebraicTypeRef
              Arc<T>
              ArrayType
              Box<T>
              ColId
            and $N others
    = note: required for `Option<NotSpacetimeType>` to implement `ViewReturn`

error[E0277]: the trait bound `NotSpacetimeType: SpacetimeType` is not satisfied
   --> tests/ui/views.rs:130:1
    |
130 | #[view(public)]
    | ^^^^^^^^^^^^^^^ the trait `SpacetimeType` is not implemented for `NotSpacetimeType`
    |
    = note: if you own the type, try adding `#[derive(SpacetimeType)]` to its definition
    = help: the following other types implement trait `SpacetimeType`:
              &T
              ()
              AlgebraicType
              AlgebraicTypeRef
              Arc<T>
              ArrayType
              Box<T>
              ColId
            and $N others
    = note: required for `for<'a> fn(&'a AnonymousViewContext) -> Option<NotSpacetimeType> {view_def_returns_not_a_spacetime_type}` to implement `AnonymousView<'_, (), NotSpacetimeType>`
note: required by a bound in `ViewDispatcher::<AnonymousViewContext>::invoke`
   --> src/rt.rs
    |
    |     pub fn invoke<'a, A, T, V>(view: V, ctx: AnonymousViewContext, args: &'a [u8]) -> Vec<u8>
    |            ------ required by a bound in this associated function
...
    |         V: AnonymousView<'a, A, T>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ViewDispatcher::<AnonymousViewContext>::invoke`
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotSpacetimeType: Serialize` is not satisfied
   --> tests/ui/views.rs:130:1
    |
130 | #[view(public)]
    | ^^^^^^^^^^^^^^^ the trait `Serialize` is not implemented for `NotSpacetimeType`
    |
    = help: the following other types implement trait `Serialize`:
              &T
              ()
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
              (T0, T1, T2, T3, T4, T5)
              (T0, T1, T2, T3, T4, T5, T6)
            and $N others
    = note: required for `for<'a> fn(&'a AnonymousViewContext) -> Option<NotSpacetimeType> {view_def_returns_not_a_spacetime_type}` to implement `AnonymousView<'_, (), NotSpacetimeType>`
note: required by a bound in `ViewDispatcher::<AnonymousViewContext>::invoke`
   --> src/rt.rs
    |
    |     pub fn invoke<'a, A, T, V>(view: V, ctx: AnonymousViewContext, args: &'a [u8]) -> Vec<u8>
    |            ------ required by a bound in this associated function
...
    |         V: AnonymousView<'a, A, T>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ViewDispatcher::<AnonymousViewContext>::invoke`
    = note: this error originates in the attribute macro `view` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotSpacetimeType: SpacetimeType` is not satisfied
   --> tests/ui/views.rs:131:71
    |
131 | fn view_def_returns_not_a_spacetime_type(_: &AnonymousViewContext) -> Option<NotSpacetimeType> {
    |                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SpacetimeType` is not implemented for `NotSpacetimeType`
    |
    = note: if you own the type, try adding `#[derive(SpacetimeType)]` to its definition
    = help: the following other types implement trait `SpacetimeType`:
              &T
              ()
              AlgebraicType
              AlgebraicTypeRef
              Arc<T>
              ArrayType
              Box<T>
              ColId
            and $N others
    = note: required for `Option<NotSpacetimeType>` to implement `SpacetimeType`

error[E0277]: invalid signature for scheduled table reducer or procedure
   --> tests/ui/views.rs:136:56
    |
136 | #[spacetimedb::table(name = scheduled_table, scheduled(scheduled_table_view))]
    | -------------------------------------------------------^^^^^^^^^^^^^^^^^^^^---
    | |                                                      |
    | |                                                      unsatisfied trait bound
    | required by a bound introduced by this call
    |
    = help: the trait `ExportFunctionForScheduledTable<'_, ScheduledTable, FnKindView>` is not implemented for fn item `for<'a> fn(&'a ViewContext, ScheduledTable) -> Vec<Player> {scheduled_table_view}`
    = note: views cannot be scheduled
    = note: the scheduled function must take `ScheduledTable` as its sole argument
    = note: e.g: `fn scheduled_reducer(ctx: &ReducerContext, arg: ScheduledTable)`
    = note: or `fn scheduled_procedure(ctx: &mut ProcedureContext, arg: ScheduledTable)`
note: required by a bound in `scheduled_typecheck`
   --> src/rt.rs
    |
    | pub const fn scheduled_typecheck<'de, Row, FnKind>(_x: impl ExportFunctionForScheduledTable<'de, Row, FnKind>)
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `scheduled_typecheck`
