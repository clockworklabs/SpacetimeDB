#!/bin/bash

# Runs a test with the assumption that it will return a zero result code
run_test() {
	set +e
	"$@" > "$TEST_OUT" 2>&1
	RESULT=$?
	cat "$TEST_OUT"
	set -e
	return "$RESULT"
}

# Runs a test with the assumption that it will return a non-zero result code
run_fail_test() {
	if "$@" > "$TEST_OUT" 2>&1 ; then
		cat "$TEST_OUT"
		return 1
	fi
	cat "$TEST_OUT"
	return 0
}

# This resets the spacetime config for a new test run
reset_config() {
	SPACETIME_CONFIG_FILE="$(mktemp)"
	export SPACETIME_CONFIG_FILE
	cp "$RESET_SPACETIME_CONFIG" "$SPACETIME_CONFIG_FILE"
	echo "Using config file: $SPACETIME_CONFIG_FILE"
	cat "$SPACETIME_CONFIG_FILE"
}

# This deletes the project from the previous test run
reset_project() {
	RETURN_DIR=$PWD
	if [ "$PROJECT_PATH" != "" ] && [ -d "$PROJECT_PATH" ] ; then
		rm -rf "$PROJECT_PATH"
	fi
	PROJECT_PATH="$(mktemp -d)"
	rmdir "$PROJECT_PATH"
	cp -rp "$RESET_PROJECT_PATH" "$PROJECT_PATH"
	export PROJECT_PATH

	cd "$RETURN_DIR" || exit 1
}

reset_test_out() {
	TEST_OUT="$(mktemp)"   
	export TEST_OUT
}

# This creates a new spacetime project that is completely dependent on the local repository.
create_project() {
	reset_project
	run_test spacetime init --lang=rust "$PROJECT_PATH"
	# We have to force using the local spacetimedb_bindings otherwise we will download them from crates.io
	if [[ "$OSTYPE" == "darwin"* ]]; then
		sed -i '' "s@.*spacetimedb.*=.*@spacetimedb = { path = \"${SPACETIME_DIR}/crates/bindings\" }@g" "${PROJECT_PATH}/Cargo.toml" 
	elif [[ "$OSTYPE" == "msys"* ]]; then
		# Running in git bash; do horrible path conversion; yes we do need all of those
		WINPATH="$(cygpath -w "${SPACETIME_DIR}/crates/bindings" | sed 's/\\/\\\\\\\\/g')"
		sed -i "s@.*spacetimedb.*=.*@spacetimedb = { path = \"${WINPATH}\" }@g" "${PROJECT_PATH}/Cargo.toml" 
	else
		sed -i "s@.*spacetimedb.*=.*@spacetimedb = { path = \"${SPACETIME_DIR}/crates/bindings\" }@g" "${PROJECT_PATH}/Cargo.toml"
	fi


}

random_string() {
	if [[ "$OSTYPE" == "darwin"* ]]; then
		echo $RANDOM | md5 -q | head -c 20
	else
		echo $RANDOM | md5sum | head -c 20
	fi
}

spacetime_publish() {
	RETURN_DIR=$PWD
	cd "$SPACETIME_DIR"
	set +e
	run_test spacetime publish "$@"
	RESULT_CODE=$?
	cd "$RETURN_DIR" || exit 1
	set -e
	return "$RESULT_CODE"
}

fsed() {
	if [[ "$OSTYPE" == "darwin"* ]]; then
		sed -i.sed_bak "$@"
		rm -f rm *.sed_bak
	else
		sed -i "$@"
	fi
}

restart_docker() {
	docker-compose stop node
	docker-compose start node
	sleep 10
}

# vim: noexpandtab tabstop=4 shiftwidth=4
