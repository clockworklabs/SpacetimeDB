#!/bin/bash

run_test() {
	set +e
	"$@" > "$TEST_OUT" 2>&1
	RESULT=$?
	cat "$TEST_OUT"
	set -e
	return "$RESULT"
}

run_fail_test() {
	if "$@" > "$TEST_OUT" 2>&1 ; then
		cat "$TEST_OUT"
		return 1
	fi
	cat "$TEST_OUT"
	return 0
}

reset_config() {
	RETURN_DIR=$PWD
	cd "$SPACETIME_HOME" || exit 1
	cp "./test/config.toml" "$HOME/.spacetime/config.toml"
	cd "$RETURN_DIR" || exit 1
}

# This deletes the project from the previous test run
reset_project() {
	RETURN_DIR=$PWD
	if [ -d "$PROJECT_PATH" ] ; then
		rm -rf "$PROJECT_PATH"
	fi

	cd "$RETURN_DIR" || exit 1
}

# This creates a new spacetime project that is completely dependent on the local repository.
create_project() {
	reset_project
	run_test cargo run init --lang=rust "$PROJECT_PATH"
	# We have to force using the local spacetimedb_bindings otherwise we will download them from crates.io
	if [[ "$OSTYPE" == "darwin"* ]]; then
		sed -i '' "s@.*spacetimedb.*=.*@spacetimedb = { path = \"${SPACETIME_DIR}/crates/bindings\" }@g" "${PROJECT_PATH}/Cargo.toml" 
    elif [[ "$OSTYPE" == "msys"* ]]; then
        # Running in git bash; do horrible path conversion; yes we do need all of those
        WINPATH="$(cygpath -w "${SPACETIME_DIR}/crates/bindings" | sed 's/\\/\\\\\\\\/g')"
		sed -i "s@.*spacetimedb.*=.*@spacetimedb = { path = \"${WINPATH}\" }@g" "${PROJECT_PATH}/Cargo.toml" 
	else
		sed -i "s@.*spacetimedb.*=.*@spacetimedb = { path = \"${SPACETIME_DIR}/crates/bindings\" }@g" "${PROJECT_PATH}/Cargo.toml"
	fi


}

random_string() {
	if [[ "$OSTYPE" == "darwin"* ]]; then
		echo $RANDOM | md5 -q | head -c 20
	else
		echo $RANDOM | md5sum | head -c 20
	fi
}

spacetime_publish() {
	RETURN_DIR=$PWD
	cd "$SPACETIME_DIR"
	set +e
	run_test cargo run publish "$@"
	RESULT_CODE=$?
	cd "$RETURN_DIR" || exit 1
	set -e
	return "$RESULT_CODE"
}

fsed() {
	if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i.sed_bak "$@"
        rm -f rm *.sed_bak
	else
        sed -i "$@"
	fi
}

