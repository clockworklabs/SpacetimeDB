name: Package SpacetimeDB CLI

on:
  push:
    tags:
      - '**'
    branches:
      - master
      - release/*
      - bfops/test-pr

jobs:
  build-cli:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: x86_64 Windows, target: x86_64-pc-windows-msvc, runner: windows-latest }

    name: Build CLI for ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    container: ${{ matrix.container || '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Show arch
        run: uname -a

      - name: Install ubuntu dependencies
        if: matrix.container == 'debian:bookworm'
        run: |
          apt-get update -y
          apt-get install -y gcc g++ bash curl perl git make

      - name: Install musl dependencies
        # TODO: Should we use `matrix.container == 'alpine'` instead of the `endsWith` check?
        if: endsWith(matrix.target, '-musl')
        run: apk add gcc g++ bash curl linux-headers perl git make

      - name: Install Rust
        uses: dsherret/rust-toolchain-file@v1

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: Compile
        run: |
          cargo build --release --target ${{ matrix.target }} -p spacetimedb-cli -p spacetimedb-standalone -p spacetimedb-update

      - name: Package (unix)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          mkdir build
          cd target/${{matrix.target}}/release
          cp spacetimedb-update ../../../build/spacetimedb-update-${{matrix.target}}
          tar -czf ../../../build/spacetime-${{matrix.target}}.tar.gz spacetimedb-{cli,standalone}

      - name: Package (windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir build
          cd target/${{matrix.target}}/release
          cp spacetimedb-update.exe ../../../build/spacetimedb-update-${{matrix.target}}.exe
          7z a ../../../build/spacetime-${{matrix.target}}.zip spacetimedb-cli.exe spacetimedb-standalone.exe
